-include "../setl4.stl"

    out('Test set')
    out()
    set = new('set 5 10 15 20 25 25')
    add(set,30)
    show(set)
    out()

    setu = new('set')
    add(setu,5)
    add(setu,15)
    add(setu,25)
    add(setu,30)
    add(setu,10)
    add(setu,20)
    add(setu,5)
    show(setu)

    out()
    out('test set equality - expect success')
    show.eval("equal(set,setu)")
    out()
    out()
    out('test membership- expect success/failure')
    out()
    show.eval('member(set,5)')
    show.eval('member(set,6)')
    out()
    out('Test exists/forall with element in set - expect success/failure')
    out()
    show.eval("exists(set,'eq(this,10)')")
    show.eval("forall(set,'eq(this,10)')")
    out()

    out('Test exists/forall with element not in set - expect failure/failure')
    out()
    show.eval("exists(set,'eq(this,40)')")
    show.eval("forall(set,'eq(this,40)')")
    out()

    out('Test exists/forall with element not in set - expect failure/success')
    out()
    show.eval("exists(set,'eq(this,6)')")
    show.eval("forall(set,'ne(this,6)')")
    out()
    out()
    out('Test iter')
    out()
    iter = new('iter 1 10 2')
    show(iter)
    show(set.iter(iter))
    out()
    out('expect success')
    show.eval("eq(set.size(iter),5)")
    out()
    show(iter)
    out('expect success')
    show.eval('member(iter,5)')
    out()
    out('expect failure')
    show.eval('member(iter,6)')
    out()
    iter = new('iter 25 5 5')
    show(iter)
    show(set.iter(iter))
    out()
    out()

    out('Test map')

    map = new('map one:1 two:2 ten:10 forty:40 hundred:100 thousand:1000')
    show(map)

    out()
    out('Test map get - expect success/failure')


    out()
    show.eval("eq(get(map,'one'),1)")
    show.eval("eq(get(map,'one'),6)")
    out()
    out()

    out('Test exists/forall with element in map- expect success/failure')
    out()
    show.eval("exists(map,'eq(get(map,this),2)')")
    show.eval("forall(map,'eq(get(map,this),2)')")
    out()
    out()

    out('Test exists/forall with element not in - expect failure/failure')
    out()
    show.eval("exists(map,'eq(this,500)')")
    show.eval("forall(map,'eq(this,500)')")
    out()
    out()

    out("Here endeth the test.")

end
