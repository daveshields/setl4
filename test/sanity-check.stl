-include "../setl4.stl"

    out('Test set')
    out()
    set = new('set 5 10 15 20 25 25')
    add(set,30)
    show(set)
    out()

    setu = new('set')
    add(setu,5)
    add(setu,15)
    add(setu,25)
    add(setu,30)
    add(setu,10)
    add(setu,20)
    add(setu,5)
    show(setu)

    out()
    out('test set equality - expect success')
    show.eval("equal(set,setu)")
    out()
    out()
    out('test membership- expect success/failure')
    out()
    show.eval('member(set,5)')
    show.eval('member(set,6)')
    out()
    out('Test exists/forall with element in set - expect success/failure')
    out()
    show.eval("exists(set,'eq(this,10)')")
    show.eval("forall(set,'eq(this,10)')")
    out()

    out('Test exists/forall with element not in set - expect failure/failure')
    out()
    show.eval("exists(set,'eq(this,40)')")
    show.eval("forall(set,'eq(this,40)')")
    out()

    out('Test exists/forall with element not in set - expect failure/success')
    out()
    show.eval("exists(set,'eq(this,6)')")
    show.eval("forall(set,'ne(this,6)')")
    out()
    out()
    out('Test iter')
    out()
    iter = new('iter 1 10 2')
    show(iter)
    show(set.iter(iter))
    out()
    out('expect success')
    show.eval("eq(set.size(iter),5)")
    out()
    show(iter)
    out('expect success')
    show.eval('member(iter,5)')
    out()
    out('expect failure')
    show.eval('member(iter,6)')
    out()
    iter = new('iter 25 5 5')
    show(iter)
    show(set.iter(iter))
    out()
    out()

    out('Test Map')

    map = new('map one:1 two:2 ten:10 forty:40 hundred:100 thousand:1000')
    show(map)

    out()
    out('Test map get - expect success/failure')


    out()
    show.eval("eq(get(map,'one'),1)")
    show.eval("eq(get(map,'one'),6)")
    out()
    out()

    out('Test exists/forall with element in map- expect success/failure')
    out()
    show.eval("exists(map,'eq(value(this),2)')")
    show.eval("forall(map,'eq(value(this),2)')")
    out()
    out()

    out('Test exists/forall with element not in - expect failure/failure')
    out()
    show.eval("exists(map,'eq(value(this),500)')")
    show.eval("forall(map,'eq(value(this),500)')")
    out()
    out()

    out('Test visit()')
    out()
    out('visit set')
    show.eval("visit(set,'show(this)')")
    out()
    out('visit map')
    show.eval("visit(map,'show(this)')")
    out()
    out('visit iter')
    show.eval("visit(iter,'show(this)')")
    out()
    out()

*   Test sorter function

    out("new('map one:1 two:2 hundred:100 ten:10 million:1000000 eight:8')")
    m = new('map one:1 two:2 hundred:100 ten:10 million:1000000 eight:8')

    out('test map')

    out('no')
    show(m,'no')
    out()
    out()

    out('+i')
    show(m,'+i')
    out()
    out()

    out('-i')
    show(m,'-i')
    out()
    out()

    out('+k')
    show(m,'+k')
    out()
    out()

    out('-k')
    show(m,'-k')
    out()
    out()


    out('+v')
    show(m,'+v')
    out()
    out()

    out('-v')
    show(m,'-v')
    out()

*   Test sequences
    
    out('showing empty sequence')
    seq = new('seq')
    show(seq)

    out('showing sequence with one element')
    seq = new('seq')
    push(seq,10)
    show(seq)

    out('showing sequence with two elements')
    seq = new('seq')
    push(seq,10)
    push(seq,20)
    show(seq)
    out()

    out('showing sequence with four elements')
    out('expect parentheses around values')
    seq = new('seq')
    push(seq,2,4,6,8)
    show(seq)
    out()

    out('showing sequence with twelve elements')
    out('expect brackets around values')
    seq = new('seq')
    push(seq,2,4,6,8)
    push(seq,10,12,14,16)
    push(seq,18,20,22,24)
    show(seq)
    out()

    out('Test slice')
    seq = new('seq 2 4 6 8 10')
    show(seq)
    out("slice(seq,2,2)")
    t = slice(seq,2,2)
    show(t)
    out("slice(seq,2)")
    t = slice(seq,2)
    show(t)
    out("slice(seq,11)")
    t = slice(seq,11)
    show(t)
    out()

    out('test set product strings null')

    seq = new('seq')
    s1 = new('set x y')
    push(seq,s1)
    show(seq)
    show(product(seq))
    out()

    s2 = new('set O R')
    push(seq,s2)
    show(seq)
    show(product(seq))
    out()

    s3 = new('set X L C')
    push(seq,s3)
    show(seq)
    show(product(seq))
    out()

    out('test set product strings not null')
    seq = new('seq')
    s1 = new('set x y')
    push(seq,s1)
    show(seq)
    show(product(seq),'TRUE')
    out()

    s2 = new('set O R')
    push(seq,s2)
    show(seq)
    show(product(seq,'TRUE'))
    out()

    s3 = new('set X L C')
    push(seq,s3)
    show(seq)
    show(product(seq,'TRUE'))
    out()

    out("Here endeth the test.")

end
