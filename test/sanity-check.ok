Test set

{ 5 10 15 20 25 30 }

{ 5 10 15 20 25 30 }

test set equality - expect success
eval equal(set,setu) success


test membership- expect success/failure

eval member(set,5) success
eval member(set,6) failure

Test exists/forall with element in set - expect success/failure

eval exists(set,'eq(this,10)') success
eval forall(set,'eq(this,10)') failure

Test exists/forall with element not in set - expect failure/failure

eval exists(set,'eq(this,40)') failure
eval forall(set,'eq(this,40)') failure

Test exists/forall with element not in set - expect failure/success

eval exists(set,'eq(this,6)') failure
eval forall(set,'ne(this,6)') success


Test iter

{ iter  start=1  finis=10  step=2 } 
( iterator  start=1  finis=10  step=2 ) 

expect success
eval eq(set.size(iter),5) success

{ iter  start=1  finis=10  step=2 } 
expect success
eval member(iter,5) success

expect failure
eval member(iter,6) failure

{ iter  start=25  finis=5  step=-5 } 
( iterator  start=25  finis=5  step=-5 ) 


Test Map
{ 'forty':40 'hundred':100 'one':1 'ten':10 'thousand':1000 'two':2 }

Test map get - expect success/failure

eval eq(get(map,'one'),1) success
eval eq(get(map,'one'),6) failure


Test exists/forall with element in map- expect success/failure

eval exists(map,'eq(value(this),2)') success
eval forall(map,'eq(value(this),2)') failure


Test exists/forall with element not in - expect failure/failure

eval exists(map,'eq(value(this),500)') failure
eval forall(map,'eq(value(this),500)') failure


Test visit()

visit set
5
10
15
20
25
30
eval visit(set,'show(this)') success

visit map
'forty':40
'hundred':100
'one':1
'ten':10
'thousand':1000
'two':2
eval visit(map,'show(this)') success

visit iter
eval visit(iter,'show(this)') success


new('map one:1 two:2 hundred:100 ten:10 million:1000000 eight:8')
test map
no
{ 'one':1 'two':2 'hundred':100 'ten':10 'million':1000000 'eight':8 }


+i
{ 'one':1 'two':2 'hundred':100 'ten':10 'million':1000000 'eight':8 }


-i
{ 'eight':8 'million':1000000 'ten':10 'hundred':100 'two':2 'one':1 }


+k
{ 'eight':8 'hundred':100 'million':1000000 'one':1 'ten':10 'two':2 }


-k
{ 'two':2 'ten':10 'one':1 'million':1000000 'hundred':100 'eight':8 }


+v
{ 'one':1 'two':2 'eight':8 'ten':10 'hundred':100 'million':1000000 }


-v
{ 'million':1000000 'hundred':100 'ten':10 'eight':8 'two':2 'one':1 }

showing empty sequence
( )
showing sequence with one element
( 10 )
showing sequence with two elements
( 10 20 )

showing sequence with four elements
expect parentheses around values
( 2 4 6 8 )

showing sequence with twelve elements
expect brackets around values
[ 1:2 2:4 3:6 4:8 5:10 6:12 7:14 8:16 9:18 10:20 11:22 12:24 ]

Test slice
( 2 4 6 8 10 )
slice(seq,2,2)
( 4 6 )
slice(seq,2)
( 4 6 8 10 )
slice(seq,11)
( )

test set product strings null
( { x y } )
( { x y } )

( { x y } { O R } )
{ ( x O ) ( x R ) ( y O ) ( y R ) }

( { x y } { O R } { C L X } )
{ ( x O C ) ( x O L ) ( x O X ) ( x R C ) ( x R L ) ( x R X ) ( y O C ) (
y O L ) ( y O X ) ( y R C ) ( y R L ) ( y R X ) }

test set product strings not null
( { x y } )
( { 'x' 'y' } )

( { x y } { O R } )
{ xO xR yO yR }

( { x y } { O R } { C L X } )
{ xOC xOL xOX xRC xRL xRX yOC yOL yOX yRC yRL yRX }

Here endeth the test.
