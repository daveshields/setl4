* UTIL.STL

*       Copyright 2017, David Shields
*       Licensed under the MIT license.

*	Use editor to add comment abut this package.


*       This file extends SPITBOL by providng various utility functions.

        :(error.end)
error
        output = 'error lastno ' &lastno
        output = 'ERROR'
        output = 'Fatal error: stopping the madness.'
*       &dump = 3
                                                        :(end)
error.end
        
        define('datename(date)s')                       :(datename.end)

*       Convert date to form with no spaces, just dashes, to be
*       suitable for use as part of a file name.

datename

        datename = replace(date,' :/','---')
        datename = substr(datename,12,8) '-' substr(datename,1,10)
                                                        :(return)
datename.end

        define('log(text)')                             :(log.end)

*       Write text to logfile if making a log.

*LOG*
log
        eq(g.log)                                       :s(return)

        g.logfile = text                                :(return)

log.end


        define('out(text1,text2,text3)type1,type2')     :(out.end)

*       Output a line conisting of TEXT1, TEXT2 enclosed
*       in brackets, followed by TEXT3.

*OUT*
out
        output = text1 (differ(text2) '[' text2 ']', '')  (differ(text3) text3, ''):(return)

        differ(text2)                                   :s(out.text2)

*       Here if just text1.

        output = text1                                  :(return)

out.text2

        type2 = dt(text2)
        type3 = dt(text3)
*       output = 'dt(type2) ' dt(type2)
*       output = 'dt(type3) ' dt(type3)
        ident(datatype(text2),'string')                 :s(out.2)
*       output = 'out second argument not integer or string,'
*.      ' but of type ' type2
*.                                              	:(error)

out.2

        ident(type3,'integer')                          :s(out.3)
        ident(type3,'string')                           :s(out.3)

out.3
        type.ex(text3,'string')                         :s(out.ok)
        type.ex(text3,'integer')             	:s(out.ok)
*       output = 'out third argument not integer or string,'
*.      ' but of type ' type3
*.                                               :(error)

out.ok

        output = text1 ' [' text2 ']' text3  	:(return)

out.end


        define('traceoff()')                            :(traceoff.end)

*       Initiate tracing.

*TRACEOFF*
traceoff
        &ftrace = &trace =

        g.scoring = g.tracing = 0
        out('stop TRACING ')

traceoff.end

        define('traceon()')                             :(traceon.end)

*       Initiate tracing.

*TRACEON*
traceon

        out('start TRACING')
*       &ftrace = &trace = 1500000
        g.scoring = g.tracing = 1
                                                        :(return)
traceon.end

