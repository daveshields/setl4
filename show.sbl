*       Copyright 2017, David Shields
*       Licensed under the MIT license.

*       This file extends SPITBOL by adding support for displaying, in a human-readable
*       form, the basic data structures of PLAYBOL.

* NOTE: Each extension should define its own set of show.* procedures, so this
*       file should be deleted once that is done.

	define('show.value(v)i,ent,type')			:(show.value.end)

*	Show the value of an expression.

*SHOW*
show.value
	typ = dt(v)
						:($('show.value.type.' typ))

show.value.type.array

	show = show.array(v)				:(show.value.done)

show.value.type.integer

	show = convert(v,'string')			:(show.value.done)

show.value.type.move

	show = show.move(v)				:(show.value.done)

show.value.type.pair

	show = show.pair(v)				:(show.value.done)

show.value.type.table

	show = show.table(v)				:(show.value.done)

show.value.type.string

	v break('"')					:s(show.value.string.quote)

	show.value = "'" string "'"			:(show.value.done)

show.value.string.quote

	show.value = '"'  v '"')			:(show.value.done)

show.value.done
							:(return)
show.value.end

	define('show.array(ara)i,first,proto,second')	:(show.array.end)

*	Show an array. Fribble uses only one and two dimensional arrays

show.array

	out('show.array dt(ara)',dt(ara))
	proto = prototype(ara)
	out('show.array prototype ' proto)
	proto break(',')				:s(show.array.2)

*	Here for one dimensional array.

show.array.1
	first = ara[add1(.i)]				:f(show.array.done)
	out(lpad(i,3) tab first)			:(show.array.1)

show.array.2
	first = ara[add1(.i),1]		       	  :f(show.array.done)
	out(lpad(i,3) tab show(first) tab show(ara[i,2])) :(show.array.2)

show.array.done

	out()						:(return)

show.array.end

	define('show.line(line)')			:(show.line.end)

*	Show a line with spaces replaced by '.'

*SHOW.LINE*
show.line

	show.line = replace(line,' ','.')		:(return)

show.line.end

	define('show.lines(lines,title)i,line,titled')	:(show.lines.end)

*	Show the lines that are not empty in an array of lines

*SHOW.LINES*
show.lines

	title  = 'lines' (differ(title) ' ' title, '')
	out(itle)

show.lines.n

	line = lines[add1(.i)]			:f(return)
	empty(line)				:s(show.lines.n)
	differ(titled)				:s(show.lines.titled)

*	Don not list header unless at least one non-empty line

	out('    123456789012345')


	titled = 1

show.lines.titled

	out(lpad(lineid(i),2) ' ' replace(line,' ','.')) :(show.lines.n)

show.lines.end

	define('show.pair(pair)')			:(show.pair.end)

*	Show paired item.

*SHOW.PAIR*
show.pair

	show.pair = '{' lineid(num(pair)) ',' "'"
.			replace(line(pair),' ','.') "'" '}'	:(return)

show.pair.end


	define('show.table(tbl,col)ara,i,key')		:(show.table.end)

*	Show a table.

*SHOW.TABLE*
show.table

	ara = sort(tbl,col)

show.table.next

*	loop:	Get the next tbl key.

	key = ara[add1(.i),1]				:f(show.table.done)

*	Show the entry and continue back to loop.

	out(lpad(show(key),8) ' -> ' show(ara[i,2]))
							:(show.table.next)
show.table.done
	out()						:(return)

show.table.end


	define('show.words(words)i,pos')		:(show.words.end)

*	Show results of words() call.

show.words

	pos = words[add1(.i),1]			:f(return)
	out('words ' lpad(pos,2) ' ' words[i,2])	:(show.words)

show.words.end

