
*   Copyright 2017, David Shields
*   Licensed under the MIT license.

-include "../setl4.stl"

    define('check(this,puzzle)')        :(check.end)

check
    out('checking ' this ' ' puzzle)
    show(this)
    show(puzzle)
    ne(size(this),size(puzzle)) :s(check.fail)
    this span(puzzle) . spn  rem . rest            
    eq(size(spn),size(puzzle))          :f(freturn)
    ident(sorter(this),puzzle)          :f(freturn)s(check.succeed)
*:f(check.fail)s(check.succeed)

check.fail
*   out('check ' this ' ' puzzle ' fails')          
                :(freturn)
check.succeed
    out('check ' this ' ' puzzle ' succeeds')       
            :(return)
check.end

*   &dump = 3
    Dict.in = checkout('dictionary')
    puzzle = host(0)
    puzzle span(' ') = 
    puzzle '-u' rem . puzzle                :s(have.puzzle)
    error('Usage: setl4 wb1.stl -ustring  to enter puzzle')

have.puzzle

    out('Dict datatype',datatype(Dict.in))
    out('Dict size',set.size(Dict.in))
    puzzle = "stop"
    out('puzzle',puzzle)
    puzzled = sorter(puzzle)
    output = 'puzzled [' puzzled ']'
*   &dump = 3; :(end)
    out('sorted puzzle',puzzled)
    puzzle.pat = span(puzzle)
    out('dt Dict',datatype(Dict.in))
    add.trace = 1
    Dict.new = filter(Dict.in,'check(this,puzzle)')
    setl4.show(Dict.new)
    show(Dict.new)
*   dict.new = filter(dict,'eq(size(this),size(puzzle) puzzle.pat')
    out('dt Dict.new',datatype(Dict.new))
    out('size new',set.size(Dict.new))


end
