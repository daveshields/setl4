*   Copyright 2017, David Shields
*   Licensed under the MIT license.

-include "../../setl4.stl"

* This is a simplified version of the sonnet program.
* I still hadn't gotten usages of single quote right, and
* decided that who was I to decide whether a word used by
* Shakespeare was or was not "common."
* The more complex version can be found following the end line for this code.

*## Global variables

*   Global variables have names that start with prefix 'g.'

*   _g.lines_ is a sequence giving all the lines in the sonnets.

*   _g.numeral_ maps a sonnet's number to its equivalent in roman numerals.

    g.numeral = new('map #14')

*   _G.word.str_ is a string that defines a word as used in the sonnets.
*   In addition to letters, Shakespeare used single quotes within words;
*   as for example, "lov'd."

    g.word.str = &ucase &lcase "'"

*   _G.sonnets_ is a sequence giving the sonnets.  Each sonnet has fourteen lines.

    g.sonnets = new('seq #150')

*   _g.words_ is the set of all the words used in the sonnets.

    g.words = new('set #3000')

*   _g.count_ is a map from words to the number of times the word
*   occurs in a sonnet.

    g.count = new('map #3000')

*   _g.uses_ is a map from words to a string giving all the lines in the
*   the sonnets containing an instance of the word.

    g.uses = new('map #3000')

*   _g.sonnet.this is the number of the current sonnet during the find.

    g.sonnet.this = 0

*   Analyze the text of the sonnets.

    define('find(lines)id,line,lineno,sonnet') :(find.end)

*   _Find_ _loops through the lines of text, starting a new sonnet
*   when see the roman numeral with the sonnet number is seen.

find

    loop(lines)

find.line

    line = next(lines)                          :f(find.finis)

*   Some of the lines in the text are indented, so eliminate the indentation.

    line span(' ') =
    lineno = lineno + 1

find.check 

    line span('IVDCXL') . id  rpos(0)           :f(find.line)
    differ(size(id),size(line))                 :s(find.line)

*   Save the sonnet just built unless here at start of first sonnet.

    differ(sonnet) push(g.sonnets,sonnet)

find.found

*   Here after seeing line marking start of sonnet.
    
    g.sonnet.this = g.sonnet.this + 1

    push(g.numeral,line)
    sonnet = new('seq #14')

find.next 

    line  = next(lines)                         :f(find.finis)
    line span(' ') =
    ident(line)                                 :s(find.line)
    line span('IVDCXL') . id  rpos(0)           :s(find.check)
    push(sonnet,line)                           :(find.next)

find.finis

*   Here at end of file. Add the last sonnet.

    differ(sonnet) push(g.sonnets,sonnet)       
                                                :(return)

find.end

    define('list(sonnet,title)line')                :(list.end)

*   List the text of a sonnet, prefaced by _title_, and including line numbers.

list

    out()
    out('Sonnet ' title)
    out()
    show.lines(sonnet,1)                            :(return)

list.end


    define('scan(sonnet,sonnet.num,word.str)line,entry,i,line.num,ref,seen,word,word.pat,words.this')   :(scan.end)

*   _Scan_ looks at each line in a sonnet, extracting its words,
*   updating the  of the number of times a word is used, and.
*   builds a list of references for each word.

scan

    loop(sonnet)

scan.next.line

    g.words = differ(seen) union(g.words,seen)
    line = next(sonnet)                             :f(return)
    line.num = line.num + 1

*   _Words.this_ is a seqence of the words seen in this line.

    words.this = words(line,word.str)
    seen = new('set #10')
    i = num = 0
    loop(words.this)

scan.next.word

    word = tolower(next(words.this))                :f(scan.next.line)
    g.words.count = g.words.count + 1
    put(g.count,word,get(g.count,word) + 1)

*   See if have already seen this word in this line,
*   in which case continue on to next word.

    member(seen,words.this)                         :s(scan.next.word)

*   Add the word to the set of words seen in this line.

    add(seen,word)

*   Add reference for the word in this line.

    ident(word,'0') error("word is '0'")
*   out('adding ref at ' sonnet.num '.' line.num ' for ',word)
    ref = get(g.uses,word)
    put(g.uses,word, (ident(ref) '',ref ' ') (sonnet.num '.' line.num))
                                                    :(scan.next.word)

scan.end

    define('main()entry,i,line,str,this)')          :(main.end)

*   Main program

main

*   Read in the text of the sonnets and find the text for each sonnet.

    g.lines = reader('sonnets.txt','TRUE')

    find(g.lines)   

*
    i = 0
    loop(g.sonnets)

main.scan.next
    
    sonnet = next(g.sonnets)                    :f(main.scan.done)
    scan(sonnet,i = i + 1,g.word.str)        :(main.scan.next)

main.scan.done

*   Here to report results.

    out('Textual analysis of the Sonnets of William Shakespeare.')
    out()
    out('Shakespeare bequeathed the world ' set.size(g.sonnets) ' sonnets,')
    out('consisting of ' g.words.count ' words in ' (set.size(g.sonnets) * 14)   " lines.")

    out()
    out('He used ' set.size(g.words) ' distinct words.')
    out()

*   Build set of the most frequently used words by sorting the map _g.count_,
*   then listing its first few entries.

    out('The most frequently used words:')
    out()

    sorter(g.count,'-v')
    most = new('set')
    i = 0
    visit(g.count,'le(i = i + 1,50) add(most,this)')
    loop(most)

main.counts.next

    entry = next(most)			            :f(main.counted)
    key = key(entry)
    key = ident(key,"i") "I"
    out(lpad(key,10) '  ' value(entry))             :(main.counts.next)

main.counted

*   List the references.

    out()
    out('Concordance')
    out()

    sorter(g.uses,'+k')
    loop(g.uses)

main.uses.next

    entry = next(g.uses)                            :f(main.uses.listed)
    ident(key(entry)) error('null key.')
    str = rpad(key(entry),10) ' ' value(entry)
*   ident(substr(str,1,1),'0') error('zero at start of ref')

*   List _str_ as unquoted string (that's why fourth argument to _show()_ is 1).

    lt(size(str),60) out(str)
    ge(size(str),60) show(str,,,1)
                                                    :(main.uses.next)
main.uses.listed

*   List the text of the sonnets, including the line numbers.

    loop(g.sonnets)
    i = 0

main.list.next

    list(next(g.sonnets),get(g.numeral,i = i + 1))  :s(main.list.next)

                                                    :(return)

main.end

    main()

end

* Here follows the code before I decided to simplify it.

*   Copyright 2017, David Shields
*   Licensed under the MIT license.

-include "setl4.stl"
    
*   &dump = 3

*## Global variables

*   Global variables have names that start with prefix 'g.'

*   Avoid processing and listing mentions of any of following common words:

    g.common.words =
.           'a all am and are art as at be beauty being but by can do dost '
.           'doth eyes fair for from had hath he heart her him his have '
.           'how i if in is it love make me mine more my no nor not now '
.           'o of or on more one others say see self shall she should '
.           'since so some still such sweet than that the thee their then '
.           'they these thine though this those thou time to thy what when '
.           'where which whose will with yet you your'

    g.common = new('set ' g.common.words)

*   _g.lines_ is a sequence giving all the lines in the sonnets.

*   _g.numeral_ maps a sonnet's number to its equivalent in roman numerals.

    g.numeral = new('map #14')

*   _G.word.str_ is a string that defines a word as used in the sonnets.
*   In addition to letters, Shakespeare used single quotes within words;
*   as for example, "lov'd."

    g.word.str = &ucase &lcase "'"

*   _G.sonnets_ is a sequence giving the sonnets.  Each sonnet has fourteen lines.

    g.sonnets = new('seq #150')

*   _g.words_ is the set of all the words used in the sonnets.

    g.words = new('set #3000')

*   _g.count_ is a map from words to the number of times the word
*   occurs in a sonnet.

    g.count = new('map #3000')

*   _g.uses_ is a map from words to a string giving all the lines in the
*   the sonnets containing an instance of the word.

    g.uses = new('map #3000')

*   _g.sonnet.this is the number of the current sonnet during the find.

    g.sonnet.this = 0

*   Analyze the text of the sonnets.

    define('find(lines)id,line,lineno,sonnet') :(find.end)

*   _Find_ _loops through the lines of text, starting a new sonnet
*   when see the roman numeral with the sonnet number is seen.

find

    loop(lines)

find.line

    line = next(lines)                          :f(find.finis)

*   Some of the lines in the text are indented, so eliminate the indentation.

    line span(' ') =
    lineno = lineno + 1

*   Eliminate initial or final instance of single quote (') in the line.

    line = ident(substr(line,1,1),"'") substr(line,2)
    line = ident(substr(line,size(line),1),"'") substr(line,1,size(line) - 1)

find.check 

    line span('IVDCXL') . id  rpos(0)           :f(find.line)
    differ(size(id),size(line))                 :s(find.line)

*   Save the sonnet just built unless here at start of first sonnet.

    differ(sonnet) push(g.sonnets,sonnet)

find.found

*   Here after seeing line marking start of sonnet.
    
    g.sonnet.this = g.sonnet.this + 1

    push(g.numeral,line)
    sonnet = new('seq #14')

find.next 

    line  = next(lines)                         :f(find.finis)
    line span(' ') =
    ident(line)                                 :s(find.line)
    line span('IVDCXL') . id  rpos(0)           :s(find.check)
    push(sonnet,line)                           :(find.next)

find.finis

*   Here at end of file. Add the last sonnet.

    differ(sonnet) push(g.sonnets,sonnet)       
                                                :(return)

find.end

    define('list(sonnet,title)line')                :(list.end)

*   List the text of a sonnet, prefaced by _title_, and including line numbers.

list

    out()
    out('Sonnet ' title)
    out()
    show.lines(sonnet,1)                            :(return)

list.end


    define('scan(sonnet,sonnet.num,word.str)line,entry,i,line.num,ref,seen,word,word.pat,words.this')   :(scan.end)

*   _Scan_ looks at each line in a sonnet, extracting its words,
*   updating the  of the number of times a word is used, and.
*   builds a list of references for each word.

scan

    loop(sonnet)

scan.next.line

    g.words = differ(seen) union(g.words,seen)
    line = next(sonnet)                             :f(return)
    line.num = line.num + 1

*   _Words.this_ is a seqence of the words seen in this line.

    words.this = words(line,word.str)
    seen = new('set #10')
    i = num = 0
    loop(words.this)

scan.next.word

    word = tolower(next(words.this))                :f(scan.next.line)

*   Shakespeare enclosed some phrases in quotes, so fix spurious instances
*   of single quote that result.

    word "'" =
    ident(word,"'")                                 :s(scan.next.word)

*   Eliminate initial and final instances of single quote ("'") in a word.

    word = ident(substr(word,1,1),"'") substr(word,2)
    word = ident(substr(word,size(word),1),"'") substr(word,1,size(word) - 1)

scan.word

    g.words.count = g.words.count + 1
    g.the.count = ident(word,'the') g.the.count + 1
    g.common.count = member(g.common,word) g.common.count + 1 :s(scan.next.word)
    put(g.count,word,get(g.count,word) + 1)

*   See if have already seen this word in this line,
*   in which case continue on to next word.

    member(seen,words.this)                         :s(scan.next.word)

*   Add the word to the set of words seen in this line.

    add(seen,word)

*   Add reference for the word in this line.

    ident(word,'0') error("word is '0'")
*   out('adding ref at ' sonnet.num '.' line.num ' for ',word)
    ref = get(g.uses,word)
    put(g.uses,word, (ident(ref) '',ref ' ') (sonnet.num '.' line.num))
                                                    :(scan.next.word)

scan.end

    define('main()entry,i,line,str,this)')          :(main.end)

*   Main program

main

*   Read in the text of the sonnets and find the text for each sonnet.

    g.lines = reader('sonnets.txt','TRUE')
*   g.lines = reader('t.txt','TRUE')

    find(g.lines)   

*
    i = 0
    loop(g.sonnets)

main.scan.next
    
    sonnet = next(g.sonnets)                    :f(main.scan.done)
    scan(sonnet,i = i + 1,g.word.str)        :(main.scan.next)

main.scan.done

*   Here to report results.

    out('Textual analysis of the Sonnets of William Shakespeare.')
    out()
    out('Shakespeare bequeathed the world ' set.size(g.sonnets) ' sonnets,')
    out('consisting of ' g.words.count ' words in ' (set.size(g.sonnets) * 14)   " lines.")

    out()
    out('He used ' set.size(g.words) ' distinct words, '
.       'of which ' set.size(g.common) ' are common words:')
    out()
    out('The following analysis does not include the frequency and uses of these common words:')
    out()
    show(g.common.words)
    out()
    out('The most commonly used word is "the", which is used ' g.the.count ' times.')
    out()
    out('Other than a common word, here are the most frequently used words:')
    out()

*   Build set of the most frequently used words by sorting the map _g.count_,
*   then listing its first few entries.

    sorter(g.count,'-v')
    most = new('set')
    i = 0
    visit(g.count,'le(i = i + 1,30) add(most,this)')
    loop(most)

main.counts.next

    out(lpad(key(next(most)),10) '  ' value(this))  :s(main.counts.next)

*   List the references.

    out()
    out('Concordance')
    out()

    sorter(g.uses,'+k')
    loop(g.uses)

main.uses.next

    entry = next(g.uses)                            :f(main.uses.listed)
    ident(key(entry)) error('null key.')
    str = rpad(key(entry),10) ' ' value(entry)
*   ident(substr(str,1,1),'0') error('zero at start of ref')

*   List _str_ as unquoted string (that's why fourth argument to _show()_ is 1).

    lt(size(str),60) out(str)
    ge(size(str),60) show(str,,,1)
                                                    :(main.uses.next)
main.uses.listed

*   List the text of the sonnets, including the line numbers.

    loop(g.sonnets)
    i = 0

main.list.next

    list(next(g.sonnets),get(g.numeral,i = i + 1))  :s(main.list.next)

                                                    :(return)

main.end

    main()

end
