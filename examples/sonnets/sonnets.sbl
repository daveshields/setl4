	&dump = 3
*	Define global variables.

	&anchor = &trim = 1
	g.digits = span('0123456789')
	g.punctuation = ",;:.?!"
	g.punctuation.spaces = dupl(' ',size(g.punctuation))
*	g.letter = any(&lcase)

	g.tab = char(9)

*	The datatpe MAP represents a map.

	data('map(type,tbl)')

*	where:

*	TYPE is a string giving the type of the map.
*	TBL is a table of the map's key/value pairs. By convention, the
*	key '-1' is used to count the number of entries in the table.

*	The datatype SONNET represents a sonnet.

	data('sonnet(id,text)')

*	where:

*		ID is the number of the sonnet, in the range 1..154; and,
*		TEXT is a table mapping the line number within a sonnet
*		to the text of that line.

*	g.tag is the tag for the current line, consisting of g.id and
*	g.num separated by a period. For example, '2.3' is the third line
*	in sonnet 2.

	g.whitespace = span(' ')
	g.word.pat = span(&lcase "'")

*	The key '-1' is used in a table to track the number of keys.

*	G.FREQ is a table mapping a word to the number of times it occurs
*	in the sonnets.


*	G.WORD is a table of words found.  For each WORD in G.WORD,
*	REFLIST is a table mapping WORD to a table of the lines 
*	containing an instance of WORD.

*	G.SONNET is the number of the current sonnet.

*	G.SONNETS is a table mapping the number of a sonnet to an instance of
*	the SONNET datatype.

*	REFERENCES is a list, in increasing order, of the lines that reference a
*	particular word. LIST is a string consisting of line numbers separated
*	by a space. LAST is the most recent line containing a use of the word.
*	This assists is detecting multiple uses of a word in a line. 
*	Consider, for example, the statement 'i = i + 1'.
*	REFLIST is a map from a word to the REFS for it.
	
	data('uses(list,last)')

*	g.id is the number identifying a sonnet.
*	g.num is the line number within a sonnet.

*	g.common is a table of common words to be omitted
*	from the concordance.


	define('gather()i,id,line,n,s1,s2,s3,s4,si,str,tag,tbl,txt')	:(gather.end)

*	Build a concordance for Shakespeare's sonnets, by reading
*	the text of the sonnets from standard input and,
*	for each word in a sonnet, writing out, in alpabetical order,
*	lines consisting of 
*
*		n, the numbers of words used in the sonnets; and
*		for each word used in a sonnet, a line consisting
*		of the number of uses of the word, the word, and
*		a list of the lines containing the word, all these
*		fields being separated by a space.	
*		n, the number of lines in the sonnets;
*		n lines containing the text of the sonnets.

gather
	n = n + 1
	out('gather',n)
	out('gather dt g.sonnets',datatype(g.sonnets))
	sonnet = map.get(g.sonnets,n)					:f(return)
	out('gather sonner',datatype(sonnet))
	txt = text(sonnet)
	out('gather txt',datatype(txt))
	id = id(sonnet)
	i = 0

gather.sonnet
	
	out('gather.sonnet dr text',datatype(txt))
	line = txt[i = i + 1]

*	Convert line to lower case, remove punctuation marks,
*	and set up for loop to find words.

	line = replace(trim(line),&ucase,&lcase) 
	line = replace(line,g.punctuation,g.punctuation.spaces) 

gather.compact line '  ' = ' '				:s(gather.compact)

	line = trim(line) ' '

gather.word

	out('gather.word line',line)

	line g.word.pat . word span(' ') =		:f(gather.sonnet)

*	out('word',word)

*	Skip words in the common words table.

	out('checking for common')

	ident(g.common[word])				:s(gather.notcommon)
	g.common.n = g.common.n + 1			:(gather.word)

gather.notcommon

	differ(g.word[word])				:s(gather.word.seen)


*	Here on first seeing a word.

	g.use[-1] = g.use[-1] + 1
	g.use[word] = uses(,tag)

gather.word.seen

	out('gather.word.seen',word)
	ident(word)					:s(gather.word)
*	Increment frequency count for word, and add this line 
*	to the list of the lines containing the word.

	g.freq[word] = g.freq[word] + 1
	use.add(word)					:(gather.word)
	
gather.end

	define('init()')				:(init.end)

*	Initialize global variables. 

init
	g.word = map.init('word')
	g.freq = map.init('freq')
	g.sonnets = map.init('sonnets')
	g.use = map.init('use')
							:(return)
init.end

	define('map.add(map,key,val)tbl')			:(map.add.end)

*	Add or update MAP entry for KEY to be VAL.
*	If KEY is null, set KEY to be one more than current
*	number of entries in the MAP.

map.add
*	output = 'enter map.add'
*	out('map.add type',type(map))
*	out('enter map.add key',key)
*	out('map.add dt map',datatype(map))
	tbl = tbl(map)
*	out('map.add dt tbl',datatype(tbl))
	tbl[-1] = ident(key) tbl[-1] + 1
	key = ident(key) tbl[-1]
*	out('map.add',key ,datatype(val))
	tbl[key] = val					:(return)

map.add.end

	define('map.get(map,key)tbl')			:(map.get.end)

*	Get the value of map MAP for key KEY.

map.get

	tbl = tbl(map)
	map.get = tbl[key]				:(return)

map.get.end

	define('map.init(type)tbl)')			:(map.init.end)

*	Create a map with type TYPE.

map.init

	tbl = table()
	tbl[-1] = 0
	map.init = map(type,tbl)			:(return)

map.init.end

	define('out(text1,text2,text3)')		:(out.end)

*	Write out line consisting of TEXT1, followed by 
*	TEXT2 enclossd in '[]' if TEXT2 is not null, followed
*	by TEXT3.

out
	out = text1 ' ' (differ(text2) '[' text2 ']', '[]') ' ' text3 
	output =  trim(out)				:(return)

out.end

	define('reader()s,tag,text')			:(reader.end)

*	Read in the text of the sonnets, creating a table
*	entry in G.TEXT for each sonnet, with the key
*	being the sonnet number, and the value being an
*	array of the lines of the text of the sonner.

reader

*	Read next line. 

	line = input 					:f(return)
	out('reader in',line)
	line 'STOP'					:s(return)
	ident(line)					:f(reader.notblank)
							:(reader)
reader.notblank

*	Skip empty lines.

	ident(line)					:s(reader)

*	Skip comments.

	line '*'					:s(reader)

*	Look for line consisting of just digits giving the sonnet's number.

	line g.digits					:f(reader.text)

*	Here at start of sonnet.

	g.id = +line
	out('start sonnet',g.sonnet)
	text = map.init('text')
	g.s = sonnet('sonnet',g.id,table())
*	out('adding map ' type(g.sonnets))
	map.add(g.sonnets,g.id, g.s)			:(reader)

reader.text

*	Add this line to text of sonnet.
	
*	out('adding text to sonnet',line)
*	out('adding map ' type(text))
	map.add(text,,line)				:(reader)

reader.end


	define('show.freq()i,count,freq,f,w')		:(show.freq.end)

*	List the twenty most frequently used words.

show.freq

	g.freq[-1] =
	freq = rsort(g.freq,2)
*	out('dt g.freq ' datatype(g.freq) ' dt freq ' datatype(freq)

	out('The bard used these twenty words most frequently:')

show.freq.next

	le(i = i + 1, 20)				:f(return)
	w = freq[i,1]					:f(return)
	f = freq[i,2]
	out(rpad(w,12) ' ' lpad(f,6))			:(show.freq.next)

show.freq.end

	define('show.map(map)ent,i,key,map,n,ti,val')	:(show.map.end)

*	List the map MAP.

show.map

	tbl = copy(tbl(map))
	tbl[-1] =
	ara = convert(tbl,'array')
	n = prototype(ara) break(',') . n
show.map.next

	gt(i = i + 1,n)					:s(return)
	key = ara[i,1]
	val = ara[i,2]
							:($('show.map.' type(map)))

show.map.freq
show.map.word
							:(show.map.out)
show.map.sonnets

	show.sonnet(id(val))				:(return)

show.map.text
	
	show.text(text(val))				:(return)

show.map.use

	val = list(val) ' ' last(val)			:(show.map.out)

show.map.out
	
	out(lpad(key,14) g.tab '-> ' val)		:(show.map.next)

show.map.end

	define('show.sonnet(id)i,map,n,sonnet,text')	:(show.sonnet.end)

*	List the text of a sonnet. 

show.sonnet

	sonnet = map.get(g.sonnets,id)
	out('Sonnet #' num ' by William Shakespeare.')
	out('show.sonnet dt text',datatype(text(sonnet)))
	show.text(text(sonnet))				:(return)

show.sonnet.end

	define('show.sonnets()ara,i,n,tbl,text')	:(show.sonnets.end)

*	List the text of all the sonnets.

show.sonnets

	out('show.sonnets FAIL') :(end)
	tbl = copy(g.sonnets)
	tbl[-1] = 
	ara = convert(tbl,'array')
	n = prototype(ara)
	
show.sonnets.next

	show.sonnet(ara[i = i + 1])		:s(show.sonnets.next)
							:(return)
show.sonnets.end

	define('show.text(text)i,txt')			:(show.text.end)

*	List the lines in text.

show.text

	text = copy(text)
	out('show.tex dt text',datatype(text))
	text[-1] = 
	text = convert(text,'array')

show.text.next

	txt = text[i = i + 1,2]				:f(return)
	out(lpad(ti,2) ' ' txt)				:(show.text.next)

show.text.end

	define('show.uses()n,word,refs,ref,this,wi')	:(show.uses.end)
*	Here after scanning the file. Sort the word
*	dictionary in alphabetical order.

show.uses

	n = g.use[-1]
*	out('listref n ' n
	g.use[-1] =
	refs = sort(g.use,1)
	wi = 0

show.uses.word	

	le(wi = wi + 1,n)				:f(return)
	word = refs[wi,1]
*	out('wi ' wi ' ' word
	this = refs[wi,2]
	out( word ':' tab list(this) ' ' last(this)) :(show.uses.word)

show.uses.end

	define('use.add(word)tag,use')			:(use.add.end)

*	Add this line to the list of uses for WORD unless
*	WORD has already been used in this line.

use.add

	use = g.use[word]
	tag = g.id '.' g.num
	out('enter new use' word  ' tag [' g.tag ']')
	ident(tag,last(use))	 			:s(return)
	list(use) = list(use) ' ' last(use)
	last(use) = g.tag
	out('leave use word [' word ']  list [' list(use) '] last [' last(use))
							:(return)
use.add.end

	g.common = table()
	:(init.done)
	s1 = 'a an and art but doth for from hath have his in I thou me mine my own '
	s2 = 'shall should than that the thee their then they this thou thy to we '
	s3 = 'were what when where which will with your of i is not you be love or '
	s4 = 'so all as by it do on are if no can nor her yet any now he how '
	str = s1 s2 s3 s4i

init.next
	
	str break(' ') . word ' ' =			:f(init.donc)
	g.common[word] = 1				:(init.next)

init.done

*	Main program

	out('enter main program')

	init()
	reader()
	gather()
	show.freq()
	show.uses()
*	show.sonnets()
	show.sonnet(1)
	out('* The bard used ' g.word.n ' words in total, ')
	output = g.common.n ' common words.'
end 
