
*   Copyright 2017, David Shields
*   Licensed under the MIT license.

-include "../setl4.stl"

    define('product(sets)i,s,this')             :(product.end)

*   _Product_ returns the Cartesian product of a sequence of sets, in
*   the form of a set of entries, each of which is a sequence, in
*   order, of the elements from the input sets; the first entry is an element
*   from the first set, the second element is a member of the second set,
*   and so forth.

product

    product = new('seq')

*   The product of an empty set is an empty sequence.
*   The product of a single set is a copy of the set.

    eq(set.size(seq))                           :s(return)
    product = eq(set.size(seq),1) copy(top(sets)) :s(return)

*   Here if two or more input sets, s1 and s2, with sizes n.s1 and n.2.

*   Compute the product _P_ of two sets as follows. 
*   First, for each element in s1, add a sequence consisting of the element to _P_.
*   Then create a new result _Q_ as follows:
*   For each element in the _P_, create n.s2 new entries in _Q_,
*   each consisting of the element from _P_ with the entry from _s2_ added at the end.
*   Set _P_ to be _Q_ and return.
*   

   error('todo') 


product.end

    define('test(set)p')                        :(test.end)

test

    out('enter test')
    show(set)
    out('working...')
    p = product(set)
    out('computed')
    show(p)
    out('exit  test')
    out()
                                            :(return)

test.end

    test(new('set'))
    t = new('set')
    add(t,new('set'))
    test(t)
    test(new('set'))
    test(new('set a'))
    test(new('set a b'))
    test(new('set a b c'))

end

    
