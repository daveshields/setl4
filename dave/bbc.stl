-include  "../setl4.stl"

    &stlimit = 100000000


    define('expand(line)ch')                            :(expand.end)

*   Expand an element in the product to a string that can
*   be evaluated to get its numeric value.

expand

    line len(1) . ch =                              :f(return)
    expand = ident(ch,'+') expand ' + '             :s(expand)
    expand = ident(ch,'-') expand ' - '             :s(expand)
    ident(ch,'.')                                   :s(expand)
    expand = expand ch                              :(expand)

expand.ch

*   Here if digit

    expand = expand ch                                  :(expand)

expand.end

    define('main()seq,ops,prod')                         :(main.end)

main

    seq = new('seq')
    ops = new('set')
    add(ops,'+')
    add(ops,'-')
    add(ops,'.')
    iter = new('iter 1 8')

main.next.init

    this = next(iter)                               :f(main.init.done)
    push(seq,new('set ' this))
    push(seq,ops)                                   :(main.next.init)

main.init.done

    push(seq,new('set 9'))

*   Compute the Cartesian product to yield all possible combinations.

    prod = product(seq,'TRUE')

*   Convert each element in the product to a string that can be evaluated.

    xprod = new('set')
    loop(prod)

main.x.next

    this = next(prod)                              :f(main.x.done)
    add(xprod,expand(this))                          :(main.x.next)

main.x.done
    yprod = filter(xprod,"eq(eval(this),100)")
    
    out("combinations with value 100")
    out()
    visit(yprod,"show.str(this)") 
    out()

*   Map each solution string to the number of words in it.

    omap = new('map')

    loop(yprod)

main.yprod.next

    this = next(yprod)                          :f(main.yprod.done)
    put(omap,this,set.size(words(this,'123456789+-')))
                                                :(main.yprod.next)
main.yprod.done

    sorter(omap,'+v')
    loop(omap)
    this = next(omap)
    out('solution: the combination with fewest operators')
    out()
    show.str(key(this))
                                                    :(return)

main.end

    main()

end
