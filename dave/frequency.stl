
*   Copyright 2017, David Shields
*   Licensed under the MIT license.

-include "../setl4.stl"

    define('frequency(map)')                :(frequency.end)

*   _Frequency_ returns a frequency distribution for a map or string.
*   The frequency distribution of a string gives the number of times
*   each character in the string occurs in the string. The distribution
*    of a map gives, for each element in the range of the map
*   the number of keys having the same value.

    define('frequency(map)')                :(frequency.end)

*   _Frequency_ returns a frequency distribution for a map or string.
*   The frequency distribution of a string gives the number of times
*   each character in the string is used. The distribution of a map
*   gives, for each element in the range of the map, the number of
*   keys that have that element as their value.


frequency

    Out('enter freq')
    show(map)

    frequency = new('map')
    ident(datatype(map),'set')           :s(frequency.map)

*   Compute distribution for string by converting string to sequence
*   and merging with code to find distribution for a map.

    map = split.string(map)
    out('f convert')
    show(map)

frequency.map
    
*   Here to compute frequency distribution of a map.

    loop(map)

frequency.next

    this = new(map)                         :f(return)
    Out('datatype this',datatype(this))
    out('value(entry)',value(entry))
    out.dt('value(entry)')
    
    put(frequency,value(this),get(frequency(value(this) + 1))) :(frequency.next)

frequency.end

    define('test(map),f')                     :(test.end)

test
    show(map)
    out('----')
    f = frequency(map)
    show(f)                                 :(return)
test.end

*   m = new('map 1:3 5:7 9:11 13:15 17:19')
*   m = new('set 13 57 911 1315 1719 13 15 2 2 4 4 4 4 8 8 8 8 8 8 8 8 16')
    m = new('map 1:1 2:2 3:1 4:2 5:1 6:2')
    show(m)
    f = frequency(m)
    show(f)
*   test(split.string('dave shields'))

end

    
