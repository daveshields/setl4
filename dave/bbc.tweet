-include  "../setl4.stl"
*   This SETL4 program solves a puzzle that can be found at;
*   http://www.bbc.co.uk/programmes/article/5wkxjTtqTvq8Cyrrjxtk7tc/puzzle-for-today.
*   In brief, consider all strings consisting of the digits 1 .. 9 such that
*   each of first eight is followed by '+', '-' or '.', with '.' implying
*   the digits before and after the dot are to be joined. For example,
*       1+2.3-4+5.6-7-8.9
*   yields
*       1 + 23 - 4 + 56 -7 -89
*   The puzzle is to find, among all the combinations that evaluate to 100,
*   that combination with the fewest operators ('+' or '-').
*   This program solves the puzzle as follows:
*   1) Find all the combinations by forming a Cartesian product;
*   2) expand each combination to a form that can be evaluated
*      to yield an integer value;
*   3) retain only the combinations that have 100 as their value; and
*   4) finding the shortest such combination.
    define('expand(set)this,str')                       :(expand.end)
*   Loop over set, converting each element into SPITBOL string
*   suitable for evaluation.
expand
    expand = new('set')
    loop(set)
expand.next
    next(set)                                           :f(return)
    add(expand,expand.str(this))                        :(expand.next)
expand.end
    define('expand.str(line)ch')                        :(expand.str.end)
*   Convert the argument to a SPITBOL string that can be
*   evaluated to get its numeric value.
expand.str
*   Put space before and after operator to meet SPITBOL expression syntax.
*   Join digits before and after instance of '.' Append digits to output.
    line len(1) . ch =                                  :f(return)
    expand.str = ident(ch,'+') expand.str ' + '         :s(expand.str)
    expand.str = ident(ch,'-') expand.str ' - '         :s(expand.str)
    ident(ch,'.')                                       :s(expand.str)
    expand.str = expand.str ch                          :(expand.str)
expand.str.ch
*   Here if digit. Append it to output.
    expand.str = expand.str ch                          :(expand.str)
expand.str.end
    define('main()seq,ops,prod')                        :(main.end)
main
    seq = new('seq')
    ops = new('set')
    add(ops,'+')
    add(ops,'-')
    add(ops,'.')
    iter = new('iter 1 8')
main.next.init
    this = next(iter)                                   :f(main.init.done)
    push(seq,new('set ' this))
    push(seq,ops)                                       :(main.next.init)
main.init.done
    push(seq,new('set 9'))
    s.100 = filter(expand(p = product(seq,'TRUE')),"eq(eval(this),100)")
    output = 'Number of possible combninations is 3**8 = ' set.size(p)
    out()
    out("Combinations with value 100:")
    out()
    visit(s.100,"show.plain(this)")
    out()
    solution = shortest(s.100)
    out('Here is the combination with fewest operators:')
    out()
    show.plain(shortest(s.100))                         :(return)
main.end
    main()
end
