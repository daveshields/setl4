*   Copyright 2017, David Shields
*   Licensed under the MIT license.

*TODO - may need separate out iterator from set data structure. May have multiple loops over same set at onece.
*TODO - may need equal for general equality test on sets, maps, etc.
*TODO - update new() and rank()
*TODO - in show, need to iterate over copy for set,map,seq so don't alter -next- field

*   SETL4 is an implementation of SETL written in SPITBOL.


*   What is SPITBOL?
*   ----------------

*   SNOBOL is a general programming language with special emphasis on 
*   processing strings and text. *   It was  developed at Bell Labs 
*   in the 1960's by a team led by Ralph Griswold.
*   Their final version was called SNOBOL4.

*   Macro SPITBOL, or SPITBOL, is a very efficient implemenation of SNOBOL4.
*   Created by Robert B. K. Dewar and Ken Belcher in 1969, SPITBOL/360 
*   was written in IBM/360 assembly language, in what Dewar called
*   "aggressive assembly."
*
*   For example, SNOBOL4 requires maintaining a count of the number of 
*   statements executed and the ability to stop execution when a specified 
*   number of statements have been executed.  SPITBOL/360 does this by
*   computing an unnormalized floating point constant such that successive 
*   increments result in floating point overflow when the limit is reached.

*   Dewar and Belcher also wrote Realia COBOL, a COBOL compiler for Intel/x86 
*   written in COBOL. It produced very efficient code, better
*   code than, for example, that produced by IBM's product COBOL compiler.

*   Dewar ported SPITBOL/360 to several machines. Around 1973, while working
*   with Anthony P. (Tony) McCann of Leeds University, he developed
*   Minimal, a portable assembly language. Dewar and McCann then rewrote
*   SPITBOL in Minimal, producing Macro SPITBOL, or SPITBOL. 
*   The implementation has proved very stable, with few changes in
*   several decades.

*   Macro SPITBOL is remarkably small. The code consists of about 28,000
*   lines: 2000 lines of comments defining Minimal, 5000 lines of constant/data 
*   declarations, and 21,000 lines of code.  Every line has a comment.
*   The executable for x86 Linux is 144 kilobytes.

*   SPITBOL was implemented for many machines and operating systems by
*   a small team that included Steve Duff, Mark Emmer, Bob Goldberg, and Dave Shields:
*   ICL 1900, Univac, CDC 6600, IBM PC, Apple Macintosh, SUN Solaris Sparc, 
*   Microsoft (DOS/NT/Windows), Intel x86_64 (Unix/Linux), and x86_64 Apple iOS.  


*   What is SETL?
*   -------------

*   SETL is  a programming language with  finite sets as the fundamental data type.
*   It was created by Jacob T. "Jack" Schwartz of the Courant Institute of 
*   Mathematical Sciences (CIMS) of New York University (NYU).

*   Jack founded the SETL project in 1970. It was later funded by two 
*   five-year grants from the Office of Naval Research.

*   SETL was used to write NYU Ada/Ed, the first validated Ada compiler.
*   Devloped on the DEC Vax 11/780, Ada/Ed was ported to the IBM PC (DOS)
*   by a team led by Dave Shields.


*   Why the name SETL4?
*   -------------------

*   The SETL Project produced three implementations of SETL. The first was
*   written by Dave Shields, the second by Henry S. (Hank) Warren while on 
*   leave from IBM, and the third by Robert B. K. Dewar and Art Grand.

*   SETL4 is the fourth implementation of SETL produced by a member 
*   (Dave Shields) of the NYU SETL project, hence the name SETL4.


*   Brief Introduction to SETL4
*   ---------------------------

*   SETL4 extends SPITBOL by adding the datatype _set_ to represent
*   finite sets. 

*   For example, the folowing SETL4 expression determines if the integer _P_ is prime:

*           !exists(|'int 2 P' @ 'multiple(P,this)')

*   where _multiple(a,b) is true if and only if _a_ is a multiple of _b_.

*   Additonal SETL4 data types
*   --------------------------

*   SETL4 provides the following data types in addtion to _set_: 

*       _entry_   _line_   _token_

*   where 

*       entry(key,value)            is an entry in a map;
*       line(mark,text)             is a line of text and an associated mark (tag); and
*       token(lineno,ndx,type,text) is a lexeme, or lexical token.

*   Show
*   ----

*   The function _show_ writes out the value of a SETL4 object in a readable 
*   form. Objects are shown in the order defined by the function _rank_.


*   SETL4 Binary Operators:
*   -----------------------

*   '&'     a & b   And             True if and only if both _a_ and _b_ are true
*   '@'     s @ e   Eval            Evaluates _e_ at current element of set _s_
*   '#'     s # e   Filter          Returns subset of set _s_ for which _e_ is true
*   '~'     m ~ s   Membership      Tests if _m_ is member of set _s_
*   '^'     a ^ b   Or              True if and only if _a_ or _b_ is true


*   SETL4 Unary Operators:
*   ----------------------

*   '='     =s      Iteration       Returns the current element of an iteration
*   '|'     |'str'  Constructor     Returns set specified by string _str_
*   '!'     !expr   Not             True if and only if _expr_ is false
*   '#'     #s      Size            Number of elements in set _s_
*   '/'     /s      Split           Splits a string into a sequence of words


*   Global variables
*   ----------------

    setl4.ascii.name = 
    setl4.ascii.value =  
    setl4.random_var =


*   SETL4 Functions
*   ---------------
*
*   add(set,elem)                   Adds element to set
*   and(a,b)                        And: Tests if both operands are true
*   arb(n)                          Returns arbitary (randomly chosen) integer in 1 .. _n_
*   arb(set)                        Returns arbitary (randomly chosen) element of _set_
*   assert(expr)                    Tests that _expr_ is true, ends execution otherwise
*   assert.type(obj,type)           Tests that _obj_ has SPITBOL datatype _type_, ends execution otherwise
*   at(set,expr)                    Evaluates _expr_ for for current iterate of _set_
*   concatenate(a,b)                Concatenates two strings
*   defined(map,key)                Tests if a map is defined for a specified key
*   difference(a,b)                 Returns set of members of set _a_ not in the set _b_
*   domain(map)                     Returns set of elements in the domain of a map
*   exists(set,expr)                Tests if an expression is true for at least one element in a set
*   from(set,elem)                  Returns set consisting of the members of a set except a specified member
*   get(map,key)                    Gets the value of map _map_ for _key_
*   false(e)                        tests if argument is false
*   forall(set,expr)                Tests if an expression is true for every element of a set
*   filter(set,expr)                Filter:; returns subset of _set_ for which _expr_ is true
*   integers(n)                     Returns set of integers 1 ... n
*   intersection(a,b)               Returns set of elements common to two sets
*   loop(set)                       Set up iteration over _set_ using _next_
*   mark(line)                      Annotates, or marks, a line
*   member(elem,set)                Tests set membership
*   new(str)                        Returns new set specified by _st_
*   next(set)                       Returns next element in iteration defined by prevous _loop_, fails if no more elements
*   not(expr)                       Not: Tests if operand is false
*   or(a,b)                         Or: Tests if either operand is true
*   put(map,key,val)                Defines the value of a map key
*   random(n)                       Returns random element
*   random.seed()                   Sets random number seed to initialize _random_
*   range(map)                      Returns set of elements in the range of a map
*   rank(set)                       Returns the rank, or normal form, of a set or string.
*   subset(a,b)                     Tests if the second set is a subset of the first set
*   union(a,b)                      Returns set consisting of all the members in two sets
*   set.size(set)                   Returns number of elements in set _set_
*   traceoff()                      Turns off tracing
*   show(v,lvl)                     Show value of _v_, with _lvl_ set non-zero when listing member of set
*   show.b(e)                       Show value of _b_ as boolean
*   show.line(line)                 Show string _line_ with spaces replaced by '.'
*   show.lines(lines,title)         Show non-empty lines in array of lines, with title 'title'
*   show.q(str)                     Show string with enclosed in appropriate quote character (" or ') 
*   show.words(words)               Show a sequence of words, separated by space character
*   traceon()                       Turns on tracing
*   this(set)                       Returns current iteration value for _set_
*   true(e)                         Tests if operand is true
*   visit(set,expr)                 Visits each element of set _set_ and evaluates _expr_ for that element
*   words(str)                      Returns sequence of words, separated by spaces, in a string,


*   Set Data Type
*   -------------

*   A set is defined by the following datatype:

    data('set(set.index,set.key,set.kind,set.size,set.next,set.low,set.high,set.step,set.text,set.seq,set.this)')

*   where

*           _set.index_         a SPITBOL table used to map the integer
*                               id assigned each element to the value of the element.
*                               It is used to support fast iteration.

*           _set.key_           a SPITBOL table mapping set elements to index entries.

*           _set.kind_          is the kind of the set, one of 'set', 'map', 'int, 
*                               'seq', or 'str'. The kind is  specified when the 
*                               set is created. The default value is 'set'.

*           _set.size_          the current number of members.

*           _set.next           is iteration index when iterating over set
*                               when iterating over a 

*           _set.low_           lower bound of _int_ 

*           _set.high_          upper bound of _int_ 

**           _set.step_         number of values between members of set of kind _int_.

*           _set.text_          is the text of the set of kind _str_

*           _set.this           the last value returned by the _next_ primitive


*   Maps
*   --------------

*   In mathematics, a map efined on a finite set is a set of 
*   ordered pairs, or entries,  that define a relation between the 
*   first element of an entry, its _key_, and the second element 
*   of the entry, the value of the map for _key_.

    data('entry(key,value)')

*   The SPITBOL datatype TABLE provides the machinery to implement maps.
*   SPITBOL provides no way to determine the number of entries in a table
*   other than converting the map to an array. This is the only way in 
*   SPITBOL to iterate over a SPITBOL table.

*   For this reason, maps are implemented using two tables: _index_ and _key_.
*   Each new entry added to a map is given an integer id, starting with one.  
*   The field _index_ maps the id's to the associated pairs.
*   The entries in _index_ allow efficient iteration over the  
*
*   The table _key_ maps keys in the map to the corresponding entry in the map.
*   The entries in _key_ permit efficient retrieval of the map's value for a given key.


*   SETL4 Configuration Options
*   ---------------------------

*   Initial size of any hash tables created when constructing
*   a new instance of a 

    setl4.config.size = 32

*   SETL4 Global Variables
*   ----------------------

    setl4.ascii.initialized = false
    setl4.break.whitespace = break(' ' char(9))
    setl4.span.whitespace =  span(' ' char(9))


*   SETL4 Function Definitions
*   --------------------------

    define('add(set,elem)')                     :(add.end)

*   Add _elem_ to set _set_ if not already present.

add

*   Convert _elem_ that is integer to integer.

    elem = integer(elem) +elem
*   See if adding entry or ordinary element.

    ident(datatype(elem,'entry'))                   :s(add.map)
    
*   Here to add element to set if not yet present. Make entry look like
*   map by mapping the set element to itself.

    differ(set.key(set)[elem])                      :s(return)
    elem = entry(elem,elem)                        :(add.new)

add.map

*   See if adding new map entry or updating existing one.

    differ(set.key(set)[key(elem)])                 :s(add.put)

add.new

    set.size(set) = set.size(set) + 1
    set.index(set)[set.size(set)] = key(elem)

add.put

    set.key(set)[key(elem)] = elem              :(return)

add.end

    define('and(a,b)')                          :(and.end)

*   Tests if both operand are true (not null), only 
*   evaluating the second oerand if necessary.

and

*   See if both operands are integers.

    and = integer(a) eq(a)                          :s(freturn)
    and = integer(a) integer(b) ne(a * b)           :s(return)f(freturn)

*   Here where at least one operand for 'and' is not integer, so
*   use ident/differ to evaluate.

    and = differ(a) differ(b)                       :s(return)f(freturn)

and.end

    define('arb(set)n,r')                           :(arb.end)

*   Returns arb (randomly selected) element of _set_.

arb

    arb = integer(set) random(+set)           :s(return)
    r = random(set.size(set))
    arb = differ(set.step(set))         set.low(set) + (r - 1) * step(set) :s(return)
    arb = set.index(set)[r]                         :(return)
arb.end

    define('assert(expr)')                          :(assert.end)

*   Test that expression is non null, ending execution otherwise.

assert

    true(expr)                                      :s(return)
    error('assertion failed, quitting') 

assert.end

    define('assert.type(obj,typ)')                  :(assert.type.end)

*   Verify that _obj_ has datatype _typ_, end execution if not.

assert.type

    assert(ident(datatype(obj),typ))                :s(return)
    error('assertion on datatype failed ' typ )
    

assert.type.end

    define('at(set,expr)this')                      :(at.end)

*   Evaluate _expr_ 

at

    this = set.next(set)
    at = eval(expr)                                 :(return)

at.end

    define('concatenate(a,b)')                      :(concatenate.end)

*   Concatenate argument strings.

concatenate

    concatenate = a b :(return)

concatenate.end

    define('defined(map,key)entry')                 :(defined.end)

*   Tests if the map _map_ has an entry for _key_.

defined

    differ(set.key(map)[key])                       :s(return)f(freturn)

defined.end

    define('difference(a,b)this')                   :(difference.end)

*   Returns set defined by set of elements of _a_ that are not in _b_.

difference

    difference = new()
    loop(a)

diference.next

    this = next(a)                                  :f(return)
    member(b,this)                                  :s(difference.next)
    add(difference,this)                            :(difference.next)

difference.end

    define('from(set,elem)this')                    :(from.end)

*   Return set consisting of all the elements of _a_ except _elem_.

from

    from = new()
    loop(set)

from.next

    this = next(set)                                :f(return)
    differ(this,elem) add(from,this)                :(from.next)

from.end

    define('domain(map)elem)')                      :(domain.end)

*   Return set of the keys in _map_.

domain

    domain = new()
    loop(map)

domain.next

    entry = next(map)                               :f(return)
    differ(entry) add(domain,key(entry))            :(domain.next)

domain.end

    define('error(str)')                            :(error.end)

*   Report cause of error and quit execution

error

    &dump = 2
    output = 'Fatal error: ' str                    :(end)

error.end

    define('exists(set,expr)this,e')                :(exists.end)

*   Tests if there is an element in _set such that _expr_ is true.

exists

    out('exists EXPR',show.q(expr))
    loop(set)

exists.loop

    this = next(set)                                :f(freturn)
    out('exists.loop this',this)
    exists = eval(expr)                             :f(exists.loop)s(return)

exists.end

    define('false(e)')                              :(false.end)

*   Tests if argument is false (null).

false

    e = integer(e) +e
    false = integer(e)  eq(e)                       :s(freturn)
    false = ident(e)                                :s(return)f(freturn)

false.end

    define('filter(set,expr)e,this')                :(filter.end)

*   According to Paul Halmos, in his book "Naive Set Theory,"
*   a major principle of set theory, often referred to by its
*   German name _Aussonderungsaxiom_, is the Axiom of Specification:

*   To every set _A_ and every condition _S(x)_ there corresponds
*   a set _B_ whose elements are exactly those elements _x_ of _A_
*   for which _S(x)_ holds.

*   In SETL4 we say that the expression '_A_ @ _S_' "filters"
*   _A_ by _S_. This can also be read as
*           "the subset of _A_ such that _S_ is true"

*   Returns the subset of set or map _set_ for which _expr_ is true.

filter

    filter = new()

    loop(set)

filter.loop

    this = next(set)                                :f(return)
    e = eval(expr)                                  :f(filter.loop)
    add(filter,this)                                :(filter.loop)

filter.end

    define('forall(set,expr)e')                     :(forall.end)

*   Tests if _expr_ is true for all elements of _set_.

forall

    loop(set)

forall.loop

    next(set)                                       :f(return)
*    out('forall.loop.next',next(set))
    e = eval(expr)                                  :f(freturn)s(forall.loop)

forall.end

    define('get(map,key)val,entry')                 :(get.end)

*   Gets the value of the key _key_ in the map _map_.

get

    entry = set.key(map)[key]
    ident(entry)                                    :s(freturn)
    get = value(set.key(map)[key])                  :(return)

get.end

    define('integers(n)')                           :(integers.end)

*   Return set containing integers 1 .. _n_

integers

    integers = new()

integers.next

    le(i = i + 1,n) add(integers,i)                 :s(integers.next)f(return)

integers.end

    define('intersection(a,b)this')                 :(intersection.end)

*   Returns intersection of sets _a_ and _b_.

intersection

*   Make _a_ the smaller 

    le(set.size(a),set.size(b))                     :s(intersection.next)
    a = b
    b = intersection
    intersection = new()
    loop(a)

intersection.next

    this = next(a)                                  :f(return)
    member(b,this) add(intersection,this)           :(intersection.next)

intersection.end

    define('loop(set)dt')                           :(loop.end)

*   Set up for loop. Set next field so that on first call to _next()_
*   the index will be advanced to the first element in the 

loop

    set.next(set) = (differ(set.step(set)) set.low(set) - set.step(set),0) :(return)

loop.end


    define('member(set,elem)kind,entry,i,key,this,value)') :(member.end)

*   Tests if _elem_ is member of _set_.

member

*    out('member ',elem)
*   Branch according to whether _set_ is set or map.

    ident(datatype(elem),'entry')                   :s(member.map)
    ident(set.kind(set),'int')                      :s(member.int)
    ident(set.kind(set),'set')                      :s(member.set)
    error('member: unexpected kind ' kind )

member.int

    integer(elem)                                  :f(freturn)
    elem = +elem
    lt(elem,set.low(set))                          :s(freturn)
    gt(elem,set.high(set))                         :s(freturn)
    eq(remdr(elem - set.low(set),set.step(set)))   :s(return)f(freturn)

member.set

*   Here to test set membership.

    differ(set.key(set)[elem])                      :s(return)f(freturn)

member.map

*   Here to test map membership

    differ(set.key(set)[key(entry)])                :s(return)f(freturn)

member.end


    define('new(init)kind,i,len,n,key,seq,val)'):(new.end)

*   Construct new set with initial values determined by string _init_.
*   The first three characters in _init_ determine the initial
*   members of the set.
*
*       'int'           Sequence of integers low, low+step, ... high
*       'set'           set, followed by list of initial members
*       'map'           map, followed by list of key/value pairs separated by colon
*       'seq'           sequence, followed by list of initial values.
*       'str'           string sequence of characters defined by remaining characters

new

    new = set(table(setl4.config.size),table(setl4.config.size))
    init = ident(init) 'set'
    kind = substr(init,1,3)
    init span(' ') =
    ne(size(kind),3) error('new missing kind specification')
    ident(kind,'int')                               :s(new.init)
    ident(kind,'map')                               :s(new.init)
    ident(kind,'set')                               :s(new.init)
    error('bad kind to new ' kind )

new.init

*   Strip leading spaces from remaining part of _init_.

    init = substr(init,4)
    init span(' ') =

*   Branch on kind to finish initialization.

                                                    :($('new.' kind))
new.int

    set.kind(new) = 'int'
    set.key(new) = set.index(new) =
    ident(init) error('new initialization information needed')
    set.step(new) = 1
    seq = words(init ' ')

*   Ignore extra arguments to int constructor.

    set.size(seq) = gt(set.size(seq),3) 3
    eq(set.size(seq),1)                             :s(new.int.1)
    eq(set.size(seq),2)                             :s(new.int.2)
    eq(set.size(seq),3)                             :s(new.int.3)

new.int.1

*   If one argument, low is one, high is the argument.

    set.low(new) =  1
    set.high(new) = seq.get(seq,1)            
    set.step(new) = 1                               :(return)

new.int.2

*   If two arguments, low is first argument, high is the second.

    set.low(new) =  +get(seq,1)
    set.high(new) = +get(seq,2)             
    set.step(new) = 1                               :(return)

new.int.3

*   If three arguments, low is first, high is second, step is third.

    set.low(new) =  +get(seq,1)
    set.high(new) = +get(seq,2)             
    set.step(new) = +get(seq,3)                     :(return) 

new.map
    
    new = set(table(setl4.config.size),table(setl4.config.size))
    set.kind(new) = 'map'

*   If present, _init_ is a list consisting of a list of key/value pairs,
*   with a colon (:) between the key and value.

    ident(init)                                     :s(return)
    init = init ' '

new.map.next

    init break(':') . key ':' break(' ') . val span(' ') =  :f(new.done)
    put(new.map,key,val)                            :(new.map.next)


new.seq

    set.kind(new) = 'seq'
    init break(' ') . key ' ' =                     :f(return)
    put(new,i = i + 1, key)                         :(new.seq)

new.set

*    out('new.set init',show.q(init))
    new = set(table(setl4.config.size),table(setl4.config.size))
    set.kind(new) = 'set'
    ident(init)                                     :s(return)
    init = init ' '

new.set.init

*    out('new.init',show.q(init))
*    init break(' ') . key setl4.span.whitespace =  :f(new.done)
    init ' ' =
    init break(' ') . key ' '    =                  :f(new.done)
    add(new,key)
                                                    :(new.set.init)
new.str

    set.kind(new) = 'str'
    set.index(new) = set.key(new) =                        
    str.text(new) = init                            :(return)

new.str.next

    init len(1) . key ' ' =                         :f(return)
    put(new,i = i + 1, key)                         :(new.str.next)

new.done

    set.next(new) =                                 :(return)

new.end

    define('next(set)kind,key,next,value')          :(next.end)

*   Advance iteration by setting field _next_.
*   Fail if no more elements remain.

next

    differ(set.kind(set),'int')                     :s(next.notint)

*   Here to find next element in set of type _int_.

    next = set.next(set) = set.next(set) + set.step(set)
    le(next,set.high(set))                          :f(freturn)
    set.this(set) = next
    this = next                                     :(return)

next.notint

    next = set.next(set) = set.next(set) + 1
    le(next,set.size(set))                          :f(freturn)
    next = ident(set.kind(set),'map') set.key(set)[next]
    next = ident(set.kind(set),'set') set.index(set)[next]
    set.this(set) = next                            :(return)

next.end

    define('not(expr)')                             :(not.end)

*   Returns not of boolean expression.

not

    not = integer(expr) (eq(expr) 1, '')            :s(return)f(freturn)
    not = ident(expr) 1                             :s(return)f(freturn)

not.end

    define('or(a,b)')                               :(or.end)

*   Tests if either operand is true, fails otherwise.
*   Only evaluates second operand if necessary

or
    or = integer(a) ne(a)                           :s(return)
    or = integer(b) ne(b)                           :s(return)

*   Here if operands not both integers, so use ident/differ.

    or = differ(a)                                  :s(return)
    or = differ(b)                                  :s(return)f(freturn)

or.end

    define('out(text1,text2,text3)type1,type2')     :(out.end)

*   Output a line conisting of TEXT1, TEXT2 enclosed
*   in brackets, followed by TEXT3.

out

    output = text1 (ident(text2) '', '[' text2 ']') (differ(text3) text3, '') :(return)
*    output = text1 (differ(text2) '[' (ident(text2) null ']', '') (differ(text3) text3, ''):(return)

out.end

    define('put(map,key,value)v')                   :(put.end)

*   Sets the value of the entry for key _key_ in map _map_ to be _val_,
*   creating a new entry if necessary.

put

*    value = ident(value) key
    key = integer(key) +key
    value = integer(value) +value
    v = set.key(map)[key]
    differ(v)                                       :s(put.value)

*   Here to create new entry in map, and then merge to set new value.

    out('datatype(map)',datatype(map))
    out('put size',set.size(map))
    set.size(map) = set.size(map) + 1
    set.index(map)[set.size(map)] = key

put.value

    set.key(map)[key] = entry(key,value)            :(return)

put.end

    define('range(map)elem)')                       :(range.end)

*   Return set of the values of _map_.

range

    range = new()
    loop(map)

range.next

    entry = next(map)                               :f(return)
    add(range,value(key(entry)))                    :(range.next)

range.end

    define('random(n)')                             :(random.end)

*   Return integer uniformly distributed in 1,2,...,n.
*   If n=0 returns real uniformly distributed in the interval [0,1].
*   The algorithm can be found in section 16.1 of "Algorithms in SNOBOL4,"
*   James F. Gimpel, John Wiley and Sons, 1976.

random

    setl4.random_var = remdr(setl4.random_var * 4676, 414971)
    random  = setl4.random_var / 414971.0
    random = ne(n) convert(random * n,'integer') + 1
                                                    :(return)
random.end

    define('random.seed()s,c')                      :(random.seed.end)

*   Compute seed for random number generator from date and time.

random.seed
    setl4.random_var =
    s = g.date
    s = replace(s,'/:-','   ')

*   Get all the digits in s.

random.seed.loop

    s len(1) . c =                                  :f(random.seed.done)
    ident(c,' ')                                    :s(random.seed.loop)
    setl4.random_var = setl4.random_var c           :(random.seed.loop)

random.seed.done

*   Reverse the seed so digits depending on time come first.

    setl4.random_var = +reverse(setl4.random_var    )
                                                    :(return)
random.seed.end

    define('rank(qet)ara,freq,i,entry,key,seq,str,value')    :(rank.end)

*   Rank returns a sorted version of its operand such that
*   elements are in increasing order. For example,
*           rank('asxybza') is 'aabsxyz'.
*   Sets are ranked in increasing order of their members.
*   Maps are ranked in increasing order of their keys.
*   Sequences (seq's) and int's are always maintained in rank order.

rank
 :(return)
    out('rank kind',kind(qet))
    qet = copy(qet)
    ident(kind,'int')                               :s(rank.int)
    ident(kind,'seq')                               :s(rank.int)
    qetl4kind(qet,'map','qet','str')                :s($('rank.' qetl4kind(qet)))
    ident(datatype(qet),'string')                   :s(rank.string)
    error('rank unsupported operand type ' datatype(qet) )

rank.map

    ara = sort(key,1)
    rank = new()

rank.next

    entry = ara[i = i + 1,1]                        :f(return)
    put(rank,key(entry),value(entry))               :(rank.next)

rank.seq
rank.int

*   Sequences and strings are always in rank order

                                                    :(return)

rank.qet

    ara = sort(key,1)
    rank = new()

rank.qet.next

    add(rank,ara[i = i + 1,1])                      :f(return)s(rank.next)

rank.str

    str = text(qet)

rank.str.string

    freq = str.frequency(str)
    seq = new()

rank.str.collect

    str len(1) . i =                                :f(rank.str.qet)
    add(seq,i)                                      :(rank.str.collect)

rank.str.qet

    seq = rank(seq)
    loop(seq)

rank.l.next
    
    i = next(seq)                                   :f(return)
    rank.str = rank.str dupl(i,freq[i])             :(rank.l.next)

rank.string

*    str = qet                                       :(rank.str.string)

rank.end

    define('show(v,label,lvl)i,kind,elem,ent,line,hdr,this') :(show.end)

*   Show the value of expression _v_.
*   _lev_ is non-zero when called to list elem or element
*   of a compound object.

show

    differ(label) out('show: ' str.upper(label))


    differ(datatype(v),'set')                       :s(show.notset)

    kind = set.kind(v)
    ident(kind,'int')                               :s(show.int)
    ident(kind,'map')                               :s(show.map)
    ident(kind,'seq')                               :s(show.seq)
    ident(kind,'set')                               :s(show.set)
    ident(kind,'str')                               :s(show.str)
    error('show unknown set kind',kind,' quitting.')

show.notset

            :($('show.' datatype(v)))

show.array

    proto = prototype(ara)
    proto break(',')                                :s(show.array.2)

*   Here for one dimensional array.

show.array.1
    first = ara[add1(.i)]                           :f(show.array.done)
    out(lpad(i,3) tab first)                        :(show.array.1)

show.array.2
    first = ara[add1(.i),1]                         :f(show.array.done)
    out(lpad(i,3) tab show(first) tab show(ara[i,2])) :(show.array.2)

show.entry

    show = show ' ' show(key(v))  ':' show(value(v)) ' ' :(show.done)

show.int

    show = '[int: low ' set.low(v) ' high ' set.high(v) ' step ' set.step(v)  '] ' :(show.done)

show.integer

    show = v                                        :(show.done)

show.map

*   Call _rank_ so entries listed in rank order.

*    map = rank(map)
    this = copy(v)
    set.index(this) = copy(set.index(v))
    set.key(this) = copy(set.key(v))
    loop(this)
    show = '{ map'

show.map.next

    elem = next(v)                                  :f(show.done)
    out('map.next atatype elem',datatype(elem))
*    show = show ' ' show(value(elem),,1)
    show = show ' ' show(elem,,1)
    lt(size(show),100)                          :s(show.map.next)
    output = show ' '
    show =                                          :(show.map.next)

show.map.done

    show = show ' }'
                                                    :(show.done)

show.pair

    show = '{' lineid(num(pair)) ',' "'"
.                       replace(line(pair),' ','.') "'" '}' :(show.done)

show.seq

    show = ('[seq')

show.seq.next

    gt(i = i + 1,set.size(v))                       :s(show.seq.done)
    elem = seq(v)[i]
    show = (ident(show) '', show ' ') show(elem,,1)
    lt(size(show),100)                          :s(show.seq.next)
    output = show ' '
    show =                                          :(show.seq.next)

show.seq.done

    show = show ' ]'                                :(show.done)

show.set

*   Call _rank_ so entries listed in rank order.

*    set = rank(v)
    this = copy(set)
    show = '{ set'
    loop(this)

show.set.next

    key = set.index(v)[key]                         :f(show.set.done)
    show = show ' ' show(key,,1)
    lt(set.size(this),100)                          :s(show.set.next)
    output = show
    show =                                          :(show.set.next)

show.set.done

    show = show ' }'
                                                    :(show.done)
show.str

    show = show.str(str.text(set))                  :(show.done)

show.string

*   Don't quote string that is an integer.

    show = integer(v) v                             :s(show.done)

    show = show.q(v)                                :(show.done)


show.table

    t = convert(v,'array')

show.table.next

    key = t[i = i + 1,1]                            :f(show.done)
    value = t[i,2]

    output = tab show(key)    ' -> ' show(value)
                                                    :(show.table.next)
show.string.quote

    show = '"'  v '"'                               :(show.done)

show.done

    output = eq(lvl) show
                                                    :(return)

show.end
    
    define('show.b(e)')                             :(show.b.end)

*   Show value of _e_ as boolean: TRUE or FALSE

show.b

    integer(e) out((ne(e) 'TRUE', 'FALSE'))         :s(return)
    out((differ(e) 'TRUE', 'FALSE'))                :(return)

show.b.end

    define('show.eval(expr)e')                      :(show.eval.end)

*   Show result of evaulating _expr_ as success or fail.

show.eval

    out('show.eval',expr)
    eval(expr)                                      :s(show.eval.success)
    show.eval = 'failure'                           :(show.eval.finis)

show.eval.success
   
    show.eval = 'success'

show.eval.finis

    out('show.eval of |' expr '| was ' show.eval ', result |' e '|') :(return)

show.eval.end

    define('show.line(line)')                       :(show.line.end)

*   Show a line with spaces replaced by '.'

show.line

    show.line = replace(line,' ','.')               :(return)

show.line.end

    define('show.lines(lines,title)i,line,titled')  :(show.lines.end)

*   Show the lines that are not empty in an array of lines

show.lines

    title  = 'lines' (differ(title) ' ' title, '')
    out(itle)

show.lines.n

    line = lines[add1(.i)]                          :f(return)
    empty(line)                                     :s(show.lines.n)
    differ(titled)                                  :s(show.lines.titled)

*   Do not list header unless at least one non-empty line

    out('    123456789012345')
    titled = 1

show.lines.titled

    out(lpad(lineid(i),2) ' ' replace(line,' ','.')) :(show.lines.n)

show.lines.end

    define('show.q(str)')                           :(show.q.end)

*   Show string _str_ enclosed in quotes

show.q

    str break("'")                                  :s(show.q.double)

    show.str = "'" str "'"                          :(return)

show.q.double

    show.q = '"' str '"'                            :(return)

show.q.end

    define('show.words(words)i,pos')                :(show.words.end)

*   Show results of words() call.

show.words

    pos = words[add1(.i),1]                         :f(return)
    out('words ' lpad(pos,2) ' ' words[i,2])        :(show.words)

show.words.end

    define('subset(a,b)member')                     :(subset.end)

*   Tests if the second set is a subset of the first.

subset

    gt(set.size(b),set.size(a))                     :s(freturn)
    loop(b)

subset.next

    member = next(b)                                :f(return)
    member(a,member)                                :s(subset.next)f(freturn)

subset.end

    define('this(set)')                             :(this.end)

*   Returns value found in most recent call to next.

this

    this = set.this(set)                            :(return)

this.end

    define('true(e)')                               :(true.end)

*   Tests if operand is true

true

    e = integer(e) +e
    integer(e) ne(e)                                :s(return)
    differ(e)                                       :s(return)f(freturn)

true.end

    define('union(a,b)elem')                        :(union.end)

*   Returns union of sets _a_ and _b_.

union

*   Arrange so set a is the larger 

    ge(set.size(a),set.size(b))                     :s(union.a)
    union = a
    a = b
    b = union

union.a

*   Make copy of a by making copy of a's table.

    union = copy(a)
    loop(b)

union.b

    elem = next(b)                                  :f(return)
    add(union,elem)                                 :(union.b)

union.end

    define('visit(set,expr)')                       :(visit.end)

*   _Visit_ loops over _set and calls _eval_ with argument
*   _expr_  for each of its members.

visit

    loop(set)

visit.next

    this = next(set)                                :f(return)
    eval(expr)                                      :(visit.next)

visit.end

    define('words(str)i,tmp,w')                     :(words.end)

*   Return sequence consisting of the words in _str_, where the 
*   words are separated by one or more consecutive spaces and tabs.

words

    words = new()
    
words.next

    str setl4.break.whitespace . w setl4.span.whitespace  = :f(return)
    put(words,i = i + 1, w)                         :(words.next)

words.end

    define('setl4.show(set,label)')                 :(setl4.show.end)

*   Show the fields of an instance of _set_.

setl4.show

                           out('{')
                           out('kind',              set.kind(set))
    differ(label)          out('show: '             str.upper(label))
    ne(set.size(set))      out('#set',              set.size(set))
    differ(set.index(set))     out('#index(set)',   set.size(index(set)))
    differ(set.key(set))       out('#key(set))',    set.size(key(set)))
    differ(set.next(set))      out('next',          set.next(set))
    ne(set.low(set))           out('low',           set.low(set))
    ne(set.high(set))          out('high',          set.high(set))
    ne(set.step(set))          out('step',          set.step(set))
    differ(set.text(set))      out('text',          set.text(set))
                           out('}')

                                                    :(return)
setl4.show.end

    define('setl4.set.size(set)')                   :(setl4.size.end)

*   Return size of operand.

setl4.size

    setl4.size = ident(datatype(set),'string') size(set)    :s(return)
    setl4.size = differ(set.step(set)) (set.high(set) - set.low(set) / set.step(set)) + 1 :s(return)
    setl4.size = set.size(set)                      :(return)

setl4.size.end

    define('traceoff()')                            :(traceoff.end)

*   Initiate tracing.

traceoff
    &ftrace = &trace =

    g.scoring = g.tracing = 0
    out('stop TRACING ')

traceoff.end

    define('traceon()')                             :(traceon.end)

*   Initiate tracing.

traceon

    out('start TRACING')
*   &ftrace = &trace = 1500000
    g.scoring = g.tracing = 1
                                                    :(return)
traceon.end

*   SETL4 uses some of the undefined SPITBOL operators for SETL4 functions.

*   Characters available for use by 'opsyn' to associate the character
*   with a function.

*   binary  &  @  #  %  ~
*   unary:  !  %  /  #  =  | /

*   define('setl4.op(ch,proc,n)')                   :(setl4.op.end)
*
**  Use _opsyn_ to define SETL4 operator.
*
*setl4.op
*
*   opsyn(ch,proc,n)                                :s(return)
*   error('fatal problem with opsyn for ' ch ')
*
*setl4.op.end

*   SETL4 binary operators

    opsyn('&','and',        2)
    opsyn('@','at',         2)
    opsyn('#','filter',     2)
    opsyn('~','member',     2)
*   opsyn('^','or',        2)

*   SETL4 unary operators:

    opsyn('=','this',       1)
    opsyn('|','new',        1)
    opsyn('!','not',        1)
    opsyn('#','setl4.size', 1)
    opsyn('/','split',      1)

*   Here endeth the SETL4 code.
*   May you fare well using it.
