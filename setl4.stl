*   Copyright 2017, David Shields
*   Licensed under the MIT license.

*TODO - need separate out iterator from set data structure. May have multiple loops over same set at onece.
*TODO - need equal for general equality test on sets, maps, etc.

*   SETL4 is an implementation of SETL written in SPITBOL.


*   What is SPITBOL?
*   ----------------

*   SNOBOL is a general programming language with special emphasis on 
*   processing strings and text. *   It was  developed at Bell Labs 
*   in the 1960's by a team led by Ralph Griswold.
*   Their final version was called SNOBOL4.

*   Macro SPITBOL, or SPITBOL, is a very efficient implemenation of SNOBOL4.
*   Created by Robert B. K. Dewar and Ken Belcher in 1969, SPITBOL/360 
*   was written in IBM/360 assembly language, in what Dewar called
*   "aggressive assembly."
*
*   For example, SNOBOL4 requires maintaining a count of the number of 
*   statements executed and the ability to stop execution when a specified 
*   number of statements have been executed.  SPITBOL/360 does this by
*   computing an unnormalized floating point constant such that successive 
*   increments result in floating point overflow when the limit is reached.

*   Dewar and Belcher also wrote Realia COBOL, a COBOL compiler for Intel/x86 
*   written in COBOL. It produced very efficient code, better
*   code than, for example, that produced by IBM's product COBOL compiler.

*   Dewar ported SPITBOL/360 to several machines. Around 1973, while working
*   with Anthony P. (Tony) McCann of Leeds University, he developed
*   Minimal, a portable assembly language. Dewar and McCann then rewrote
*   SPITBOL in Minimal, producing Macro SPITBOL, or SPITBOL. 
*   The implementation has proved very stable, with few changes in
*   several decades.

*   Macro SPITBOL is remarkably small. The code consists of about 28,000
*   lines: 2000 lines of comments defining Minimal, 5000 lines of constant/data 
*   declarations, and 21,000 lines of code.  Every line has a comment.
*   The executable for x86 Linux is 144 kilobytes.

*   SPITBOL was implemented for many machines and operating systems by
*   a small team that included Steve Duff, Mark Emmer, Bob Goldberg, and Dave Shields:
*   ICL 1900, Univac, CDC 6600, IBM PC, Apple Macintosh, SUN Solaris Sparc, 
*   Microsoft (DOS/NT/Windows), Intel x86_64 (Unix/Linux), and x86_64 Apple iOS.  


*   What is SETL?
*   -------------

*   SETL is  a programming language with  finite sets as the fundamental data type.
*   It was created by Jacob T. "Jack" Schwartz of the Courant Institute of 
*   Mathematical Sciences (CIMS) of New York University (NYU).

*   Jack founded the SETL project in 1970. It was later funded by two 
*   five-year grants from the Office of Naval Research.

*   SETL was used to write NYU Ada/Ed, the first validated Ada compiler.
*   Devloped on the DEC Vax 11/780, Ada/Ed was ported to the IBM PC (DOS)
*   by a team led by Dave Shields.


*   Why the name SETL4?
*   -------------------

*   The SETL Project produced three implementations of SETL. The first was
*   written by Dave Shields, the second by Henry S. (Hank) Warren while on 
*   leave from IBM, and the third by Robert B. K. Dewar and Art Grand.

*   SETL4 is the fourth implementation of SETL produced by a member 
*   (Dave Shields) of the NYU SETL project, hence the name SETL4.


*   Brief Introduction to SETL4
*   ---------------------------

*   SETL4 extends SPITBOL by adding the datatype _set_ to represent
*   finite sets. 

*   SETL4 supports a variety of sets. Each has a kind, one of:

*       _int_   _map_   _seq_   _set_   _str_

*   For each kind, SETL4 provides set-theoretic functions, 
*   as well as other functions that have proven to be useful.

*   For example, the folowing SETL4 expression determines if the integer _P_ is prime:

*           !exists(|'int 2 P' @ 'multiple(P,this)')

*   where _multiple(a,b) is true if and only if _a_ is a multiple of _b_.

*   Additonal SETL4 data types
*   --------------------------

*   SETL4 provides the following data types in addtion to _set_: 

*       _entry_   _line_   _pair_    _token_

*   where 

*       entry(key,value)            is an entry in a map;
*       line(mark,text)             is a line of text and an associated mark (tag); and
*       token(lineno,ndx,type,text) is a lexeme, or lexical token.

*   Int: Set of kind 'int'
*   ----------------------'

*   A set of kind _int_ represents a sequence of positive integers.
*   The set cannot be changed once it is created. You can only loop 
*   over a set of kind _int_ or test for membership.


*   Map: Set of kind 'map'
*   ----------------------
*   A map is a set of ordered pairs.


*   Seq: Set of kind 'seq'
*   ---------------------

*   A sequence (_seq_) is a map on the positive integers 1 .. n
*   Sequences are implemented using SPITBOL arrays, and so are very efficient.


*   Set: Set of kind 'set'
*   ----------------------

*   A set is a collection of distinct elements.


*   Str: Set of kind 'str'
*   ----------------------

*   A string sequence (_str_) is a sequence of characters.


*   Show
*   ----

*   The function _show_ writes out the value of a SETL4 object in a readable 
*   form. Objects are shown in the order defined by the function _rank_.


*   SETL4 Binary Operators:
*   -----------------------

*   '&'     a & b   And             True if and only if both _a_ and _b_ are true
*   '@'     s @ e   Eval            Evaluates _e_ at current element of set _s_
*   '#'     s # e   Filter          Returns subset of set _s_ for which _e_ is true
*   '~'     m ~ s   Membership      Tests if _m_ is member of set _s_
*   '^'     a ^ b   Or              True if and only if _a_ or _b_ is true


*   SETL4 Unary Operators:
*   ----------------------

*   '='     =s      Iteration       Returns the current element of an iteration
*   '|'     |'str'  Constructor     Returns set specified by string _str_
*   '!'     !expr   Not             True if and only if _expr_ is false
*   '#'     #s      Size            Number of elements in set _s_
*   '/'     /s      Split           Splits a string into a sequence of words


*   Global variables
*   ----------------

    setl4.ascii.name = 
    setl4.ascii.value =  
    setl4.random_var =


*   Boolean Logic
*   -------------

*   Boolean logic is an algebra with just two values: true and false.
kkkk
*   In SPITBOL, the algebra is defined on strings: the null string is "false" 
*   and all other strings are "true".  The SPITBOL function IDENT is used 
*   to test for true, DIFFER for false. 
*   Each signals their result by success (true) or failure (false).

*   In SETL4, the algebra is defined both on integers and non-integers.  
*   For integers, zero is "false" and all other integers are "true." 
*   For non-integers, the null string ('') is true, and all other values are false.

*   SPITBOL comparison functions report their results by success or failure, so SETL
*   provides the following functions which return TRUE or FALSE.



*   SETL4 Functions
*   ---------------
*
*   add(set,elem)               Adds element _elem_ to set _set_ if not yet a member of the 
*   and(a,b)                        And: true if and only if _a_ and _b_ are true
*   arb(n)                          Returns arbitary (randomly chosen) integer in 1 .. _n_
*   arb(set)                        Returns arbitary (randomly chosen) element of _set_
*   assert(expr)                    Tests that _expr_ is true, ends execution otherwise
*   assert.type(obj,type)           Tests that _obj_ has SPITBOL datatype _type_, ends execution otherwise
*   at(set,expr)                    Evaluates _expr_ for for current iterate of _set_
*   binary.search(tbl,value)        Binary search
*   concatenate(a,b)                Concatenates strings _a_ and _b_
*   defined(map,key)            Tests if map _map_ if defined for _key_
*   difference(a,b)             Returns set of members of set _a_ not in the set _b_
*   domain(map)                 Returns set of elements in the domain of _map_
*   exists(set,expr)                Tests if _expr_ is true for at least one element in set _set_
*   get(map,key)                Gets the value of map _map_ for _key_
*   false(e)                        Returns TRUE if and only if _e_ is FALSE
*   forall(set,expr)                Tests if _expr_ is true for at all elements in set _set_
*   filter(set,expr)                Filter:; returns subset of _set_ for which _expr_ is true
*   iskind(kind,kind1,kind2,kind3,kind3,kind4)  Tests if _kind_ is one of the specfied kinds: _kind1_, _kind2_, ...
*   i.eq(a,b)                       integer is equal to 
*   i.ge(a,b)                       integer greater than or equal
*   i.gt(a,b)                       integer greater than 
*   i.le(a,b)                       integer less than or equal
*   i.lt(a,b)                       integer less than 
*   i.ne(a,b)                       integer not equal
*   loop(set)                       Set up iteration over _set_ using _next_
*   last(map)                   Returns the last element in a 
*   put(map,key,val)            Sets the value of map _map_ for key _key_ to be _value_
*   range(map)                  Returns set of elements in the range of _map_
*   mark(line)                      Annotates, or marks, a line
*   member(elem,set)                Tests if _elem_ is a member of set _set_
*   new(str)                        Returns new set specified by _st_
*   next(set)                       Returns next element in iteration defined by prevous _loop_,
*                                   fails if no more elements
*   not(expr)                       Not: true if and only if _expr_ is false
*   or(a,b)                         Or: true if and only if _a_ of _b_ is true
*   random(n)                       Returns random element
*   random.seed()                   Sets random number seed to initialize _random_
*   rank(set)                       Returns the rank, or normal form, of a set or string.
*   from(set,elem)              Returns set consisting of members of _set_ except for_elem_
*   integers(n)                 Returns set of integers 1 ... n
*   intersection(a,b)           Returns set of members which belong to both sets _a_ and _b_
*   subset(a,b)                 Tests if every member of _b_ is also a member of _a_
*   union(a,b)                  Returns set consisting of all the members of _a_ and _b_
*   setl4.ascii.init(init)
*   setl4.size(set)                 Returns number of elements in set _set_
*   traceoff()                Turns off tracing
*   show(v,lvl)                     Show value of _v_, with _lvl_ set non-zero when listing member of set
*   show.b(e)                       Show value of _b_ as boolean (TRUE or FALSE)
*   show.line(line)                 Show string _line_ with spaces replaced by '.'
*   show.lines(lines,title)         Show non-empty lines in array of lines, with title 'title'
*   show.q(str)                     Show string with enclosed in appropriate quote character (" or ') 
*   show.words(words)               Show a sequence of words, separated by space character
*   traceon()                 Turns on tracing
*   this(set)                       Returns current iteration value for _set_
*   true(e)                         Returns TRUE if and only if _e_ is TRUE
*   visit(set,expr)                 Visits each element of set _set_ and evaluates _expr_ for that element


*   Set Data Type
*   -------------

*   A set is defined by the following datatype:

    data('set(kind,index,key,size,next,low,high,step,text,seq,this)')

*   where

*           _kind_          the kind of _set_: 'int', 'map', 'seq', 'set', or 'str'.

*           _index_         a SPITBOL table used to map the integer
*                           id assigned each element to the value of the element.
*                           It is used to support fast iteration.

*           _high_          upper bound of _int_ 

*           _low_           lower bound of _int_ 

*           _key_           a SPITBOL table mapping set elements to index entries.

*           _next           is iteration index when iterating over set
*                           when iterating over a 
*           _seq_           is the array used to maintain a sequence.

*           _size_          the current number of members.

*           _step_          number of values between members of set of kind _int_.

*           _text_          is the text of the set of kind _str_

*           _this           the last value returned by the _next_ primitive


*   Note that the null value is not allowed as an element of a set or the
*   value of a map key, but can be used as the value of an element in a seq.

*   The _key_ table is needed to provide constant time bounds for iterating over
    define('integers(n)i')                      :(integers.end)

*   Return set containing integers 1 .. _n_

integers

    integers = new(n)
    i = 0

integers.next

    gt(i = i + 1,n)                                 :s(return)
    add(integers,i)                         :(integerl.next)

integers.end

    define('intersection(a,b)elem')             :(intersection.end)

*   Returns intersection of sets _a_ and _b_.

intersection

*   Make _a_ the smaller 

    le(size(a),size(b))                     :s(intersection.next)
    intersection = a
    a = b
    b = intersection
    intersectino = new('set')
    loop(a)

intersection.next

    next(a)                                         :f(return)
    member(=a,b)                                :f(intersection.next)
    add(intersection,=a)                    :(intersection.next)

intersection.end

    define('put(map,key,value)v')               :(put.end)

*   Sets the value of the entry for key _key_ in map _map_ to be _val_,
*   creating a new entry if necessary.
*   _value_ is null to add an entry to a 

put

    value = ident(value) key
    key = integer(key) +key
    value = integer(value) +value
    v = key(map)[key]
    differ(v)                                       :s(put.value)

*   Here to create new entry in map, and then merge to set new value.

    size(map) = size(map) + 1
    key(map)[key] = entry(key,value)

put.value

    key(map)[key] = entry(key,value)            :(return)

put.end

    define('range(map)elem)')                       :(range.end)

*   Return set of the keys in _map_.

range

    range = new()
    loop(map)

range.next

    entry = next(map)
    ident(value(entry))                             :s(range.next)
    add(range,value(key(next(map))))                :s(range.next)f(return)

range.end

    define('subset(a,b)member')                 :(subend)

*   Tests if _b_ is a subset of _a_.

subset

    subset = FALSE
    gt(size(b),size(a))                     :s(return)
    loop(b)

subnext

    member = next(b)                            :f(subtrue)
    member(member,a)                                :s(subnext)f(return)

subtrue

    subset = true                               :(return)

subend

    define('union(a,b)elem')                    :(union.end)

*   Returns union of sets _a_ and _b_.

union

*   Arrange so set a is the larger 

    ge(size(a),size(b))                     :s(union.a)
    union = a
    a = b
    b = union

union.a

*   Make copy of a by making copy of a's table.

    union = copy(a)
    loop(b)

union.b

    elem = next(b)                              :f(return)
    add(union,elem)                         :(union.b)

union.end

*   a set, in all of its forms.

*   Since the _key_ table is needed, a set can be indexed using the key table.
*   This allows the definition of 'get' and 'put' on sequences.

*   Sequences are currently implemented using SPITBOL arrays, extending
*   the array length dynamically as needed.

*   New elements can be added to a sequence using the 'push' primitive,
*   and the most recent element can be deleted using the 'pop' primitive.


*   SETL4 Configuration Options
*   ---------------------------

*   Initial size of any hash tables created when constructing
*   a new instance of a 

*   Use large value for now, to avoid need for expansion during initial testing.
*    setl4.config.size = 16
    setl4.config.size = 120

*   SETL4 Constants
*   ---------------

*   The values of the following variables should NEVER be changed, lest chaos ensue.

    FALSE = 0
    TRUE = 1

*   SETL4 Global Variables
*   ----------------------

    setl4.ascii.initialized = false
    setl4.break.whitespace = break(' ' char(9))
    setl4.span.whitespace =  span(' ' char(9))


*   SETL4 Function Definitions
*   --------------------------

    define('add(set,elem)')                     :(add.end)

*   Add _elem_ to set _set_ if not already present.
*   A set is represented as a map from the elements to themselves,
*   the identity 

add

    put(set,elem,elem)                          :(return)

add.end

    define('defined(map,key)entry')             :(defined.end)

*   Tests if the map _map_ has an entry for _key_.

defined

    entry = key(map)
    differ(entry)                               :s(return)f(freturn)

defined.end

    define('difference(a,b)elem')               :(difference.end)

*   Returns set defined by set of elements of _a_ that are not in _b_.

difference

    difference = a @ !'member(=a,b)'       :(return)

difference.end

    define('from(set,elem)this')                    :(from.end)

*   Return set consisting of all the elements of _a_ except _elem_.

from

    from = copy(set)
    loop(set)

from.next

    this = next(set)                               :f(return)
    ident(this,elem)                               :s(from.next)
    add(from,this)                         :(from.next)

from.end

    define('domain(map)elem)')                 :(domain.end)

*   Return set of the keys in _map_.

domain

    domain = new()
    loop(map)

domain.next

    entry = next(map)
    ident(value(entry))                         :s(domain.next)
    add(domain,key(key(next(map))))             :s(domain.next)f(return)

domain.end

    define('get(map,key)val)id')                :(get.end)

*   Gets the value of the key _key_ in the map _map_.

get

    id = key(map)[key]
    ident(id)                                       :s(return)
    get = value(index(map)[id])             :(return)

get.end

    define('and(a,b)')                              :(and.end)

*   Returns true iff (if and only if) both arguments are true.
*   Only evaluates _b_ if necessary

and

*   See if both operands are integers.

    and = FALSE
    and = integer(a) eq(a)                          :s(return)
    and = integer(a) integer(b) (ne(+a * +b) TRUE, FALSE)    :s(return)

*   Here where at least one operand for 'and' is not integer, so
*   use ident/differ to evaluate.

    and = differ(a) differ(b) true                  :s(return)
    and = FALSE                                     :(return)

and.end

    define('arb(set)kind,n,r')                           :(arb.end)

*   Returns arb (randomly selected) element of _set_.

arb

    kind = kind(set)
    arb = integer(set) random(+set)           :s(return)
    r = random(size(set))
    arb = (
.       iskind(kind,'int')         low(set) + (r - 1) * step(set),
.       iskind(kind,'map','set')   index(set)[r],
.       iskind(kind,'seq')         seq(set)[r],
.       iskind(kind,'str')         substr(text(set),r,1),
.       ident(datatype(set),'string') substr(set,r,1))
                                                    :(return)
arb.end

    define('assert(expr)')                          :(assert.end)

*   Verify that _expr_ is TRUE, end execution otherwise.

assert

    true(expr)                                      :s(return)
    error('assertion failed, quitting') 

assert.end

    define('assert.type(obj,typ)')                  :(assert.type.end)

*   Verify that _obj_ has datatype _typ_, end execution if not.

assert.type

    assert(ident(datatype(obj),typ))                :s(return)
    error('assertion on datatype failed ' typ )
    

assert.type.end

    define('at(set,expr)this')             :(at.end)

*   Evaluate _expr_ 

at

    this = next(set)
    at = eval(expr)                         :(return)

at.end

    define('concatenate(a,b)')              :(concatenate.end)

*   Concatenate argument strings.

concatenate

    concatenate = a b :(return)

concatenate.end

    define('error(str)')                            :(error.end)

*   Report cause of error and quit execution

error

    &dump = 2
    output = 'Fatal error: ' str                    :(end)

error.end

    define('exists(set,expr)this,e')                     :(exists.end)

*   Tests if there is an element in _set such that _eval(expr)_ is TRUE.

exists

    str.out('exists EXPR',show.q(expr))
    loop(set)

exists.loop

    this = next(set)                                       :f(exists.fail)
    str.out('exists.loop this',this)
    e = eval(expr)                                  :f(exists.loop)
    str.out('exists E',e)
    integer(e) eq(+e)                               :s(exists.loop)
    ident(e) 				                        :s(exists.loop)
    exists = TRUE                                   :(return)

exists.fail

    exists = FALSE                                  :(return)

exists.end

    define('false(e)')                              :(false.end)

*   Returns TRUE if its argument is false, or else FALSE.

false

    e = integer(e) +e
    false = integer(e) (eq(e) TRUE,FALSE)           :s(return)
    false = (ident(e) TRUE, FALSE)                  :(return)

false.end

    define('filter(set,expr)e,this')           :(filter.end)

*   According to Paul Halmos, in his book "Naive Set Theory,"
*   a major principle of set theory, often referred to by its
*   German name _Aussonderungsaxiom_, is the Axiom of Specification:

*   To every set _A_ and every condition _S(x)_ there corresponds
*   a set _B_ whose elements are exactly those elements _x_ of _A_
*   for which _S(x)_ holds.

*   In SETL4 we say that the expression '_A_ @ _S_' "filters"
*   _A_ by _S_. This can also be read as
*           "the subset of _A_ such that _S_ is true"

*   Returns the subset of set or map _set_ for which _expr_ is true.

filter

    setl.filter = new(kind(set))

    loop(set)

filter.loop

    this = next(set)                                :f(return)
    e = eval(expr)                                  :f(filter.loop)
    false(e)                                        :s(4.filter.loop)
    iskind(kind(set),'set') setl4.add(filter,this)        :(filter.loop)
    put(filter,key(this),value(this))           :(filter.loop)

filter.end

    define('forall(set,expr)e')                     :(forall.end)

*   Tests if _expr_ is true for all elements of _set_.

forall

    loop(set)

forall.loop

    next(set)                                       :f(forall.true)
*    str.out('forall.loop.next',next(set))
    e = eval(expr)                                  :f(forall.loop)
*    str.out('forall.loop',e)
    integer(e) eq(+e)                               :s(forall.false)
    ident(e)                                        :s(forall.false)
    						    :(forall.loop)

forall.false

    forall = FALSE                                   :(return)

forall.true

    forall = TRUE				     :(return)

forall.end

    define('iskind(kind,kind1,kind2,kind3,kind4,kind5)') :(iskind.end)

*   Tests if the kind of _set_ is one of kind1, kind2, .... Returns true if so,
*   false otherwise.

iskind

    differ(kind1) ident(kind,kind1)                :s(return)
    differ(kind2) ident(kind,kind2)                :s(return)
    differ(kind3) ident(kind,kind3)                :s(return)
    differ(kind4) ident(kind,kind4)                :s(return)
    differ(kind5) ident(kind,kind5)                :s(return)
                                                   :(freturn)

iskind.end

    define('loop(set)dt')                           :(loop.end)

*   Set up for loop. Set next field so that on first call to _next()_
*   the index will be advanced to the first element in the 

loop

    next(set) = (iskind(set,'int') low(set) - step(set),0) :(return)

loop.end

*   Maps
*   --------------

*   In mathematics, a map, or function, defined on a finite set is a set of 
*   ordered pairs that define a relation between the first element of a pair, 
*   its _key_, and the second element of the pair, the value of the map for _key_.


*   where _key_ is the key, and _value_ is the value of the map for _key_.

*   The SPITBOL datatype TABLE provides the machinery to implement maps.
*   SPITBOL provides no way to determine the number of entries in a table
*   other than converting the map to an array. This is the only way in 
*   SPITBOL to iterate over a SPITBOL table.

*   For this reason, maps are implemented using two tables: _index_ and _key_.
*   Each new entry added to a map is given an integer id, starting with one.  
*   The field _index_ maps the id's to the associated pairs.
*   The entries in _index_ allow efficient iteration over the  
*
*   The table _key_ maps keys in the map to the corresponding id in _index_,
*   from which the entry for the key can be found. The entries in _key_
*   permit efficient retrieval of the map's value for a given key.


    define('member(set,elem)kind,entry,i,key,this,value)') :(member.end)

*   Tests if _elem_ is 'elem' of _set, where:

*   _elem_ is element of 'int' if in range, and

*   _elem_ is element of 'int' if in range, and
*   meets requirement if 'step' in nonzero

*   _elem_ is element of map _set if _map_ has entry _elem_.

*   _elem_ is element of sequence _set if _set has entry _elem)

*   _elem_ is element of set _set if _in(elem,set)_ is true.

*   _elem_ is element of string _set if _set contains instance of _elem.

member

    differ(datatype(set),'set') str.out('member',set)
    member = FALSE
    kind = kind(set)
    iskind(kind,'int')                              :s(member.int)
    iskind(kind,'map')                              :s(member.map)
    iskind(kind,'seq')                              :s(member.seq)
    iskind(kind,'set')                              :s(member.set)
    iskind(kind,'str')                              :s(member.str)
    iskind(kind,'string')                           :s(member.string)
    iskind(kind,'map')                              :s(member.map)
    error('member wrong kind ' kind ' , quitting')

member.int

    member = lt(elem,low(set)) FALSE              :s(return)
    member = gt(elem,low(set)) FALSE              :s(return)
    member = (eq(remdr(elem - low(set),step(set))) TRUE, FALSE):(return)

member.map

    key = key(elem)

*   Cannot be member if no entry in _key_ table.

    ident(key(set)[key])                        :s(return)

*   There is entry for _key_, see if it has right value.

    equal(index[key(set)[key]],value)       :f(return)s(member.true)

member.seq

    i = i + 1
    le(i,size(set))                             :f(return)
    this = seq(set)[i]                          :f(return)
*    equal(this,elem)                                :s(member.true)f(member.seq) 
    ident(this,elem)                                :s(member.true)f(member.seq) 

member.set

    member = (differ(key(set)[elem]) TRUE, FALSE) :(return)

member.str

    set break(elem)                                 :f(return)s(member.true)

member.string

    string break(elem)                              :f(return)s(member.true)

member.true

    member = TRUE                                   :(return)

member.end


    define('new(str)init,kind,i,len,n,key,seq,val)')   :(new.end)

*   Construct new set with initial values determined by string _init_.

new
    init = str
    kind = substr(init,1,3)
    ne(size(kind),3) error('new missing kind specification')
    iskind(kind,'int','map','seq','set','str')         :s(new.init)
    error('bad kind to new ' kind )

new.init

*   Strip leading spaces from remaining part of _init_.

    init = substr(init,4)
    init span(' ') =

*   Branch on set kind to finish initialization.

                                                    :($('new.' kind))
new.int

    new = set('int')
    index(new) = key(new) =                        
    ident(init) error('new initialization information needed')
    step(new) = 1
    seq = str.words(init)

*   Ignore extra arguments to int constructor.

    size(seq) = gt(size(seq),3) 3
    eq(size(seq),1)                             :s(new.int.1)
    eq(size(seq),2)                             :s(new.int.2)
    eq(size(seq),3)                             :s(new.int.3)

new.int.1

*   If one argument, low is one, high is the argument.

    low(new) =  1
    high(new) = seq.get(seq,1)            
    step(set) = 1
                                                    :(new.int.done)

new.int.2

*   If two arguments, low is low, high is second.

    low(new) =  +seq.get(seq,1)
    high(new) = +seq.get(seq,2)             
    step(set) = 1
                                                    :(new.int.done)

new.int.3

*   If three arguments, low is first, high is second, step is third.

    low(new) =  +seq.get(seq,1)
    high(new) = +seq.get(seq,2)             
    step(new) = +seq.get(seq,3)            
                                                    :(new.int.done)

new.int.done

*   Set _next_ so that  incrmenting it on first call to _next_  
*   will point to first element in set

    next(new) = low(new) - step(new) 
                                                    :(return)
new.map
    
    new = set('map',table(setl4.config.size),table(setl4.config.size))

*   If present, _init_ is a list consisting of a list of key/value pairs,
*   with a colon (:) between the key and value.

    ident(init)                                     :s(return)
    init = init ' '

new.next

    init break(':') . key ':' break(' ') . val span(' ') =  :f(return)
    put(new.map,key,val)                  :(new.next)

new.seq

    new = set('seq')
    seq(new) = array(setl4.config.size)
    str.out('new seq')
    show(new)
                                                    :(return)
new.set

    str.out('new.set init',show.q(init))
    new = set('set',table(setl4.config.size),table(setl4.config.size))
    ident(init)                                     :s(return)
    init = init ' '

new.init

    str.out('new.init',show.q(init))
*    init break(' ') . key setl4.span.whitespace =   :f(return)
    init ' ' =
    init break(' ') . key ' '    =   :f(return)
    str.out('new.init key',key)
    add(new,key)
    show(new)
                                                    :(new.init)

new.str

    new = set('seq')
    str.text(new) = init                            :(return)

new.str.init

    init len(1) . key ' ' =                         :f(return)
    seq.push(new,key)                               :(new.str.init)

new.end

    define('next(set)kind,key,next,value')          :(next.end)

*   Advance iteration by setting field _next_.
*   Fail if no more elements remain.


next

    differ(kind = kind(set),'int')              :s(next.notint)

*   Here to find next element in set of type _int_.

    next = next(set) = next(set) + step(set)
    le(next,high(set))                          :f(freturn)

next.notint

    next = next(set) = next(set) + 1
    le(next,size(set))                          :f(freturn)
    this(set) = 
.       (
.       iskind(kind,'int')          next,
.       iskind(kind,'map','set')    index(set)[next],
.       iskind(kind,'seq')          seq(set)[next],
.       iskind(kind,'str')          substr(text(set),next,1)
.       ident(datatype(set),'string')   substr(set,next,1)
.       )
        next = this(set)
    str.out('next',next)
    str.out('this',this)
                                                    :(return)

next.end

    define('not(expr)')                             :(not.end)

*   Returns not of boolean expression.

not

    not = integer(expr) (ne(expr) FALSE, TRUE)      :s(return)
    not = (differ(expr) FALSE, TRUE)                :(return)

not.end

    define('or(a,b)')                               :(or.end)

*   Returns true iff (if and only if) _a_ or _b_ is true.
*   Only evaluates _b_ if necessary

or
    or = integer(a) ne(a) TRUE                      :s(return)
    or = integer(b) ne(b) TRUE                      :s(return)

*   Here if operands not both integers, so use ident/differ.

    or = (differ(a) TRUE, differ(b) TRUE, FALSE)    :(return)

or.end

    define('random(n)')                             :(random.end)

*   Return integer uniformly distributed in 1,2,...,n.
*   If n=0 returns real uniformly distributed in the interval [0,1].
*   The algorithm can be found in section 16.1 of "Algorithms in SNOBOL4,"
*   James F. Gimpel, John Wiley and Sons, 1976.

random

    setl4.random_var = remdr(setl4.random_var * 4676, 414971)
    random  = setl4.random_var / 414971.0
    random = ne(n) convert(random * n,'integer') + 1
                                                    :(return)
random.end

    define('random.seed()s,c')                      :(random.seed.end)

*   Compute seed for random number generator from date and time.

random.seed
    setl4.random_var =
    s = g.date
    s = replace(s,'/:-','   ')

*   Get all the digits in s.

random.seed.loop

    s len(1) . c =                                  :f(random.seed.done)
    ident(c,' ')                                    :s(random.seed.loop)
    setl4.random_var = setl4.random_var c           :(random.seed.loop)

random.seed.done

*   Reverse the seed so digits depending on time come first.

    setl4.random_var = +reverse(setl4.random_var    )
                                                    :(return)
random.seed.end

    define('rank(set)ara,freq,i,entry,key,seq,str,value')    :(rank.end)

*   Rank returns a sorted version of its operand such that
*   elements are in increasing order. For example,
*           rank('asxybza') is 'aabsxyz'.
*   Sets are ranked in increasing order of their members.
*   Maps are ranked in increasing order of their keys.
*   Sequences (seq's) and int's are always maintained in rank order.

rank
 :(return)
    str.out('rank kind',kind(set))
    set = copy(set)
    iskind(set,'int','seq')                         :s(rank.seq)
    setl4kind(set,'map','set','str')                :s($('rank.' setl4kind(set)))
    ident(datatype(set),'string')                   :s(rank.string)
    error('rank unsupported operand type ' datatype(set) )

rank.map

    ara = sort(key,1)
    rank = new()

rank.next

    entry = ara[i = i + 1,1]                        :f(return)
    put(rank,key(entry),value(entry))           :(rank.next)

rank.seq
rank.int

*   Sequences and strings are always in rank order

                                                    :(return)

rank.set

    ara = sort(key,1)
    rank = new()

rank.next

    add(rank,ara[i = i + 1,1])                  :f(return)s(rank.next)

rank.str

    str = text(set)

rank.str.string

    freq = str.frequency(str)
    seq = new()

rank.str.collect

    str len(1) . i =                                :f(rank.str.set)
    add(seq,i)                                  :(rank.str.collect)

rank.str.set

    seq = rank(seq)
    loop(seq)

rank.l.next
    
    i = next(seq)                                   :f(return)
    rank.str = rank.str dupl(i,freq[i])             :(rank.l.next)

rank.string

    str = set                                       :(rank.str.string)

rank.end

*   Sequences:
*   ----------

*   A sequence, or 'seq', is a map defined on the positive integers
*   1,2, ... ,n. Sequences are implemented using SPITBOL arrays,
*   which are grown in size when adding a new element for which
*   no room remains in the array.


*   Sets
*   ____


    define('show(v,label,lvl)i,kind,elem,ent,line,hdr')        :(show.end)

*   Show the value of expression _v_.
*   _lev_ is non-zero when called to list elem or element
*   of a compound object.

show

    differ(label) str.out('show: ' str.upper(label))

*   If not set, branch on datatype, else branch on kind of 

    ident(datatype(v),'set') iskind(kind(v),'int','map','seq','set','str')  :s($('show.' kind(v)))
                                                    :($('show.' datatype(v)))
show.array

    proto = prototype(ara)
    proto break(',')                                :s(show.array.2)

*   Here for one dimensional array.

show.array.1
    first = ara[add1(.i)]                           :f(show.array.done)
    out(lpad(i,3) tab first)                        :(show.array.1)

show.array.2
    first = ara[add1(.i),1]                         :f(show.array.done)
    str.out(lpad(i,3) tab show(first) tab show(ara[i,2])) :(show.array.2)

show.entry

    show = show ' ' show(key(v))  ':' show(value(v)) ' ' :(show.done)

show.int

    show = '[int: low ' low(v) ' high ' high(v) ' step ' step(v)  '] ' :(show.done)

show.integer

    show = v                                        :(show.done)

show.map

*   Call _rank_ so entries listed in rank order.

    map = rank(map)
    loop(v)
    show = '{ map'

show.next

    elem = next(v)                                :f(show.done)
    show = show ' ' show(elem,,1)
    lt(size(show),100)                          :s(show.next)
    output = show ' '
    show =                                          :(show.next)

show.done

    show = show ' }'
                                                    :(show.done)

show.pair

    show = '{' lineid(num(pair)) ',' "'"
.                       replace(line(pair),' ','.') "'" '}' :(show.done)

show.seq

    show = ('[seq')

show.seq.next

    gt(i = i + 1,size(v))                   :s(show.seq.done)
    elem = seq(v)[i]
    show = (ident(show) '', show ' ') show(elem,,1)
    lt(size(show),100)                          :s(show.seq.next)
    output = show ' '
    show =                                          :(show.seq.next)

show.seq.done

    show = show ' ]'                                :(show.done)

show.set

*   Call _rank_ so entries listed in rank order.

*    set = rank(v)
    str.out('show.set size',size(v))
    show = '{ set'
    loop(v)

show.next

    key = next(v)                                   :f(show.done)
    key = datatype(key,'string') show.q(key)
    str.out('key',key)
    str.out('next elem ',elem)
    show = (ident(show,'{') '{ ', show ' ') show(elem,,1)
    show = show ' '  show(elem,,1)
    lt(size(v),100)                             :s(show.next)
    output = show
    show =                                          :(show.next)

show.done

    show = show ' }'
                                                    :(show.done)
show.str

    show = show.str(str.text(set))                :(show.done)

show.string

*   Don't quote string that is an integer.

    show = integer(v) v                             :s(show.done)

    show = show.q(v)                            :(show.done)


show.table

    t = convert(v,'array')

show.table.next

    key = t[i = i + 1,1]                            :f(show.done)
    value = t[i,2]

    output = tab show(key)    ' -> ' show(value)
                                                    :(show.table.next)
show.string.quote

    show = '"'  v '"'                               :(show.done)

show.done

    output = eq(lvl) show
                                                    :(return)

show.end
    
    define('show.b(e)')                             :(show.b.end)

*   Show value of _e_ as boolean: TRUE or FALSE

show.b

    integer(e) str.out((ne(e) 'TRUE', 'FALSE'))     :s(return)
    str.out((differ(e) 'TRUE', 'FALSE'))            :(return)

show.b.end

    define('show.line(line)')                       :(show.line.end)

*   Show a line with spaces replaced by '.'

show.line

    show.line = replace(line,' ','.')               :(return)

show.line.end

    define('show.lines(lines,title)i,line,titled')  :(show.lines.end)

*   Show the lines that are not empty in an array of lines

show.lines

    title  = 'lines' (differ(title) ' ' title, '')
    out(itle)

show.lines.n

    line = lines[add1(.i)]                          :f(return)
    empty(line)                                     :s(show.lines.n)
    differ(titled)                                  :s(show.lines.titled)

*   Do not list header unless at least one non-empty line

    out('    123456789012345')
    titled = 1

show.lines.titled

    out(lpad(lineid(i),2) ' ' replace(line,' ','.')) :(show.lines.n)

show.lines.end

    define('show.q(str)')                           :(show.q.end)

*   Show string _str_ enclosed in quotes

show.q

    str break("'")                                  :s(show.q.double)

    show.str = "'" str "'"                          :(return)

show.q.double

    show.q = '"' str '"'                            :(return)

show.q.end

    define('show.words(words)i,pos')                :(show.words.end)

*   Show results of words() call.

show.words

    pos = words[add1(.i),1]                         :f(return)
    out('words ' lpad(pos,2) ' ' words[i,2])        :(show.words)

show.words.end


    define('this(set)')                       :(this.end)

*   Returns value found in most recent call to next.

this

    this = this(set)                       
    str.out('this',this)
                                                    :(return)

this.end

    define('true(e)')                              :(true.end)

*   Returns TRUE if _e_ is true, or else FALSE.

true

    e = integer(e) +e
    true = integer(e) (ne(e) TRUE,FALSE)            :s(return)
    true = (differ(e) TRUE, FALSE)                  :(return)

true.end

    define('visit(set,expr)')                       :(visit.end)

*   _Visit_ loops over _set and calls _eval_ with argument
*   _expr_  for each of its members.

visit

    loop(set)

visit.next

    next(set)                                       :f(return)
    eval(expr)                                      :(visit.next)

visit.end

    define('setl4.seq.room(seq)len')                :(setl4.seq.room.end)

*   Ensures that sequence _seq_ has room for a new entry, expanding it if necessary.

setl4.seq.room

    len = prototype(seq(seq))
    le(size(seq),len)                           :s(return)

*   Here to extend length of array by fifty per cent.

    setl4.seq.extend(seq,(3 * len) / 2)             :(return)

setl4.seq.room.end
    
    define('setl4.show(set,label)')                 :(setl4.show.end)

*   Show the fields of an instance of _set_.

setl4.show

                               str.out('{')
    differ(label)              str.out('show: ' str.upper(label))
                               str.out('kind',kind(set))
    ne(size(set))          str.out('size',size(set))
    differ(index(set))     str.out('size(index(set))', size(index(set)))
    differ(key(set))       str.out('size(key(set))', size(key(set)))
    differ(next(set))      str.out('next',next(set))
    ne(low(set))           str.out('low',low(set))
    ne(step(set))          str.out('high',high(set))
    ne(high(set))          str.out('step',low(set))
    differ(text(set))      str.out('text',text(set))
    differ(seq(set))       str.out('seq',prototype(seq(set)))
                               str.out('}')

                                                    :(return)
setl4.show.end

    define('setl4.size(set)')                       :(setl4.size.end)

*   Return size of operand.

setl4.size

    setl4.size = ident(datatype(set),'string') size(set)    :s(return)
    kind = iskind(set)
    setl4.size = iskind(kind,'int')
.               high(set) - low(set) + 1    :s(return)
    setl4.size = set.size(set)                      :(return)

setl4.size.end

    define('traceoff()')                      :(traceoff.end)

*   Initiate tracing.

traceoff
    &ftrace = &trace =

    g.scoring = g.tracing = 0
    out('stop TRACING ')

traceoff.end

    define('traceon()')                       :(traceon.end)

*   Initiate tracing.

traceon

    out('start TRACING')
*   &ftrace = &trace = 1500000
    g.scoring = g.tracing = 1
                                                    :(return)
traceon.end

*   SETL4 uses some of the undefined SPITBOL operators for SETL4 functions.

*   Characters available for use by 'opsyn' to associate the character
*   with a function.

*   binary  &  @  #  %  ~
*   unary:  !  %  /  #  =  | /

*   define('setl4.op(ch,proc,n)')                   :(setl4.op.end)
*
**  Use _opsyn_ to define SETL4 operator.
*
*setl4.op
*
*   opsyn(ch,proc,n)                                :s(return)
*   error('fatal problem with opsyn for ' ch ')
*
*setl4.op.end

*   SETL4 binary operators

    opsyn('&','and',        2)
    opsyn('@','at',         2)
    opsyn('#','filter',     2)
    opsyn('~','member',     2)
*   opsyn('^','or',        2)

*   SETL4 unary operators:

    opsyn('=','this',       1)
    opsyn('|','new',        1)
    opsyn('!','not',        1)
    opsyn('#','setl4.size', 1)
    opsyn('/','split',      1)

*   Here endeth the SETL4 code.
*   May you fare well using it.
