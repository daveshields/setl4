*   Copyright 2017, David Shields
*   Licensed under the MIT license.

*   TODO LIST
*   may need equal for general equality test on sets, maps, etc.
*   update rank()
*   add first() and last() for sets and strings.
*   do sets of type 'str' later.
*   Use eval when adding values to sets, including when initialized using new()


*   SETL4 is an implementation of SETL written in SPITBOL.


*   What is SPITBOL?
*   ----------------

*   SNOBOL is a general programming language with special emphasis on processing 
*   strings and text that was  developed at Bell Labs in the 1960's by a team 
*   led by Ralph Griswold. The final version was called SNOBOL4.

*   Macro SPITBOL, or SPITBOL, is a very efficient implemenation of SNOBOL4.
*   Created by Robert B. K. Dewar and Ken Belcher in 1969, SPITBOL/360 
*   was written in IBM/360 assembly language, in what Dewar called
*   "aggressive assembly."
*
*   For example, SNOBOL4 requires maintaining a count of the number of 
*   statements executed and the ability to stop execution when a specified 
*   number of statements have been executed.  SPITBOL/360 does this by
*   computing an unnormalized floating point constant such that successive 
*   increments result in floating point overflow when the limit is reached.

*   Dewar and Belcher also wrote Realia COBOL, a COBOL compiler for Intel/x86 
*   written in COBOL. It produced very efficient code, better
*   code than, for example, that produced by IBM's product COBOL compiler.

*   Dewar ported SPITBOL/360 to several machines. Dewar joined the CIMS faculty
*   as a Professor in the early 1970's. In 1973, while working
*   with Anthony P. "Tony" McCann of Leeds University, he developed
*   Minimal, a portable assembly language. Dewar and McCann then rewrote
*   SPITBOL in Minimal, producing Macro SPITBOL, or SPITBOL. 
*   The implementation has proved very stable, with few changes in
*   several decades.

*   Macro SPITBOL is remarkably small. The code consists of about 28,000
*   lines: 2000 lines of comments defining Minimal, 5000 lines of constant/data 
*   declarations, and 21,000 lines of code.  Every line has a comment.
*   The executable for x86 Linux is 144 kilobytes.

*   SPITBOL was implemented for many machines and operating systems by
*   a small team that included Steve Duff, Mark Emmer, Bob Goldberg, and Dave Shields:
*   ICL 1900, Univac, CDC 6600, IBM PC, Apple Macintosh, SUN Solaris Sparc, 
*   Microsoft (DOS/NT/Windows), Intel x86_64 (Unix/Linux), and x86_64 Apple iOS.  
*   Special credit is due Mark Emmer, who led the project from the mid 1980's
*   to 2009. Dave Shieldsl has maintained SPITBOL since then.


*   What is SETL?
*   -------------

*   SETL (SET Language)  is  a programming language with  finite sets as 
*   the fundamental data type. It was created by Jacob T. "Jack" Schwartz 
*   of the Courant Institute of Mathematical Sciences (CIMS) of New York 
*   University (NYU).

*   Jack founded the SETL project in 1970. It was later funded by two 
*   five-year grants from the Office of Naval Research.

*   SETL was used to write NYU Ada/Ed, the first validated Ada compiler.
*   Devloped on the DEC Vax 11/780, Ada/Ed was ported to the IBM PC (DOS)
*   by a team led by Dave Shields.


*   Why the name SETL4?
*   -------------------

*   The SETL Project produced three implementations of SETL. The first was
*   written by Dave Shields in BALM, a language developed by Prof. Malcom 
*   Harrison of CIMS, the second by Henry S. "Hank" Warren in PL/I while on 
*   leave from IBM, and the third by Robert B. K. Dewar and Art Grand in LITTLE,
*   a low-level implementation language developed at CIMS.

*   SETL4 is the fourth implementation of SETL produced by a member 
*   (Dave Shields) of the NYU SETL project, hence the name SETL4.


*   Brief Introduction to SETL4
*   ---------------------------

*   SETL4 extends SPITBOL by adding the datatype _set_ to represent
*   finite sets. 

*   For example, the folowing SETL4 expression determines if the integer _P_ is prime:

*           !exists(|'int 2 P' @ 'multiple(P,this)')

*   where _multiple(a,b) is true if and only if _a_ is a multiple of _b_.

*   Sets in SETL4
*   -------------

*   SETL4 provides several kinds of sets.

*   Sets of kind 'set' are a collection of distinct members.

*   Sets of kind 'map' consist of a series or ordered pairs,
*   called entries. The first element of an enter is the key,
*    the second is the value.  No two entries in the map can 
*   have the same key but different values.

*   Sets of kind 'iterator' consist of positive integers of the form

*   low, low + step, ... high

*   For example 'iterator 5 25 5' is the set {5 10 15 20 25}.
*   Iterators support efficient iteration, and suppor only the
*   operations of iteration and membership.

*   Sets of kind 'integer' define a map on the positive integers.
*   The members usually, but not necessarily consist of a sequence
*   of integers with no gaps; for example 'sequence 5' is a map defined
*   on 1, 2, ... 5.

*   Sets of kind 'sequence' ('seq') are a map defined on a set of positive integers
*   that usually, but not necessarily, consists of a consecutive sequence of integers.

*   Sets of kind 'string' consists of a map from integers to characters.

*   By convention, the kinds are writtten 'int', 'iter', 'map', and 'set'.

*   Additonal SETL4 data types
*   --------------------------

*   SETL4 provides the following data types in addtion to _set_: 

*       _entry_   _line_   _token_

*   where 

*       entry(key,value)            is an entry in a map;
*       line(mark,text)             is a line of text and an associated mark (tag); and
*       token(lineno,ndx,type,text) is a lexeme, or lexical token.

*   Show
*   ----

*   The function _show_ writes out the value of a SETL4 object in a readable 
*   form. Objects are shown in the order defined by the function _rank_.


*   SETL4 Binary Operators:
*   -----------------------

*   '@'     s @ e   Eval            Evaluates _e_ at current element of set _s_
*   '#'     s # e   Filter          Returns subset of set _s_ for which _e_ is true
*   '~'     m ~ s   Membership      Tests if _m_ is member of set _s_


*   SETL4 Unary Operators:
*   ----------------------

*   '='     =s      Iteration       Returns 'this', the current element of an iteration
*   '|'     |'str'  Constructor     Returns set specified by string _str_
*   '!'     !expr   Not             True if and only if _expr_ is false
*   '#'     #s      Size            Number of elements in set _s_
*   '/'     /s      Split           Splits a string into a sequence of words

*   The following operator definitions are not yet in effect, due to a need
*   to change the underlying SPITBOL implementation.

*   '&'     a & b   And             True if and only if both _a_ and _b_ are true
*   '^'     a ^ b   Or              True if and only if _a_ or _b_ is true

*   SETL4 Global variables
*   ----------------------

    setl4.ascii.name = 
    setl4.ascii.value =  
    setl4.random_var =

*   Useful patterns

    setl4.any.digit         =   any('0123456789')
    setl4.span.digits       =   span('0123456789')
    setl4.break.digit       =   break('0123456789')

    setl4.break.letter      =   break(&lcase &ucase)
    setl4.any.letter        =   any(&lcase &ucase)
    setl4.span.letters      =   span(&lcase &ucase)
    setl4.span.spaces       =   span(' ' char(9))
    setl4.break.space       =   break(' ' char(9))

    setl4.any.word          =   any(&lcase &ucase '0123456789')
    setl4.span.word         =   span(&lcase &ucase '0123456789')


*   SETL4 Functions
*   ---------------
*
*   abbrev(a,b)                     Test that the first operand is an initial substring of the second.
*   add(set,elem)                   Adds element to set
*   and(a,b)                        And: Tests if both operands are true
*   arb(n)                          Returns arbitary (randomly chosen) integer in 1 .. _n_
*   arb(set)                        Returns arbitary (randomly chosen) element of _set_
*   assert(expr)                    Tests that _expr_ is true, ends execution otherwise
*   assert.type(obj,type)           Tests that _obj_ has SPITBOL datatype _type_, ends execution otherwise
*   at(set,expr)                    Evaluates _expr_ for for current iterate of _set_
*   join(a,b)                       Joins two strings into a single string by concatenating them
*   defined(map,key)                Tests if a map is defined for a specified key
*   difference(a,b)                 Returns set of members of set _a_ not in the set _b_
*   domain(map)                     Returns set of elements in the domain of a map
*   equal(a,b)                      Tests if two SETL4 objects are equal
*   exists(set,expr)                Tests if an expression is true for at least one element in a set
*   from(set,elem)                  Returns set consisting of the members of a set except a specified member
*   get(map,key)                    Gets the value of map _map_ for _key_ for a map
*   get(set,i)                      Gets the i-th element in a set, or fails if no such element
*   false(e)                        tests if argument is false
*   forall(set,expr)                Tests if an expression is true for every element of a set
*   filter(set,expr)                Filter:; returns subset of _set_ for which _expr_ is true
*   int(s)                          Returns integer defined by _s_
*   integers(n)                     Returns set of integers 1 ... n
*   intersection(a,b)               Returns set of elements common to two sets
*   loop(set)                       Set up iteration over _set_ using _next_
*   mark(line)                      Annotates, or marks, a line
*   member(elem,set)                Tests set membership
*   new(str)                        Returns new set specified by _st_
*   next(set)                       Returns next element in iteration defined by prevous _loop_, fails if no more elements
*   not(expr)                       Not: Tests if operand is false
*   or(a,b)                         Or: Tests if either operand is true
*   push(stack,value)               Push value onto a stack
*   pop(stack)                      Pop the top of a stack
*   put(map,key,val)                Defines the value of a map key
*   random(n)                       Returns random element
*   random.seed()                   Sets random number seed to initialize _random_
*   range(map)                      Returns set of elements in the range of a map
*   rank(set)                       Returns the rank, or normal form, of a set or string.
*   subset(a,b)                     Tests if the second set is a subset of the first set
*   union(a,b)                      Returns set consisting of all the members in two sets
*   set.size(set)                   Returns number of elements in set _set_
*   traceoff()                      Turns off tracing
*   show(v,lvl)                     Show value of _v_, with _lvl_ set non-zero when listing member of set
*   show.b(e)                       Show value of _b_ as boolean
*   show.line(line)                 Show string _line_ with spaces replaced by '.'
*   show.lines(lines,title)         Show non-empty lines in array of lines, with title 'title'
*   show.q(str)                     Show string enclosed in appropriate quote character (" or ') 
*   show.words(words)               Show a sequence of words, separated by space character
*   traceon()                       Turns on tracing
*   this(set)                       Returns current iteration value for _set_
*   true(e)                         Tests if operand is true
*   visit(set,expr)                 Visits each element of set _set_ and evaluates _expr_ for that element
*   words(str)                      Returns sequence of words, separated by spaces, in a string,


*   Set Data Type
*   -------------

*   A set is defined by the following datatype:

    data('set(set.index,set.key,set.kind,set.size,set.next,set.low,set.high,set.max,set.step,set.text,set.seq,set.this)')

*   where

*           _set.index_         a SPITBOL table used to map the integer
*                               id assigned each element to the value of the element.
*                               It is used to support fast iteration.

*           _set.key_           a SPITBOL table mapping set elements to index entries.

*           _set.kind_          is the kind of the set, one of 'set', 'map', 'int, 
*                               'seq'. The kind is  specified when the 
*                               set is created. The default value is 'set'.

*           _set.size_          the current number of members.

*           _set.next           is iteration index when iterating over set
*                               when iterating over a 

*           _set.low_           lower bound of _int_ 

*           _set.high_          upper bound of _int_ 

*           _set.step_         number of values between members of set of kind _int_.

*           _set.text_          is the text of the set of kind _str_

*           _set.this           the last value returned by the _next_ primitive

*           _set.max'           maximum number of elements. This applies to sets of kind 'integers'.

*   Sets of integers
*   ----------------

*   SETL4 sets of kind _integers' provide an efficient implementation of a set of 
*   integers, in the form of a string such that an integer _i_ is in the set only
*   if the i-th character of the string is '+'. The string is represented by a 
*   table in blocks of 100 characters, so that the first block represents the integers 
*   1 .. 100, and so forth. New chunks are allocated only when necesary.  The SPITBOL 
*   function BREAK is used to find the next element in the set when iterating over the set.

*   Maps
*   --------------

*   In mathematics, a map defined on a finite set is a set of 
*   ordered pairs, or entries,  that define a relation between the 
*   first element of an entry, its _key_, and the second element 
*   of the entry, the value of the map for _key_.

    data('entry(key,value)')

*   The SPITBOL datatype TABLE provides the machinery to implement maps.
*   SPITBOL provides no way to determine the number of entries in a table
*   other than converting the map to an array. This is the only way in 
*   SPITBOL to iterate over a SPITBOL table.

*   For this reason, maps are implemented using two tables: _index_ and _key_.
*   Each new entry added to a map is given an integer id, starting with one.  
*   The field _index_ maps the id's to the associated pairs.
*   The entries in _index_ allow efficient iteration over the  
*
*   The table _key_ maps keys in the map to the corresponding entry in the map.
*   The entries in _key_ permit efficient retrieval of the map's value for a given key.

*   SETL4 also provides the datatype _stack_ that implements a stack, providing
*   the funcitons _push_ and _pop_. Stacks are created by the function _new.stack_.

    data('stack(stack.stack,stack.top)')



*   SETL4 Configuration Options
*   ---------------------------

*   _setl4.include_ is directory containing setl4. If you have cloned github setl4
*   then no change is necessary. Otherwise adjust the definition.
*   Programs using setl4 

*   setl4.include = "~/setl4/"
*   Initial size of any hash tables created when constructing
*   a new instance of a 

*   _setl4.config.size_ is default size for the _index_ and _key_ tables of a set.

    setl4.config.size = 32

*   _setl4.config.integers.max_ is maximum number of elements in set of kind 'integers'.

    setl4.config.integers.max = 1000
    setl4.config.integers.max = 50

*   SETL4 needs a stack

    setl4.stack = stack()

*   SETL4 Global Variables
*   ----------------------

    setl4.ascii.initialized = false


*   SETL4 Function Definitions
*   --------------------------

    define('abbrev(a,b1,b2,b3,b4,b5)')                       :(abbrev.end)

*   Test that _a_ is an initial substring of one of 
*   _b1_, _b2_, _b3_, _b4_, or _b5_.

abbrev

    differ(b1) ident(substr(b1,1,size(a)),a)    :s(return)
    differ(b2) ident(substr(b2,1,size(a)),a)    :s(return)
    differ(b3) ident(substr(b3,1,size(a)),a)    :s(return)
    differ(b4) ident(substr(b4,1,size(a)),a)    :s(return)
    differ(b5) ident(substr(b5,1,size(a)),a) :  s(return)
                                                :(freturn)

abbrev.end

    define('add(set,elem)this')                 :(add.end)

*   Add _elem_ to set _set_ if not already present.
*   If _elem_ is a set of kind 'seq' add all the values
*   in the range of the sequence to the set.

add

    ident(datatype(elem,'entry'))               :s(add.map)
    ident(datatype(elem),'set') ident(set.kind(elem),'seq') :s(add.list)

*   Convert _elem_ that is integer to integer.

    elem = integer(elem) +elem
    ident(set.kind(set),'int')                  :s(add.int)
    ident(set.kind(set),'map')                  :s(add.map)
    ident(set.kind(set),'seq')                  :s(add.seq)
    ident(set.kind(set),'set')                  :s(add.set)
    ident(set.kind(set),'iter') error("cannot add new element to set of type 'int'")

                                                :(return)
add.list

*   Here to add the elements in the range of the _element_ argument to the set.

    setl4.save(elem)

    loop(elem)

add.list.next
    
    this = next(elem)                           :f(add.list.done)
    add(set,this)                               :(add.list.next)

add.list.done

    setl4.restore()                             :(return)

add.int

*   Here to test if _elem_ is already in set of kind _int_, 
*   and otherwise to add new integer to the set.

    gt(elem,set.max(set))                       :s(freturn)

*   Set _i_ to the block for _elem_
*   Not a member if the block is empty. If block is not
*   empty then see if character corresponding to _elem_ is '+'.

    i = set.key(set)[(elem - 1) / 100] ident(i) :s(add.int.new)
    elem = remdr(elem,100)
    elem = eq(elem) 100
    ident(substr(i,elem,1),'+')                 :s(return)f(freturn)

*   Add new element to set by allocating new block and setting
*   character corresponding to _elem_ to '+'.
*   Update set.max if necessary.

    i = set.key(set)[(elem - 1) / 100] = dupl('-',100)
    elem = remdr(elem,100)
    elem = eq(elem) 100
    i = (ne(elem) substr(i,1,elem - 1),'') '+' (lt(elem,100) substr(i,elem + 1),'')
    set.key(set)[(elem - 1) / 100] = i          
    set.max(set) = gt((i + 1) * 100,set.max(set)) ((i + 1) * 100) :(return)

add.map

*   See if adding new map entry or updating existing one.

    differ(set.key(set)[key(elem)])             :s(add.put)

add.new

    set.size(set) = set.size(set) + 1
    set.index(set)[set.size(set)] = key(elem)

add.put

    set.key(set)[key(elem)] = elem              :(return)

add.set

*   Here to add element to set.
    member(set,elem)                            :s(return)
    this = set.size(set) = set.size(set) + 1
    set.index(set)[this] = elem
    set.key(set)[elem] = this                   :(return)

    
add.end

    define('and(a,b)')                          :(and.end)

*   Tests if both operand are true (not null), only 
*   evaluating the second oerand if necessary.

and

*   See if both operands are integers.

    and = integer(a) eq(a)                          :s(freturn)
    and = integer(a) integer(b) ne(a * b)           :s(return)f(freturn)

*   Here where at least one operand for 'and' is not integer, so
*   use ident/differ to evaluate.

    and = differ(a) differ(b)                       :s(return)f(freturn)

and.end

    define('arb(set)n,r')                           :(arb.end)

*   Returns arb (randomly selected) element of _set_.

arb

    arb = integer(set) random(+set)           :s(return)
    r = random(set.size(set))
    arb = differ(set.step(set))         set.low(set) + (r - 1) * step(set) :s(return)
    arb = set.index(set)[r]                         :(return)
arb.end

    define('assert(expr)')                          :(assert.end)

*   Test that expression is non null, ending execution otherwise.

assert

    true(expr)                                      :s(return)
    error('assertion failed, quitting') 

assert.end

    define('assert.type(obj,typ)')                  :(assert.type.end)

*   Verify that _obj_ has datatype _typ_, end execution if not.

assert.type

    assert(ident(datatype(obj),typ))                :s(return)
    error('assertion on datatype failed ' typ )
    

assert.type.end

    define('at(set,expr)this')                      :(at.end)

*   Evaluate _expr_ for the current element in an iteration.

at

    this = set.next(set)
    at = eval(expr)                                 :(return)

at.end

    define('defined(map,key)entry')                 :(defined.end)

*   Tests if the map _map_ has an entry for _key_.

defined
    key = integer(key) +key
    differ(set.key(map)[key])                       :s(return)f(freturn)

defined.end

    define('difference(a,b)this')                   :(difference.end)

*   Returns set defined by set of elements of _a_ that are not in _b_.

difference

    difference = new()
    loop(a)

diference.next

    this = next(a)                                  :f(return)
    member(b,this)                                  :s(difference.next)
    add(difference,this)                            :(difference.next)

difference.end

    define('equal(a,b)entry,i,key,value')                        :(equal.end)

*   Tests if two objects are equal. Use DIFFER unless both are sets, in
*   which case use equality tests specified below.

equal
   
    equal = FALSE
    ident(datatype(a),'set') ident(datatype(b),'set')   :s(equal.setl4)
    ident(a,b)                                          :s(equal.true)f(return)

equal.setl4

*   Here for equality test of two SETL4 objects.

    ident(set.kind(a),set.kind(b))                      :f(return)
    eq(set.size(a),set.size(b))                         :f(return)
            :($('equal.' set.kind(a)))

equal.int

    eq(set.low(a),set.low(b))                           :f(return)
    eq(set.high(a),set.high(b))                         :f(return)
    eq(set.step(a),set.step(b))                         :f(return)s(equal.true)

equal.map

*   Two maps are equal if they have the same vaue at every element in the domain.

    gt(i = i + 1, set.size(a))                          :s(equal.true)
    entry = set.index(a)[i]
    ident(value(entry),get(b,key(entry)))               :f(return)s(equal.map)

equal.seq

*   Two sequences are equal if they have the same vaue at every element in the domain.

    gt(i = i + 1, set.size(a))                          :s(equal.true)
    ident(set.seq(a)[i], set.seq(b)[i])                 :s(equal.seq)f(return)

equal.set

*   Two sets are equal if and only if each is a subset of the other.

    equal = and(set.subset(a,b),set.subset(b,a))        :f(return)s(equal.true)

*equal.str
*
*    equal = (ident(set.text(a),set.text(b) TRUE, FALSE) :f(return)s(equal.true)
*
equal.true

    equal = TRUE                                        :(return)

equal.end

    define('from(set,elem)this')                    :(from.end)

*   Return set consisting of all the elements of _a_ except _elem_.

from

    from = new()
    loop(set)

from.next

    this = next(set)                                :f(return)
    differ(this,elem) add(from,this)                :(from.next)

from.end

    define('domain(map)elem)')                      :(domain.end)

*   Return set of the keys in _map_.

domain

    domain = new()
    loop(map)

domain.next

    entry = next(map)                               :f(return)
    differ(entry) add(domain,key(entry))            :(domain.next)

domain.end

    define('error(str)')                            :(error.end)

*   Report cause of error and quit execution

error

    &dump = 2
    out('Fatal error: ' str)                    :(end)

error.end

    define('exists(set,expr)this,e')                :(exists.end)

*   Tests if there is an element in _set such that _expr_ is true.

exists

    loop(set)

exists.loop

    this = next(set)                                :f(freturn)
    exists = eval(expr)                             :f(exists.loop)s(return)

exists.end

    define('false(e)')                              :(false.end)

*   Tests if argument is false (null).

false

    e = integer(e) +e
    false = integer(e)  eq(e)                       :s(freturn)
    false = ident(e)                                :s(return)f(freturn)

false.end

    define('filter(set,expr)e,this')                :(filter.end)

*   According to Paul Halmos, in his book "Naive Set Theory,"
*   a major principle of set theory, often referred to by its
*   German name _Aussonderungsaxiom_, is the Axiom of Specification:

*   To every set _A_ and every condition _S(x)_ there corresponds
*   a set _B_ whose elements are exactly those elements _x_ of _A_
*   for which _S(x)_ holds.

*   In SETL4 we say that the expression '_A_ @ _S_' "filters"
*   _A_ by _S_. This can also be read as
*           "the subset of _A_ such that _S_ is true"

*   Returns the subset of set or map _set_ for which _expr_ is true.

filter

    filter = new()

    loop(set)

filter.loop

    this = next(set)                                :f(return)
    e = eval(expr)                                  :f(freturn)s(forall.loop)

filter.end

    define('forall(set,expr)e')                     :(forall.end)

*   Tests if _expr_ is true for all elements of _set_.

forall

    loop(set)

forall.loop

    next(set)                                       :f(return)
*    out('forall.loop.next',next(set))
    e = eval(expr)                                  :f(freturn)s(forall.loop)

forall.end


    define('get(map,key)val,entry')                 :(get.end)

*   Gets the value of the key _key_ in the map _map_, or gets
*   element _key_ in a set, failing if no such element.

get

    ident(set.kind(map),'map')                      :s(get.map)
    ident(set.kind(map),'seq')                      :s(get.seq)
    ident(set.kind(map),'set')                      :s(get.set)
    error('get on unsupported kind of set: ' set.kind(map))

get.map

    key = integer(key) +key
    entry = set.key(map)[key]
    ident(entry)                                    :s(freturn)
    get = value(set.key(map)[key])                  :(return)

get.seq

    entry = set.index(map)[key]
    ident(entry)                                    :s(freturn)
    get = value(set.key(map)[entry])                :(return)

get.set

    entry = set.index(map)[key]
    ident(entry)                                    :s(freturn)
    get = set.key(map)[entry]                       :(return)

get.end

    define('int(n)')                             :(int.end)

*   Returns _n_ if _n_ is an integer.
*   Returns _n_ converted to an integer if _n_ is real.
*   Returns the value of a string written in exponential 
*   (scientific) notation into its integer value.

int

    int = integer(n) n                              :s(return)
    int = ident(datatype(n),'real') convert(n,'integer') :s(return)
    int = n
    n break('e')                                    :f(return)
    n break('e') . int 'e' =
    int = int * +('1' dupl('0',n))                  :(return)

int.end

    define('integers(n)')                           :(integers.end)

*   Return set containing integers 1 .. _n_

integers

    integers = new()

integers.next

    le(i = i + 1,n) add(integers,i)                 :s(integers.next)f(return)

integers.end

    define('intersection(a,b)this')                 :(intersection.end)

*   Returns intersection of sets _a_ and _b_.

intersection

*   Make _a_ the smaller 

    le(set.size(a),set.size(b))                     :s(intersection.next)
    a = b
    b = intersection
    intersection = new()
    loop(a)

intersection.next

    this = next(a)                                  :f(return)
    member(b,this) add(intersection,this)           :(intersection.next)

intersection.end

    define('join(a,b)')                             :(join.end)

*   Concatenate argument strings.

join

    join = a b :(return)

join.end

    define('loop(set)dt')                           :(loop.end)

*   Set up for loop. Set next field so that on first call to _next()_
*   the index will be advanced to the first element in the 

loop

    set.next(set) = (differ(set.step(set)) set.low(set) - set.step(set),0) :(return)

loop.end


    define('member(set,elem)kind,entry,i,key,this,value)') :(member.end)

*   Tests if _elem_ is member of _set_.

member

    elem = integer(elem) +elem
*    out('member ',elem)
*   Branch according to whether _set_ is set or map.

    ident(datatype(elem),'entry')                   :s(member.map)
    ident(set.kind(set),'int')                      :s(member.int)
    ident(set.kind(set),'iter')                     :s(member.iter)
    ident(set.kind(set),'seq')                      :s(member.seq)
    ident(set.kind(set),'set')                      :s(member.set)
    error('member: unexpected kind ' kind )

member.int

*   To test for membership in set of kind _int_ get the block
*   for the element. If it is null then fail since element not
*   in the set. Otherwise see if character corresponding to the
*   value of _elem_ is '+'.

    key = set.key(set)[(elem - 1) / 100]
    ident(key)                                      :s(freturn)
    i = remdr(elem,100)
    i = eq(i) 100
    ident(substr(key,i,1),'+')                      :s(return)f(freturn)

*   TODO: use code below eventually

*   Here to test set membership. Set _key_ to the block for element _elem_,
*   and use BREAK to test membership within the block.

    ident(key = set.key(set)[(member / 1000) + 1])  :s(freturn)
    ident(substr(key,remdr(member,100) + 1,1),'+')  :s(return)f(freturn)

member.iter

    integer(elem)                                   :f(freturn)
    elem = +elem
    lt(elem,set.low(set))                           :s(freturn)
    gt(elem,set.high(set))                          :s(freturn)
    eq(remdr(elem - set.low(set),set.step(set)))    :s(return)f(freturn)

member.set

    elem = integer(elem) +elem 
    differ(set.key(set)[elem])                      :s(return)f(freturn)

member.end


    define('new(init)kind,i,len,n,key,seq,val,words)'):(new.end)

*   Construct new set with initial values determined by string _init_.
*   The first three characters in _init_ determine the initial
*   members of the set.
*
*       'iter'           Sequence of integers low, low+step, ... high
*       'set'           set, followed by list of initial members
*       'map'           map, followed by list of key/value pairs separated by colon
*       'seq'           sequence, followed by list of initial values.
*       'str'           string sequence of characters defined by remaining characters

new

    new = set()
    ident(init)                                     :s(new.set)
    init = init ' '
    init span(' ') =
    init break(' ') . kind span(' ') =
    kind = gt(size(kind),3) substr(kind,1,3)
    kind = ident(kind,'ite') 'iter' 
    abbrev(kind,'integers')                          :s(new.init)
    abbrev(kind,'iterator')                          :s(new.init)
    abbrev(kind,'map')                               :s(new.init)
    abbrev(kind,'seq')                               :s(new.init)
    abbrev(kind,'set')                               :s(new.init)
    abbrev(kind,'string')                            :s(new.init)
    error('bad kind to new ' kind )

new.init

    init span(' ') =

*   Branch on kind to finish initialization of new set.

                                                    :($('new.' kind))

new.int
    
    set.kind(new) = 'int'
    n = setl4.config.integers.max
    set.max(new) = n
    set.text(new) = dupl(' ',n)

new.int.next

    init break(' ') . key span(' ') =              :f(return)
    add(new,eval(key))                             :(new.int.next)

new.iter

    set.kind(new) = 'iter'
    set.key(new) = set.index(new) =
    ident(init) error('new initialization information needed')
    set.step(new) = 1
    seq = words(init ' ')

*   Ignore extra arguments to iterator constructor.

    set.size(seq) = gt(set.size(seq),3) 3
    eq(set.size(seq),1)                             :s(new.iter.1)
    eq(set.size(seq),2)                             :s(new.iter.2)
    eq(set.size(seq),3)                             :s(new.iter.3)

new.iter.1

*   If one argument, low is one, high is the argument.

    set.low(new) =  1
    set.high(new) = int(get(seq,1))
    set.step(new) = 1                               :(return)

new.iter.2

*   If two arguments, low is first argument, high is the second.

    set.low(new) =  int(get(seq,1))
    set.high(new) = int(get(seq,2))
    set.step(new) = 1                               :(return)

new.iter.3

*   If three arguments, low is first, high is second, step is third.
    set.low(new) =  int(get(seq,1))
    set.high(new) = int(get(seq,2))
    set.step(new) = int(get(seq,3))                 :(return)

new.map
    
    new = set(table(setl4.config.size),table(setl4.config.size))
    set.kind(new) = 'map'

*   If present, _init_ is a list consisting of a list of key/value pairs,
*   with a colon (:) separating the key and value.

    init setl4.span.spaces =
    ident(init)                                     :s(return)

new.map.next

    init break(':') . key ':' break(' ') . val span(' ') =  :f(return)
    put(new,key,val)                                :(new.map.next)

new.seq

    new = set(table(setl4.config.size),table(setl4.config.size))
    set.kind(new) = 'seq'

new.seq.next

    init setl4.break.space . val setl4.span.spaces =    :f(return)
    put(new,i = i + 1,val)                              :(new.seq.next)

new.set

    new = set(table(setl4.config.size),table(setl4.config.size))
    set.kind(new) = 'set'
    ident(init)                                         :s(return)

new.set.next

    init break(' ') . key span(' ') =                   :f(return)
    add(new,key)                                        :(new.set.next)


*new.str
*
*    set.kind(new) = 'str'
*    set.index(new) = set.key(new) =                        
*    str.text(new) = init                            :(return)
*
*new.str.next
*
*    init len(1) . key ' ' =                         :f(return)
*    put(new,i = i + 1, key)                         :(new.str.next)
*

new.end

    define('new.stack()')                           :(new.stack.end)

*   Returns a new stack.

new.stack

*   Don't allocate stack table when creating stack. Do that
*   when first add value to stack.

    new.stack = stack(,0)                           :(return)

new.stack.end

    define('next(set)kind,key,next,value')          :(next.end)

*   Advance iteration by setting field _next_.  Fail if no more elements remain.

next

*   Branch on kind to find next iteration value.

        :($('next.' set.kind(set)))

next.int

*   Here to advance iteration to next element of set of kind _int_
*   by incrementing _set.next_ until find element in the set.
    next = set.next(set) = set.next(set) + 1
    gt(next,set.max(set))                           :s(freturn)
    member(set,next)                                :f(next.int)
    set.this(set) = next
    this = next                                     :(return)

*   TODO - could use break for quick test on a block. Keep it simple for now.

*   Iterate until find character in text indicating membership.

    differ(substr(set.text(set),next,1),'+')         :s(next.int)
    set.this(set) = next
    this = next                                     :(return)

next.iter

*   Here to find next element in set of type _iter_.

    next = set.next(set) = set.next(set) + set.step(set)
    le(next,set.high(set))                          :f(freturn)
    set.this(set) = next
    this = next                                     :(return)

next.map
next.seq
next.set

    next = set.next(set) = set.next(set) + 1
    le(next,set.size(set))                          :f(freturn)
    next = set.index(set)[next]
    set.this(set) = next
    this = next                                     :(return)

next.str

    next = set.next(set) = set.next(set) + 1
    le(next,set.size(set))                          :f(freturn)
    next = substr(set.text(set),next,1)
    set.this(set) = next
    this = next                                     :(return)

next.end

    define('not(expr)')                             :(not.end)

*   Returns not of boolean expression.

not

    not = integer(expr) (eq(expr) 1, '')            :s(return)f(freturn)
    not = ident(expr) 1                             :s(return)f(freturn)

not.end

    define('or(a,b)')                               :(or.end)

*   Tests if either operand is true, fails otherwise.
*   Only evaluates second operand if necessary

or
    or = integer(a) ne(a)                           :s(return)
    or = integer(b) ne(b)                           :s(return)

*   Here if operands not both integers, so use ident/differ.

    or = differ(a)                                  :s(return)
    or = differ(b)                                  :s(return)f(freturn)

or.end

    define('out(text1,text2,text3)type1,type2')     :(out.end)

*   Output a line conisting of TEXT1, TEXT2 enclosed
*   in brackets, followed by TEXT3.

out

    output = (text1 (ident(text2) '', '[' text2 ']') (differ(text3) text3, '')) :(return)

out.end

    define('pop(stack)')                            :(pop.end)

*   Pop the top item from the stack, or fail if the stack is empty.

pop

    eq(stack.top(stack)) error('attempt to pop from empty stack')
    pop = stack.stack(stack)[stack.top(stack)]
    stack.top(stack) = stack.top(stack) - 1         :(return)

pop.end

    define('push(stack,value)')                     :(push.end)

*   Push _value_ onto the stack _stack_.

push

    stack.stack(stack) = ident(stack.stack(stack)) table()
    stack.stack(stack)[stack.top(stack) = stack.top(stack) + 1] = value :(return)

push.end

    define('put(map,key,value)v')                   :(put.end)

*   Sets the value of the entry for key _key_ in map _map_ to be _val_,
*   creating a new entry if necessary.

put

*    out('put dt',datatype(map))
*    out('put key',key)
*    out('put value',value)
    key = integer(key) +key
    value = integer(value) +value
    v = set.key(map)[key]
    differ(v)                                       :s(put.value)

*   Here to create new entry in map, and then merge to set new value.

    set.size(map) = set.size(map) + 1
    set.index(map)[set.size(map)] = key

put.value

    set.key(map)[key] = entry(key,value)            :(return)

put.end

    define('range(map)elem)')                       :(range.end)

*   Return set of the values of _map_.

range

    range = new()
    loop(map)

range.next

    entry = next(map)                               :f(return)
    add(range,value(key(entry)))                    :(range.next)

range.end

    define('random(n)')                             :(random.end)

*   Return integer uniformly distributed in 1,2,...,n.
*   If n=0 returns real uniformly distributed in the interval [0,1].
*   The algorithm can be found in section 16.1 of "Algorithms in SNOBOL4,"
*   James F. Gimpel, John Wiley and Sons, 1976.

random

    setl4.random_var = remdr(setl4.random_var * 4676, 414971)
    random  = setl4.random_var / 414971.0
    random = ne(n) convert(random * n,'integer') + 1
                                                    :(return)
random.end

    define('random.seed()s,c')                      :(random.seed.end)

*   Compute seed for random number generator from date and time.

random.seed
    setl4.random_var =
    s = g.date
    s = replace(s,'/:-','   ')

*   Get all the digits in s.

random.seed.loop

    s len(1) . c =                                  :f(random.seed.done)
    ident(c,' ')                                    :s(random.seed.loop)
    setl4.random_var = setl4.random_var c           :(random.seed.loop)

random.seed.done

*   Reverse the seed so digits depending on time come first.

    setl4.random_var = +reverse(setl4.random_var    )
                                                    :(return)
random.seed.end

    define('rank(qet)ara,freq,i,entry,key,seq,str,value')    :(rank.end)

*   Rank returns a sorted version of its operand such that
*   elements are in increasing order. For example,
*           rank('asxybza') is 'aabsxyz'.
*   Sets are ranked in increasing order of their members.
*   Maps are ranked in increasing order of their keys.
*   Sequences (seq's) and int's are always maintained in rank order.

rank
 :(return)
    out('rank kind',kind(qet))
    qet = copy(qet)
    ident(kind,'iter')                              :s(rank.int)
    ident(kind,'seq')                               :s(rank.int)
    qetl4kind(qet,'map','qet','str')                :s($('rank.' qetl4kind(qet)))
    ident(datatype(qet),'string')                   :s(rank.string)
    error('rank unsupported operand type ' datatype(qet) )

rank.map

    ara = sort(key,1)
    rank = new()

rank.next

    entry = ara[i = i + 1,1]                        :f(return)
    put(rank,key(entry),value(entry))               :(rank.next)

rank.seq
rank.int

*   Sequences and strings are always in rank order

                                                    :(return)

rank.qet

    ara = sort(key,1)
    rank = new()

rank.qet.next

    add(rank,ara[i = i + 1,1])                      :f(return)s(rank.next)

rank.str

    str = text(qet)

rank.str.string

    freq = str.frequency(str)
    seq = new()

rank.str.collect

    str len(1) . i =                                :f(rank.str.qet)
    add(seq,i)                                      :(rank.str.collect)

rank.str.qet

    seq = rank(seq)
    loop(seq)

rank.l.next
    
    i = next(seq)                                   :f(return)
    rank.str = rank.str dupl(i,freq[i])             :(rank.l.next)

rank.string

*    str = qet                                       :(rank.str.string)

rank.end

    define('show(v,label,lvl)i,kind,elem,ent,line,hdr,this') :(show.end)

*   Show the value of expression _v_.
*   _lev_ is non-zero when called to list element of a compound object.

show

    ident(v)                                        :s(return)
    differ(label) out('show: ' str.upper(label))
    differ(datatype(v),'set')                       :s(show.notset)

*   When showing a set, save _set.next_ and _set.this_ to avoid
*   disrupting possible existing iteration over the set.
    
    setl4.save(v)
    kind = set.kind(v)

*    out('show dt',datatype(v))
*    out('show kind',set.kind(v))

    ident(kind,'int')                               :s(show.int)
    ident(kind,'iter')                              :s(show.iter)
    ident(kind,'map')                               :s(show.map)
    ident(kind,'seq')                               :s(show.map)
    ident(kind,'set')                               :s(show.set)
*    ident(kind,'str')                               :s(show.st)
    error('show unknown set kind',kind,' quitting.')

show.notset

            :($('show.' datatype(v)))

show.array

    proto = prototype(ara)
    proto break(',')                                :s(show.array.2)

*   Here for one dimensional array.

show.array.1
    first = ara[add1(.i)]                           :f(show.array.done)
    out(lpad(i,3) tab first)                        :(show.array.1)

show.array.2
    first = ara[add1(.i),1]                         :f(show.array.done)
    out(lpad(i,3) tab show(first) tab show(ara[i,2])) :(show.array.2)

show.entry

    show = show ' ' show(key(v))  ':' show(value(v)) ' ' :(show.done)

show.iter

    show = '{iter: low ' set.low(v) ' high ' set.high(v) ' step ' set.step(v)  '} ' :(show.set.done)

show.int

*   Show sets of kind _int_ by looping through _set_text_ and showing characters which are not blank.

    show = '{ int'

show.int.next

    gt(i = i + 1, set.max(v))                       :s(show.set.done)

*   TODO - could use break to speed up search. Keep it simple for now.

    member(v,i)                                     :f(show.int.next)
    show = show ' ' show(i,,1)
    lt(size(show),100)                              :s(show.int.next)
    out(show ' ')
    show =                                          :(show.int.next)

show.integer

    show = v                                        :(show.done)

show.map

*   Call _rank_ so entries listed in rank order.

*    map = rank(map)
    this = copy(v)
    loop(v)
    show = '{ map'

show.map.next

    elem = next(v)                                  :f(show.set.done)
    show = show ' ' show(elem) ':' show(get(v,elem)) 
    lt(size(show),100)                              :s(show.map.next)
    out(show ' ')
    show =                                          :(show.map.next)

show.map.done

    setl4.restore(v)
    show = show ' }'                                :(show.done)

show.pair

    show = '{' lineid(num(pair)) ',' "'"
.                       replace(line(pair),' ','.') "'" '}' :(show.done)

*show.seq
*
*    show = ('[seq ')
*    loop(v)
*
*show.seq.next
*
*    elem = next(v)                                  :f(show.seq.done)
*    show = (ident(show) '', show ' ') show(elem,,1)
*    lt(size(show),100)                              :s(show.seq.next)
*    out(show ' ')
*    show =                                          :(show.seq.next)
*
*show.seq.done
*
*    setl4.restore(v)
*    show = show ' ]'                                :(show.done)
*
show.set

*   Call _rank_ so entries listed in rank order.

*    set = rank(v)
    show = '{ set'
    loop(v)

show.set.next

    elem = next(v)                                  :f(show.set.done)
    show = show ' ' show(elem,,1)
    lt(size(show),100)                              :s(show.set.next)
    out(show)
    show =                                          :(show.set.next)

show.set.done

    setl4.restore(v)
    show = show ' }'                                :(show.done)

*show.str
*
*    show = show.str(str.text(set))                  :(show.done)
*
show.string

*   Don't quote string that is an integer.

    show = integer(v) v                             :s(show.done)

    show = show.q(v)                                :(show.done)


show.table

    t = convert(v,'array')

show.table.next

    key = t[i = i + 1,1]                            :f(show.done)
    value = t[i,2]

    out(tab show(key)    ' -> ' show(value))
                                                    :(show.table.next)
show.string.quote

    show = '"'  v '"'                               :(show.done)

show.done

    eq(lvl) out(show)
                                                    :(return)

show.end

    define('show.b(e)')                             :(show.b.end)

*   Show value of _e_ as boolean: TRUE or FALSE

show.b

    integer(e) out((ne(e) 'TRUE', 'FALSE'))         :s(return)
    out((differ(e) 'TRUE', 'FALSE'))                :(return)

show.b.end

    define('show.eval(expr)e')                      :(show.eval.end)

*   Show result of evaulating _expr_ as success or fail.

show.eval

    eval(expr)                                      :s(show.eval.success)
    show.eval = 'failure'                           :(show.eval.finis)

show.eval.success
   
    show.eval = 'success'

show.eval.finis

    out('eval ' expr ' ' show.eval)                 :(return)

show.eval.end

    define('show.line(line)')                       :(show.line.end)

*   Show a line with spaces replaced by '.'

show.line

    show.line = replace(line,' ','.')               :(return)

show.line.end

    define('show.lines(lines,title)i,line,titled')  :(show.lines.end)

*   Show the lines that are not empty in an array of lines

show.lines

    title  = 'lines' (differ(title) ' ' title, '')
    out(itle)

show.lines.n

    line = lines[add1(.i)]                          :f(return)
    empty(line)                                     :s(show.lines.n)
    differ(titled)                                  :s(show.lines.titled)

*   Do not list header unless at least one non-empty line

    out('    123456789012345')
    titled = 1

show.lines.titled

    out(lpad(lineid(i),2) ' ' replace(line,' ','.')) :(show.lines.n)

show.lines.end

    define('show.q(str)')                           :(show.q.end)

*   Show string _str_ enclosed in quotes

show.q

    str break("'")                                  :s(show.q.single)

*   Here if string does not contain a single quote, so use single quotes around it.

    show.q = "'" str "'"                            :(return)

show.q.double

*   Here if string contains single quote, so use double quotes around it.

    show.q = '"' str '"'                            :(return)

show.q.end

    define('show.words(words)i,pos')                :(show.words.end)

*   Show results of words() call.

show.words

    pos = words[add1(.i),1]                         :f(return)
    out('words ' lpad(pos,2) ' ' words[i,2])        :(show.words)

show.words.end

    define('subset(a,b)member')                     :(subset.end)

*   Tests if the second set is a subset of the first.

subset

    gt(set.size(b),set.size(a))                     :s(freturn)
    loop(b)

subset.next

    member = next(b)                                :f(return)
    member(a,member)                                :s(subset.next)f(freturn)

subset.end

    define('this(set)')                             :(this.end)

*   Returns value found in most recent call to next.

this

    this = set.this(set)                            :(return)

this.end

    define('true(e)')                               :(true.end)

*   Tests if operand is true

true

    e = integer(e) +e
    integer(e) ne(e)                                :s(return)
    differ(e)                                       :s(return)f(freturn)

true.end

    define('union(a,b)elem')                        :(union.end)

*   Returns union of sets _a_ and _b_.

union

*   Arrange so set a is the larger 

    ge(set.size(a),set.size(b))                     :s(union.a)
    union = a
    a = b
    b = union

union.a

*   Make copy of a by making copy of a's table.

    union = copy(a)
    loop(b)

union.b

    elem = next(b)                                  :f(return)
    add(union,elem)                                 :(union.b)

union.end

    define('visit(set,expr)')                       :(visit.end)

*   _Visit_ loops over _set and calls _eval_ with argument
*   _expr_  for each of its members.

visit

    loop(set)

visit.next

    this = next(set)                                :f(return)
    eval(expr)                                      :(visit.next)

visit.end

    define('words(str,chars)pat,word')              :(words.end)

*   Return string consisting of the words in _str_.
*   The first character in a word must be a letter, in upper or lower case.
*   The remainder consists of letters, digits and any of the characters
*   in _chars_ if _chars_ is not null.

words

    pat = (ident(chars) setl4.span.word, span(&lcase &ucase '0123456789' chars))
    
words.next

    str setl4.span.spaces = 
    ident(str)                                      :s(words.finis)
    str setl4.any.word                              :s(words.add)

*   Here if not at start of a word, so discard current character  and continue.

    str len(1) =                                    :(words.next) 

words.add

    str pat . word =
    words = words (differ(words) ' ', '') word      :(words.next)

words.finis

    words = new('seq ' words)                       :(return)

words.end

    define('setl4.show(set,label)')                 :(setl4.show.end)

*   Show the fields of an instance of _set_.

setl4.show

                           out('{')
                           out('kind',          set.kind(set))
    differ(label)          out('show: '         str.upper(label))
    ne(set.size(set))      out('size',          set.size(set))
    differ(set.next(set))  out('next',          set.next(set))
    ne(set.low(set))       out('low',           set.low(set))
    ne(set.high(set))      out('high',          set.high(set))
    ne(set.step(set))      out('step',          set.step(set))
    ne(set.max(set))       out('max',           set.max(set))
    differ(set.text(set))  out('#text',         size(set.text(set)))
    differ(set.text(set))  out('text',          set.text(set))
                           out('}')
                                                :(return)
setl4.show.end

    define('setl4.set.size(set)')                   :(setl4.size.end)

*   Return size of operand.

setl4.size

    setl4.size = ident(datatype(set),'string') size(set)    :s(return)
    setl4.size = differ(set.step(set)) (set.high(set) - set.low(set) / set.step(set)) + 1 :s(return)
    setl4.size = set.size(set)                      :(return)

setl4.size.end

    define('setl4.save(s)')                         :(setl4.save.end)

*   Save _next_ and _this_ fields of argument.

setl4.save

    push(setl4.stack,set.next(s))
    push(setl4.stack,set.this(s))                   :(return)

setl4.save.end

    define('setl4.restore(s)')                      :(setl4.restore.end)

*   Restore _next_ and _this_ fields of argument.

    set.this(s) = pop(setl4.stack)
    set.next(s) = pop(setl4.stack)                 :(return)

setl4.restore

    set.this(s) = pop(setl4.stack)
    set.next(s) = pop(setl4.stack)                  :(return)

setl4.restore.end

    define('traceoff()')                            :(traceoff.end)

*   Initiate tracing.

traceoff
    &ftrace = &trace =

    g.scoring = g.tracing = 0
    out('stop TRACING ')

traceoff.end

    define('traceon()')                             :(traceon.end)

*   Initiate tracing.

traceon

    out('start TRACING')
*   &ftrace = &trace = 1500000
    g.scoring = g.tracing = 1
                                                    :(return)
traceon.end

*   SETL4 uses some of the undefined SPITBOL operators for SETL4 functions.

*   Characters available for use by 'opsyn' to associate the character
*   with a function.

*   binary  &  @  #  %  ~
*   unary:  !  %  /  #  =  | /

*   define('setl4.op(ch,proc,n)')                   :(setl4.op.end)
*
**  Use _opsyn_ to define SETL4 operator.
*
*setl4.op
*
*   opsyn(ch,proc,n)                                :s(return)
*   error('fatal problem with opsyn for ' ch ')
*
*setl4.op.end

*   SETL4 binary operators

*    opsyn('&','and',        2)
    opsyn('@','at',         2)
    opsyn('#','filter',     2)
    opsyn('~','member',     2)
*   opsyn('^','or',        2)

*   SETL4 unary operators:

    opsyn('=','this',       1)
    opsyn('|','new',        1)
    opsyn('!','not',        1)
    opsyn('#','setl4.size', 1)
    opsyn('/','split',      1)

*   Use of opsyn for 'and' and 'or' deferred since supporting them requires
*   mucking about with bol4.


*   Utility Functions
*   ---------------

*   In addition to set-theoretic functions SETL4 provides 
*   Gthe following utility functions.

*   even(n)                     Tests if _n_ is even
*   factorial(n)                Returns n!  = n * (n -1) * ... * 1
*   multiple(n,m)               Tests if _n_ is a multiple of _m_
*   number(n)                   Returns _n_ as one or two words if possible, else returns _n_
*   odd(n)                      Tests if _n_ is odd
*   prime(n)                    Tests if _n_ is prime
*   primes(n)                   Returns set of primes less than _n_
*   square.root(n)              Returns integer square root on _n_
*   thousands(s)
*   append(str,w,ch)            Appends _ch_ (or space if _ch_ is null) to _str_, then appends _w_
*   ascii(line)                 Returns the text of line with every ascii character identified
*   datename(date)              Returns string based on current time suitable for use as filename
*   digits()                    Returns list of digits: '0 1 2 .. 9'
*   frequency(str)              Returns map giving frequency of characters in _str_
*   letters()                   Returns list of letters : 'a b c ... z A B ... Z''
*   less(str,sub)               Removes the first instance of each character in _sub_ from _str_,
*   lletters()                  Returns list of lower case letters : 'a b c ... z'
*   lower(s)                    Returns _s_ with upper case letters replaced by lower case equivalent
*   out(text1,text2,text3)      Outputs _text1_, then _text2_ enclosed in '[]' if _text2_ not null,
*                               then _text3_ if _text3_ is not null.
*   prefix(str,pre)             Takes a list of space-separated words in _str_ and prefixes each
*                               with the string _pre_
*   reader(filename,expr)       Returns sequence of lines in file _filename_, using _expr_ (if given)
*                               to filter out lines to be ignored.
*   reader(str,delim)           Like _reader(filename..)_ but reads lines from a string with lines
*                                   separated by delimiter _delim_
*   slice(str,first,last)       Same as SPITBOL _substr(str,first,last)_
*   tokens(line)                Returns sequence of the tokens in _line_
*   uletters()                  Returns list of upper case letters : 'A B C ... Z''
*   upper(s)                    Returns _s_ with lower case letters replaced by upper case equivalent
*   writer(lines)               Writes sequence _lines_ to standard output.

    define('cardinal(n,word)')           :(cardinal.end)

*   If _n_ is one, returns 'one' followed by _word_.
*   Otherwise returns _number(n)_ followed by _word_ and the letter 's'.

cardinal

    cardinal = (eq(n,1) 'one ' word, number(n) ' '  word 's'):(return)

cardinal.end

    define('even(n)')                           :(even.end)

*   Tests if _n_ is even.

even

    eq(remdr(n,2))                              :s(return)f(freturn)

even.end

    define('factorial(n)')                      :(factorial.end)

*   Returns n! = n*(n-1)*(n-2) ... 1

factorial

    factorial = (eq(n,1) 1, n * factorial(n -1))    :(return)

factorial.end

    define('multiple(n,m)')                      :(multiple.end)

*   Tests if _n_ is a multiple of _m_.

multiple

    multiple = eq(remdr(n,m))                   :s(return)f(freturn)

multiple.end

    define('number(n)')                          :(number.end)

*  If _n_ can be represented as a string of one or two words then return that string. Otherwise return _n_.

number
    error('number not implemented, quitting.' )
    number = eq(n) 'zero'                       :s(return)
    number = g.numbers[n]
    differ(number)                              :s(return)
    number = n                                  :(return)

number.end

    define('odd(n)')                            :(odd.end)

*   Tests if _n_ is odd.

odd

    odd = ne(remdr(n,2))                        :s(return)f(freturn)

odd.end

    define('prime(n)iter,this')                 :(prime.end)

*   Tests if _n_ is a prime integer.

prime

    n = integer(n) +n
    eq(n,2)                                     :s(return)
    even(n)                                     :s(freturn)
    iter = new('iter 3 ' square.root(n)  ' 2')
*    show(iter)
    loop(iter)

prime.loop

    this = next(iter)                           :f(return)
    multiple(n,this)                            :s(freturn)f(prime.loop)

prime.end

    define('primes(n)iter,this')                :(primes.end)

*   Returns set of primes less than _n_.

primes

    primes = new('set')
    iter = new('iter 2 ' (n - 1))
    loop(iter)

primes.loop
   
    this = next(iter)                           :f(return)
    prime(this) add(primes,this)                :(primes.loop)

primes.end

*    define('primes(n)')                     :(primes.end)
*
**   _primes(n)_ returns set of primess less than _n_.
*
*primes
*    out('primes ' n,primes(n))
*
*    primes = filter(new('iter 2 ' (n - 1)),'prime(this') :(return)
*
*primes.end

    define('square.root(n)')                    :(square.root.end)

*   Returns square root of integer _n_, rounded up.
 :(end)

square.root
   
    square.root = int(sqrt(n)) + 1              :(return)

square.root.end

    define('thousands(s)n')                     :(thousands.end)

*   Format s with comma's every three digits from right.

thousands

    n = size(s)
    thousands = le(n,3) s                       :s(return)
    thousands = thousands(substr(s,1,n - 3)) ',' substr(s, n - 2, 3):(return)

thousands.end

    define('append(str,w,ch)')                  :(append.end)

*   _Appends _ch_, or ' ' if _ch_ is null, to _str_ and then appends _w_.

append

    append = str (ident(str) w, (ident(ch) ' ' , ch) w):(return)

append.end

    define('ascii(line)c,n,name,nul,num,pos')   :(ascii.end)

*   Return the text of line with every ascii character identified.

ascii

    true(ascii.initialized)                   :s(ascii.initialized)

*   Here to initialize the needed maps.
    
    ascii.init()
    ascii.initialized = true;

ascii.initialized

    nul = substr(&alphabet,1,1)

ascii.next

*   Add space after previous character if result not null.

    ascii = differ(ascii) ascii ' '
    c = substr(line,1,1)                            :f(ascii.done)
    ident(c,nul)                                    :s(ascii.null)
    line any('0123456789')                          :s(ascii.integer)
    line any(&lcase &ucase)                         :s(asciiletter)
    line ' '                                        :s(ascii.space)

*   Check for control character (code <=26)

    &alphabet break(c) . pos                        :f(ascii.other)
    pos = size(pos)
    gt(pos,26)                                      :s(ascii.other)
*TODO here fix g. usage
    ascii = ascii g.ascii.name[c] '(^'
               substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',pos,1) ')'
    line len(1) =                                   :(ascii.next)

ascii.integer

    line span('0123456789') . text =
    ascii = ascii  text                     :(ascii.next)

asciiletter

    line span(&lcase &ucase) . text =
    ascii = ascii  text                     :(ascii.next)

ascii.null

    ascii = ascii 'NUL'                     :(ascii.next)

ascii.other

*   Here if none of the other cases apply, so just list the ascii name.

    ascii = ascii ascii.name[c]
    line = substr(line,2)                           :(ascii.next)

ascii.space

    line span(' ') . text =

    ascii =  ascii 'SPC'
    ascii = gt(size(text),1) ascii 'SPC*' size(text)
    ascii = ascii
                                                    :(ascii.next)
ascii.done

    ascii = trim(ascii)                     :(return)

ascii.end

    define('ascii.init(init)entry,name,value') :(ascii.init.end)

*   Initialize maps for use by _ascii_.
*   Since space (ascii 32) prints as space, use the name SPC for 32.

ascii.init


    ascii.init = new('map '
.      '0:NUL 16:DLE 32:SPC 48:0 64:@ 80:P  96:` 112:p '
.      '1:SOH 17:DC1 33:!   49:1 65:A 81:Q  97:a 113:q '
.      '2:STX 18:DC2 34:"   50:2 66:B 82:R  98:b 114:r '
.      '3:ETX 19:DC3 35:#   51:3 67:C 83:S  99:c 115:s '
.      '4:EOT 20 DC4 36:$   52:4 68:D 84:T 100:d 116:t '
.      '5:ENQ 21:NAK 37:%   53:5 69:E 85:U 101:e 117:u '
.      '6:ACK 22:SYN 38:&   54:6 70:F 86:V 102:f 118:v '
.      "7:BEL 23:ETB 39:'   55:7 71:G 87:W 103:g 119:w "
.      '8:BS  24:CAN 40:(   56:8 72:H 88:X 104:h 120:x '
.      '9:HT  25:EM  41:)   57:9 73:I 89:Y 105:i 121:y '
.      '10:LF 26:SUB 42:*   58:  74:J 90:Z 106:j 122:z '
.      '11:VT 27:ESC 43:+   59:; 75:K 91:[ 107:k 123:{ '
.      '12:FF 28:FS  44:,   60:< 76:L 92:\ 108:l 124:| '
.      '13:CR 29:GS  45:-   61:= 77:M 93:] 109:m 125:} '
.      '14:SO 30:RS  46:.   62:> 78:N 94:^ 110:n 126:~ '
.      '15:SI 31:US  47:/   63:? 79:O 95:_ 111:o 127:DEL ')

    ascii.name = .map(efault.size)
    ascii.value = .map(efault.size)
    loop(ascii.init)

ascii.init.next

    entry = setl4.l.next(ascii.init)                  :(ascii.init.finis)
*   Correct entry for 0 to be NUL, the NUL character
    ascii.name[substr(&alphabet,+v + 1,1)] = name
    ascii.value[name] = +value                  :(ascii.init.next)
    ascii.name[] = 'NUL'
    ascii.value['NUL'] = 0
    ascii.name[' '] = 'SPC'
    ascii.value['SPC'] = 32                     :(return)

ascii.init.end

    define('datename(date)s')                  :(datename.end)

*   Convert date to form with no spaces, just dashes, to be
*   suitable for use as part of a file name.

datename

    datename = replace(date,' :/','---')
    datename = substr(datename,12,8) '-' substr(datename,1,10)
                                                   :(return)
datename.end

    define('digits()str,ch')                   :(digits.end)

*   Return string consisting of the digits 0 .. 9 separated by a space.

digits

    digits = 
    str = '0123456789'
    
digits.next

    str len(1) . ch =                               :f(return)
    digits = append(digits,ch)                      :(digits.next)

digits.end

    define('frequency(str)')                        :(frequency.end)

*   Return map from the characters in a str to the number of times
*   each occurs in the .

frequency

    frequency = new('map')

frequency.next

    str len(1) . c =                                :f(frequency.end)
    setl4..put(frequency,c,setl4..get(frequency,c) + 1)   :(frequency.next)

frequency.end

    define('less(str,sub)before,after')             :(less.end)

*   Removes the first instance of each character in _sub_ from _str_,
*   where _sub_ is a substr of _str_.

less

    ident(str)                                      :s(return)
    less = str

less.ch
    sub len(1) . ch =                               :f(return)
    less break(ch) . before  ch rem . after
    less = before after                             :(less.ch)

less.end

    define('lletters()str,ch')                      :(lletters.end)

*   Returns string consisting of the lower case letters in _str_ separated by a space.

lletters

    lletters = 
    str = &lcase
    
lleters.next

    str len(1) . ch =                               :f(return)
    lletters = append(lletters,ch)                  :(lleters.next)

lletters.end

    define('letters()str,ch')                       :(letters.end)

*   Returns string consisting of the upper and lower case letters separated by a space.

letters

    letters = 
    str = &lcase &ucase
    
letters.next

    str len(1) . ch =                               :f(return)
    letters = append(letters,ch)                    :(letters.next)

letters.end

    define('lower(s)')                              :(lower.end)

*   Converts argument to lower case.

lower

    lower = replace(s,&ucase,&lcase)                :(return)

lower.end

    define('prefix(str,pre)word')                   :(prefix.end)

*   Prefix takes a list of space-separated words _str_ and prefixes each
*   with the str _pre_.

prefix

    str = str ' ';* so each word followed by space

prefix.1

    str break(' ') . word span(' ')  =              :f(return)
    add1(.prefixcount)
    prefix = append(prefix, pre word,'A')           :(prefix.1)

prefix.end

    define('uletters()str,ch')                      :(uletters.end)

*   Returns string consisting of the upper case letters separated by a space.

uletters

    uletters = 
    str = &ucase
    
ulleters.next

    str len(1) . ch =                               :f(return)
    uletters = append(uletters,ch)                  :(ulleters.next)

uletters.end


*   Lines
*   -----

*   Lines can be just strings or, in some cases, a line is represented by a pair:

    data('line(mark,text)')

*   where

*           _mark_ is defined by the value returned by an instance
*           of the _eval_ function ...

*           _text_ is the text of the line.

*   For example, the _reader_ function reads a file and returns a
*   sequence of _lines_.

    define('reader(filename,expr)line,mark')        :(reader.end)

*   _Reader_ returns a sequence of the lines in the file specified by _filename_.
*   If _expr_ is not null, then _eval_ is called just after each
*   line is read, with the variable _pair_ set to the associated pair.
*   If _eval_ fails the line is skipped.  Otherwise returns a new pair
*   to be entered in the input seq.

reader

    differ(filename) input(.file,g.channel.temp,filename):s(reader.opened)
    out('unable to open reader file ' filename '.') :(freturn)

reader.opened

    reader = map(1024)

reader.next

    setl4..add(map, (ident(filename) input, file)) :f(reader.eof)s(reader.next)

reader.eof

*   Here at end of file; close temporary file if one was needed.

    differ(filename) endfile(g.channel.temp)        :(return)

reader.end

    define('reader.str(str,delim)line')             :(reader.str.end)

*   Returns a sequence of the lines in _str_,
*   where the delimiter character _delim_ is used to mark
*   the end of a line. One intended use of _reader.str_
*   is to assist in the construction of test programs.

reader.str

    delim = ident(delim) '/'
    reader.str = setl4..seq()

reader.str.next

    str break(delim) . line delim =                 :f(return)
    add(reader.str,line)                            :(reader.str.next)

reader.str.end

    define('slice(str,first,last)')                 :(slice.end)

slice

    slice = substr(str,first,last)                  :(return)

slice.end


    define('split(str)word')                        :(split.end)

*   Returns sequence of the words in stirng _str_.
*   Words are separated by whitespace: one of more consecuture spaces
*   or tabs.

split

    split = new('seq')
    line =  line ' '

split.next

    line break(' ') . word ' ' =                    :f(return)
    set.add(split,word)                             :(split.next)

split.end

*   Tokens: Lexical Scanning
*   ------------------------


*   A token is represented as an instance of the datatype _token_ as follows:

    data('token(lineno,ndx,type,text)')

*   where:
*           _lineno_        is the line number within the file;
*           _ndx_           is the index of the first character of the
*                           token in the line;
*           _type_          is the token's type, as described below; and
*           _text_          is the text of the token.

*   The type is represented by a single character, as follows:

*           'c'             comment, indicated by asterisk (*) in the first column.
*                           The text consists of the entire line.

*           'i'             integer, consisting of one or more digits ('0123456789')

*           'l'             left opener, one of '(<[{'

*           'p'             punctation, one of '.;,?!', or single quote ('),
*                           or double quote ("),

*           'o'             other printable character, one of '~@#$%^&*_-+=`'.

*            'q'            quoted str, starting witn '"', and continuing
*                           to the next instance of the opening quote character.

*           'r'             right closer, one of ')>]}'

*           's'             space, consistine of one or more spaces (spaces)

*           't'             tab character

*           'u'             unprintable character, for example control-k

*           'w'             word, consisting of one of more letters in
*                           upper or lower case or "'" or "_".

*   The longest possible str meeting the rules is used when building a token.
*   For example, 'abc' is just the word 'abc', not 'a' followed by 'bc', and so forth.

*   It is recommended that the tab character NOT be used as an abbreviation for
*   one or more spaces in the input file. If tabs are used, then _pos_ is ill-defined.
*   If tabs are not used, then _pos_ indicates the true position in the line of
*   the first character of the token, and so error messages and references to the
*   token will be exact.  For example, _pos_ could be used to indicate where to give
*   emphasis to a token by underlining it, or enclosing it in '_' to generate
*   markdown format, and so forth.

    define('tokens(line)type,pos,text,lineno')  :(tokens.end)

*   Strtokens scans _line_ and returns a table of the tokens in the line.
*   The table has keys from 1..n, where _n_ is the number of tokens found.

*   This function is an instance of what is called a lexiical scanner, or tokenizer,
*   which is the first stage in a programming language compiler, or for any program
*   that processes text files with a specified structure.

tokens

    tokens = setl4..seq()
    line '*'                                        :f(tokenl.next)
    type = 'c'
    text = line
    line =                                          :(tokenl.new)

tokenl.next

    line ' '                                        :s(tokens.space)
    line any('0123456789')                          :s(tokens.integer)
    line any('(<[{')                                :s(tokenl.left)
    line any('.;,?!')                               :s(tokens.punctuation)
    line '"'                                        :s(tokens.quote)
    line any('~@#$%^&*_-+=')                                        :s(tokens.other)
    line any(')>]}')                                :s(tokens.right)
    line char(9)                                    :s(tokens.tab)
    line any(&lcase &ucase)                         :s(tokens.word)

*   Here for unprintable
                                                    :(tokens.unprintable)

tokens.integer

    type = 'i'
    line span('0123456789') . text =                :(tokenl.new)

tokens.punctuation

    type = 'p'                                       :(tokens.character)

tokens.other

    type = 'o'                                      :(tokens.character)

*tokens.other

    type = 'o'                                      :(tokens.character)

tokens.quote

    type = 'q'
    line '"' break('"') . text '"' =
    text = '"' text '"'                             :(tokenl.new)

tokens.right

    type = 'r'                                      :(tokens.character)

tokens.space

    type = 's'
    line span(' ')  . text =                        :(tokenl.new)

tokens.tab

    type = 't'                                      :(tokens.character)

tokens.word

*FIX*
    type = 'w'
    line span(&ucase &lcase "_" "'") . text =       :(tokenl.new)

tokens.character

*   Here if token is single character.

    line len(1) . text                              :(tokenl.new)

tokenl.new

    setl4..add(tokens,token(lineno,pos,type,text)) :(tokenl.next)

tokens.end

    define('upper(s)')                              :(upper.end)

*   Convert argument to upper case.

upper

    upper = replace(s,&lcase,&ucase)                :(return)

upper.end

    define('writer(lines)')                         :(writer.end)

*   Writes the lines in the sequence _lines_ to standard output.

writer

    loop(lines)

writer.next

    output = next(lines)                            :f(return)s(writer.next)

writer.end

*   Here endeth the SETL4 code.
*   May you fare well using it.

