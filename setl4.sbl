*       Copyright 2017, David Shields
*       Licensed under the MIT license.


*       Boolean Logic
*       -------------

*       Boolean logic is a form of algebra with just two values: true and false.

*       In SPITBOL, the algebra is defined on strings: the null string is "false"
*       and all other strings are "true."
*       IDENT is used to test for true, DIFFER for false. Both signal their
*       results by success (true) or failure (false).

*       In SETL4, the algebra is defined on the integers: zero is "false"
*       and all other integers are "true."
*       _eq_ is used to test for false, _ne_ for true.


        false = 0
        true = 1


        define('false(e)')                              :(false.end)

*       Returns true if its argument is false, or else false.

*FALSE*
false

        false = (eq(e) true, false)                     :(return)

false.end

        define('true(e)')                              :(true.end)

*       Returns true if its argument is true, or else false.

*TRUE*
true

        true = (ne(e) true, false)			:(return)

true.end

        define('and(b1,b2)')                		:(and.end)

*       Returns true iff (if and only if) both arguments are true.

*AND*
and

	and = (true(b1) true(b2) true, false)		:(return)

and.end

        define('or(b1,b2,b3,b4,b5,b6)')                 :(or.end)

*       Returns true iff (if and only if) at least one argument is true.

*OR*
or

	or = (true(b1) true, true(b2) true, false)	:(return)

or.end

*       Integer Functions
*       -----------------

*	SETL4 extends the integer operations provided by SPITBOL by
*	providing the following integer functions:

*                even(n)         true iff n is even.
*                factorial(n)    returns the value of n! = n * (n - 1) * ... * 
*                odd(n)          true iff n is odd.
*                prime(n)        true iff n is a prime number
*		 square.root	 square root rounded up to next integer.


        define('even(n)')                                  :(even.end)

*       Returns true iff n is even.

*EVEN*
even

        even = (eq(remdr(n,2)) true,false)               :(even.end)

even.end

	define('factorial(n)')				:(factorial.end)

*	Returns n! = n*(n-1)*(n-2) ... 1

factorial

	factorial = (eq(n,1) 1, n * factorial(n -1))	:(return)

factorial.end

        define('odd(n)')                           	:(odd.end)

*       Returns true iff n is odd.

*ODD*
odd

        odd = (ne(remdr(n,2)) true,false)               :(odd.end)

odd.end

	
        define('prime(n)')                                :(prime.end)

*       Returns true iff n is prime.

*PRIME*
prime


        terminal = 'prime not implemented'             :(error)
        prime = (eq(remdr(n,2)) true,false)             :(prime.end)

prime.end

	define('square.root(n)')			:(square.root.end)

*	Returns square root of integer _n_, rounded up.

square.root

	square.root = convert(sqrt(convert(n,'real')),'integer') + 1 :(return)

square.root.end

*	Strings (TBSL)
*	-------

*	data('str(str.name,str.index,str.key,str.size,str.max,str.next,str.text)')

*       Sets
*       ____
        

*	SETL4 extends SPITBOL by adding the datatype _set_ to represent finite sets.
*	Several additional datatypes based on sets are also provided; each is identified by its kind.

*	A set is defined by the following datatype:

	data('set(set.name,set.index,set.key,set.size,set.max,set.next)')

*	where

*		_name_		a string that may be specified when a compound object
*				is created, and which will then be listed when the
*				object is displayed.

*		_index_		a SPITBOL table used to map the integer id assigned each element
*				to the value of the element.

*		_key_		a SPITBOL table, used only for maps, to permit iteration 
*				and other set operations, in constant time.

*		_size_		the current number of members.

*		_max_		the maximum id assigned an element of the set.

*		_next_		the last value returned by the _next_ primitive when iterating
*				over a set.

*	Note that the null value is not allowed as an element of a set, or the value of a map entry,
*	but can be used as the value of an element in a sequence.

*	The _key_ table is needed to provide constant time bounds for iterating over a set, in
*	all of its forms.

*	Sequences are currently implemented using SPITBOL arrays, extending
*	the array length dynamically as needed.

*	New elements can be added to a sequence using the 'push' primitive, and the most
*	recent element can be deleted using the 'pop' primitive.


*	New instances of compound objects are created by set.new

*		set.new(init,name)

*	where

*		_type_ is the compound type: set, map, etc.

*		_init_ is an initialization value, usually an integer or string

*		_name_ is a string that is displayed when showing the object.


*	Sequences
*	---------

*	SETL4 provides a kind of set known as a sequence.

*	A sequence of length _n_ is a map on the integers from 1..n.

*	SETL4 sequences are implemented using SPITBOL arrays, with the array
*	length being adjusted as necessary.

	data('sequence(seq.name,seq.index,seq.key,seq.size,seq.max,seq.next)')

*	Pairs
*	-----

*	A _pair_ joins two values together. 

        data('pair(first,second)')


*       Maps: Functions
*       --------------

*       In mathematics, a map, or function, is a set of ordered pairs that define a relation between
*       the first element of a pair, called the domain value, and the second value of the pair, called
*       the range value.

*       SETL4 represents a map entry as follows:

        data('entry(key,value)')

*	where _key_ is the key, and _value_ is the value of the map for _key_.

	data('map(map.name,map.index,map.key,map.size,map.max,map.next)')

*       The SPITBOL datatype TABLE provides the machinery to implement maps.
*       SPITBOL provides no way to determine the number of domain values, or size, of
*       a map other than converting the map to an array, which is only way to iterate
*       over a map.

*	Each new entry added to a map is given an integer id, starting with one.
*	The field _map.index_ maps the id's to the associated entries.

*	The field _map.key_ maps the keys used in entries to their associated id's, and
*	is needed to allow constant-time access to map entries, both when retrieving
*	values and when iterating over the map.


*       Sequences.
*       ----------

*       A sequence, or 'seq', is a map defined on the positive integers: 1,2, ... ,n.
*	Sequences are implemented using SPITBOL arrays, which are grown in size
*	when adding a new element for which no remains in the array.


*	Lines
*	-----

*	Lines can be just strings or, in some cases, a line is represented by a pair:

	data('line(mark,text)')

*	where

*		_mark_ is defined by the value returned by an instance
*		of the _eval_ function ...

*		_text_ is the text of the line.

*	For example, the _reader_ function reads a file and returns a sequence of _lines_.

*	Operator Extensions
*	-------------------

*	Setl4 uses the _opsyn_ extension feature of SPITBOL to:

*	 define '#' as a unary operator that returns the size of its operand, and 

*	define '@' as a binary operator 'obj @ expr' that computes the 
*	'reduction' of the compound object _obj_ to only those members 
*	for which _eval(expr)_ is true, that is, the members such
*	that _eval(expr)_ is true.

*	Define '#' as unary operator that returns size of its operand.

	define('setl4.size(s)dt')			:(setl4.size.end)

*	Return size of operand.

setl4.size
	
	dt = datatype(s)
	setl4.size = ident(dt,'map')	  set.size(s)		:s(return)
	setl4.size = ident(dt,'seq')	  seq.size(s)		:s(return)
	setl4.size = ident(dt,'set')	  set.size(s)		:s(return)
	setl4.size = ident(dt,'str')	  str.size(s)		:s(return)
	output = 'setl4.size unknown type ' dt :(end)

setl4.size.end

	opsyn('#','setl4.size',1)

*	According to Paul Halmos, in his book "Naive Set Theory," 
*	a major principle of set theory, often referred to by its 
*	German name _Aussonderungsaxiom_, is the Axiom of Specification:

*	To every set _A_ and every condition _S(x)_ there corresponds
*	a set _B_ whose elements are exactly those elements _x_ of _A_
*	for which _S(x)_ holds.

*	In SETL4 we say that the expression '_A_ @ _S_' "reduces"
*	_A_ by _S_. This can also be read as 
*		"the subset of _A_ such that _S_ is true"
*	or
*		"that part of _A_ AT which _S_ is true"

	define('setl4.reduce(obj,expr)member,text,i')		:(setl4.reduce.end)

*	Returns that part of compound object _obj_ for which _expr_ is true.

setl4.reduce

	member = datatype(obj)
	ident(member,'map')				:s(setl4.reduce.map)
	ident(member,'seq')				:s(setl4.reduce.seq)
	ident(member,'set')				:s(setl4.reduce.set)
	ident(member,'str')				:s(setl4.reduce.str)

setl4.reduce.map
	setl4.reduce = map.new(#obj)
	loop(obj)

setl4.reduce.map.next

	member = next(#obj)				:f(return)
	member = eval(expr)				:f(setl4.reduce.map.next)
	eq(member)					:s(setl4.reduce.map.next)
	map.add(setl4.reduce,member)			:(setl4.reduce.map.next)

setl4.reduce.set

	setl4.reduce = set.new(#obj)
	loop(obj)

set4.reduce.set.next

	member = next(#obj)				:f(return)
	member = eval(expr)				:f(setl4.reduce.set.next)
	eq(member)					:s(setl4.reduce.set.next)
	set.add(setl4.reduce,member)			:(setl4.reduce.set.next)


setl4.reduce.seq

	setl4.reduce = seq.new(#obj)
	loop(obj)


set4.reduce.seq.next

	member = next(#obj)				:f(return)
	member = eval(expr)				:f(seql4.reduce.seq.next)
	eq(member)					:s(seql4.reduce.seq.next)
	seq.add(seql4.reduce,member)			:(setl4.reduce.seq.next)

setl4.reduce.str

	setl4.reduce = str.new(#obj)
	text = str.text(obj)


set4.reduce.str.next

	member = next(#obj)
	text len (1) . member =				:f(return)
	member = eval(expr)				:f(strl4.reduce.str.next)
	eq(member)					:s(strl4.reduce.str.next)
	str.add(strl4.reduce,member)			:(setl4.reduce.str.next)

*setl4.reduce.str (orig. form)

	obj len(1) . member =				:f(return)
	member = eval(expr)				:f(setl4.reduce.string)
	eq(member)					:s(setl4.reduce.string)
	setl4.reduce = setl4.reduce  c			:(setl4.reduce.string)


*	Append c to result.

setl4.reduce.end

	opsyn('@','setl4.reduce',2)

*TODO : use '&' for 'and', and '|' for or, after not allowing '|' for exponentiation
*tODO	use  unary '=' for iteration, eg '=s' for next element in s.
*TODO;	Use  x ~ S for x is member of S.


	define('setl4.member(x,s)dt')			:(setl4.member.end)

*	Tests if _x_ is a member of _s_, where _s_ is a map, seq, set, or str.

setl4.member

	dt = datatype(s)
	eq(dt,'map')					:s(setl4.member.map)
	eq(dt,'seq')					:s(setl4.member.seq)
	eq(dt,'set')					:s(setl4.member.set)
	eq(dt,'str')					:s(setl4.member.str)
	output = 'setl4.member unsupported datatype ' dt ', quitting.' :(end)

setl4.member.map

	output = "'x in map' not yet supported, quitting." :(end)

setl4.member.seq

	setl4.member = seq.in(x,s.)			:(return)

setl4.member.set

	setl4.member = set.in(x,s.)			:(return)

setl4.member.str

	differ(datatype(x),'string')			:s(return)

*	Though could allow _x_ to be more than one character, and so
*	look for substring of s, for now required that _x_ be single character.

	gt(size(x),1)					:s(return)
	s break(x)					:f(return)
	setl4.member = true				:(return)

setl4.member.end

	opsyn('~','setl4.member',2)


	define('setl4.next(obj)dt,kind')				:(setl4.next.end)

*	Returns next member in interation over compound object _obj_.

setl4.next

	dt = datatype(obj)
	ident(dt,'map')					:(setl4.next.map)
	ident(dt,'seq')					:(setl4.next.seq)
	ident(dt,'set')					:(setl4.next.set)
	ident(dt,'str')					:(setl4.next.str)
	output = 'unsupported kind for setl4.next ' kind ', quitting.' :(end)

setl4.next.seq

	seq.next(obj) = seq.next(obj) + 1
	gt(seq.next(obj),seq.size(obj))	:s(freturn)
	setl4.next = seq.next(obj)			:(return)

setl4.next.set

	set.next(obj) = set.next(obj) + 1
	gt(set.next(obj),set.max(obj))	:s(freturn)

*	need to account for gaps due to deletion in s

	setl4.next = set.index(obj)[set.next(obj)] 
	ident(setl4.next)				:s(setl4.next.set)f(return)


setl4.next.str
	
	output = 'next on str's not yet supported, quitting.' :(end)

setl4.next.end

*	Use = as unary operator to yield value of next when iterating.

	opsyn('=','setl4.next',1)

	define('exists(obj,expr)member')		:(exists.end)

*	Determines if there is an element in _obj_ such that _eval(expr)_ is true.
*	If found, exists succeeds and returns the element found. 
*	Otherwise, exists fails.

exists

	loop(obj)

exists.loop

	element = next(obj)				:f(freturn)
	false(eval(expr))				:s(exists.loop)
	exists = element				:(return)

exists.end

	define('forall(obj,expr)member')		:(forall.end)

*	Determines if _expr_ is true for all the members of _obj_.
*	Returns true if so. Otherwise fails and returns the element
*	found for which _expr_ was not true as the value.

forall

	loop(obj)

forall.loop

	forall = next(obj)				:f(forall.done)
	true(eval(expr))				:s(forall.loop)
	forall = element				:(freturn)

forall.done
	
	forall = true					:(return)

forall.end

	define('map.copy(map)')				:(map.copy.end)

*	Returns a copy of a map. Both the fields and the
*	tables in the map are copied.

map.copy

	map.copy = copy(map)
	map.index(copy) = copy(max.index(map))
	map.key(copy) = copy(max.key(map))		:(return)

map.copy.end

        define('map.domain(map))')			:(map.domain.end)

*       Return set with the keys in _map_.

map.domain

	map.domain = set.new(#map,map.name(map))
        loop(map)

map.domain.next

        set.add(map.domain,key(map.next(map)))		:s(map.domain.next)f(return)

map.domain.end

	define('map.equal(a,b)entry,key,value')		:(map.equal.end)

*	Test two maps for equality. 

*	Two maps are equal if they have the same size and the value 
*	of the first map for each element in its domain is the same 
*	as the value of the second map for the corresponding element.

map.equal

	map.equal = ne(#a,#b) false			:s(return)

*	Two maps are equal iff each is a subset of the other.

	map.equal = and(map.subset(a,b),map.subset(b,a))	:(return)

map.equal.end
	
	define('map.eval(map,s)entry,pair,map.apply.result')	:(map.eval.end)

*	_map.eval returns the map obtained by evaluating _eval(s)_ for each
*	pair in the map.  _eval(s) must return a pair. 
*	It is used to construct the next entry in the
*	result map. The entry is ignored if the call to _eval_ fails.

map.eval

	map.eval = map.new(#map,map.name(map))
	loop(map)
	result =

map.eval.next

	entry = map.next(map)				:f(return)
	pair = eval(s)					:f(map.eval.next)
	map.put(map.eval,first(pair), second(pair))	:(map.eval.next)

map.eval.end

        define('map.get(key,val)id')			:(map.get.end)

*       Gets the value of the key _key_ in the map _map_.

map.get
	
	id = map.key(map)[key]	
	ident(id)					:s(return)
        map.get = map.index(map)[id]			:(return)

map.get.end

*	define('map.inverse(map)entry')			:(map.inverse.end)
*
**	_map.inverse_ returns the inverse of a map. The inverse is
**	a map with the keys and values of _map_ reversed. 
*
*map.inverse
*
*	map.inverse = set.new('map',#map)
*	loop(map)
*
*map.inverse.next
*
*	entry = map.next(map)				:f(return)
*	differ(map.get(map.inverse,value(entry)))	:s(freturn)
*	map.put(map.inverse,value(entry), key(entry))  :(map.inverse.next)
*
*map.inverse.end

        define('map.new(init,name)i,key,str,valr')         :(map.new.end)

*       Create a new map.

*       A sequence is a list of values *  separated by spaces.

*               map       _init_ is a list consisting of a list of key/value pairs,
*			
*                               with a colon (:) between the key and value.

map.new

*	data('map(map.name,map.index,map.key,map.size,map.max,map.next)')

	ouput = 'enter map.new'

        map.new = ident(init) map(name,table(128))           :s(return)
	key = convert(init,'integer')				:f(map.new.keyval)
	map.new = map(name,table(key))			:return)

map.new.keyval
        
        map.new = map(name,table(128))

map.new.keyval.next

        init break(':') . key ':' break(' ') . val span(' ') =	:f(return)
        map.put(map.new,key,val)                        :(map.new.keyval.next)

map.new.end

        define('map.put(map,key,val)v')                 :(map.put.end)

*       Sets the value of the entry for key _key_ in map _map_ to be _val_, 
*       creating a new entry if there is no current entry for _key_.

map.put

	v = map.key(map)[key]
	differ(v)					:s(map.put.value)

*       Here to create new entry in map, and then merge to set new value.

        map.max(map) = map.max(map) + 1
	map.key(map)[key] = map.max(map)	

map.put.value

        map.index(map)[map.key(map)[key]] = entry(key,val)	:(return)

map.put.end

        define('map.range(map))')			:(map.range.end)

*       Return set with the keys in _map_.

map.range

	map.range = set.new(#map,map.name(map))
        loop(map)

map.range.next

        set.add(map.range,value(map.next(map)))		:s(map.range.next)f(return)

map.range.end

        define('map.test(key)')                     	:(map.test.end)

*       Tests if the map _map_ has an entry for _key_.

map.test
	
	map.test = (differ(map.key(map)[key]) true,false) :(return)

map.test.end


	define('mark(line)')		:(mark.end)

*	program to play wordwizard (ww)
*	Use host(0) to give the rank of the puzzle.

*	skip words with wrong length
*	skip words with rank that differs from
*	that of the puzzle.

mark
	ne(size(line),size(g.puzzle))	:s(freturn)
	sig = rank(line)
	differ(rank(line),puzzle.rank) 	:s(return)
	mark = pair(,line)		:(return)
mark.end

        define('number.cardinal(n,word)')                      :(number.cardinal.end)

*       If N is one, returns 'one' followed by WORD.
*       Otherwise returns NUMBER(N) followed by WORD and 'S'.

number.cardinal

        number.cardinal = (eq(n,1) 'one ' word, number(n) ' '  word 's'):(return)

number.cardinal.end

        define('number.number(n)')                             :(number.number.end)

**      If N can be represented as a string of one or two words
**      then return that string. Otherwise return N.

number.number
        number.number = eq(n) 'zero'                           :s(return)
        number.number = g.numbers[n]
        differ(number.number)                                  :s(return)
        number.number = n                                      :(return)
number.number.end

        define('number.thousands(s)n')                         :(number.thousands.end)

*       Format s with comma's every three digits from right.

number.thousands

        n = size(s)
        number.thousands = le(n,3) s                           :s(return)
        number.thousands = number.thousands(substr(s,1,n - 3)) ',' substr(s, n - 2, 3):(return)

number.thousands.end 

        define('out(text1,text2,text3)type1,type2')     :(out.end)

*       Output a line conisting of TEXT1, TEXT2 enclosed
*       in brackets, followed by TEXT3.

*OUT*
out
        output = text1 (differ(text2) '[' text2 ']', '')  (differ(text3) text3, ''):(return)

        differ(text2)                                   :s(out.text2)

*       Here if just text1.

        output = text1                                  :(return)

out.text2

        type2 = dt(text2)
        type3 = dt(text3)
*       output = 'dt(type2) ' dt(type2)
*       output = 'dt(type3) ' dt(type3)
        ident(datatype(text2),'string')                 :s(out.2)
*       output = 'out second argument not integer or string,'
*.      ' but of type ' type2
*.                                              	:(error)

out.2

        ident(type3,'integer')                          :s(out.3)
        ident(type3,'string')                           :s(out.3)

out.3
        type.ex(text3,'string')                         :s(out.ok)
        type.ex(text3,'integer')             	:s(out.ok)
*       output = 'out third argument not integer or string,'
*.      ' but of type ' type3
*.                                               :(error)

out.ok

        output = text1 ' [' text2 ']' text3  	:(return)

out.end

        define('random(n)')                             :(random.end)

*       Return integer uniformly distributed in 1,2,...,n.
*       If n=0 returns real uniformly distributed in the interval [0,1].
*       The Algorithm is based on that in section 16.1 of "Algorithms in SNOBOL4,"
*       James F. Gimpel, John Wiley and Sons, 1976.

*RANDOM*
random

        g.random_var = remdr(g.random_var * 4676, 414971)
        random  = g.random_var / 414971.0
        random = ne(n) convert(random * n,'integer') + 1
                                                        :(return)
random.end

        define('random.seed()s,c')                       :(random.seed.end)

*       Compute seed for random number generator from date and time.

*RANDOMSEED*
random.seed
        g.random_var =
        s = g.date
        s = replace(s,'/:-','   ')

*       Get all the digits in s.

random.seed.loop

        s len(1) . c =                                  :f(random.seed.done)
        ident(c,' ')                                    :s(random.seed.loop)
        g.random_var = g.random_var c                   :(random.seed.loop)

random.seed.done

*       Reverse the seed so digits depending on time come first.

        g.random_var = +reverse(g.random_var    )
                                                        :(return)

random.seed.end


*	Sequences:
*	----------

	define('seq.add(seq,val)')			:(seq.add.end)

seq.add

	seq.add = seq.push(val)				:(return)

seq.add.end

	define('seq.apply(seq,s)value')	:(seq.eval.end)

*	_seq.apply_ returns the sequence obtained by calling _eval_ with argument _s_
*	for each value in the seq. If _apply_ does not fail, the value returned defines
*	the next entry in the new seq.

seq.apply

	seq.apply = seq.new('seq',#seq)
	loop(seq)

seq.apply.next

	next(seq)				:f(return)
	value = eval(s)				:f(seq.apply.next)
	seq.add(seq.apply,value)		:(seq.apply.next)
	
seq.apply.end

	define('seq.extend(seq,len)ara,i')	:(seq.extend.end)

*	Increase length of sequence to be _len_.

seq.extend

	ara = array(len)

seq.extend.copy

	gt(i = i + 1, seq,length(seq))	:s(seq.extend.done)
	ara[i] = seq.array(seq)[i]		:(seq.extend.copy)

seq.extend.done

	seq.length(seq) = len
	seq.array(seq) = ara
							:(return)

seq.extend.end

        define('seq.get(i)')                                  :(seq.get.end)

*       Gets the value of element _i_ in the sequence _seq_

seq.get

        seq.get = seq.index(seq)[i]		:f(freturn)s(return)

seq.get.end

	define('seq.integers(n,name)i')			:(seq.integers.end)

*	Returns sequence of integers in the range 1 .. _n_.

seq.integers

	seq.integers = seq.new(name,n)

seq.integers.next

	gt(i = i + 1, n)			:s(return)
	seq.push(seq,i)				:(seq.indegers.next)

seq.integers.end

        define('seq.new(n,name)i,len') 	        :(seq.new.end)

*       Create a new sequence of length _n_.


seq.new

	n = ident(n) 128
	seq.new = seq(name,array(n))
	seq.length(seq) = n;
						:(return)

seq.new.end

        define('seq.push(seq,val)ara,len')		:(seq.add.end)

seq.push
	
	len = seq.length(seq)
	lt(seq.size(seq),len)				:s(seq.push.room)

*	Here to extend length of array by fifty per cent.

	seq.extend(seq,(3 * len) / 2)

seq.push.room

	seq.size(seq) = #seq + 1
	seq.array(seq)[#seq] = val		:(return)

seq.push.end

        define('seq.range(seq)')                    :(seq.range.end)


*        Return set with the values in _seq_ as its members.


seq.range

        seq.range = set.new('seq',#seq)
        loop(seq)

seq.range.next

        seq.range.add(value(seq.next(seq)))        :f(return)s(seq.range.next)

seq.range.end

        define('seq.put(seq,i,val)v,len')                 :(seq.put.end)

*       Sets the value of element _i_ in the sequence _seq_ to be _val_.

seq.put

	seq.index(seq)[i] = val				:(return)

seq.put.end

	define('set.add(set,elem)max')			:(set.add.end)

*	Add _elem_ to set, unless already present.

set.add

	differ(set.key(set)[elem])			:s(return)
	set.max(set) = set.max(set) + 1
	max = set.max(set)
	set.index(set)[max] = elem
	set.key(set)[elem] = max			:(return) 

set.add.end

	define('set.difference(a,b)elem')			:(set.difference.end)

*	Returns set defined by set of elements of _a_ that are not in _b_.

set.difference
	
	set.difference = a @ 'set.notin(=a,b)'		:(return)

set.difference.end

	define('set.equal(a,b)')			:(set.equal.end)

*	Tests if two sets are equal.
*	Two sets are equal iff each is a subset of the other.

set.equal

	set.equal = and(set.subset(a,b),set.subset(b,a))	:(return)

set.equal.end

	define('set.in(elem,set)')				:(set.in.end)

*	Test if _elem_ is a member of set _set_.

set.in

        set.in = (differ(set.key(set)[elem]) true, false)       	:(return)

set.in.end

        define('set.intersection(a,b)elem')                    	:(set.intersection.end)

*       Returns intersection of sets _a_ and _b_.

set.intersection

	set.intersection = a @ 'set.in(=a,b)'		:(return)
	
set.intersection.end

	define('set.less(set,elem)index,key')			:(set.add.end)

*	Remove _elem_ from set if it is in the set,
*	otherwise do nothing.

set.less

*	Do nothing if element not in set.

	ident(set.key(set)[elem])			:s(return)

*	Here to remove element from set.

	index = set.key(set)[elem]
	set.index(set)[index] =
	set.index(set)[max] = elem
	set.size(set) = set.size(set) - 1
							:(return) 

set.less.end

        define('set.new(kind,init,name)i,key,str,valr')         :(set.new.end)

*       Create a new set.

*	If _init_ is null, use a default value for the table.
*	If _init_ is an integer, use the value for the initial size of the table.
*	If _init_ is a string then treat it as list of initial elements, with their
*	values separated by spaces.

set.new
	output = 'set.new ' init ' name ' name '.'
	ident(init)					:s(set.new.int)
	i = convert(init,'integer')			:s(set.new.int)
	set.new = set(table(128),name)
	init = init ' ' 

set.new.init

	init break(' ') . element ' ' =			:f(return)
	set.add(set.new,element)			:(set.new.init)

set.new.int

	i = ident(init) 128
	set.new = set(table(i),name)			:(return)

set.new.end

        define('set.notin(s,x)')                      	:(set.notin.end)

*       Returns _true_ iff _x_ is is not element in _s_.

set.notin

        set.notin = (ident(set.key(set)[elem]) true, false)       	:(return)

set.notin.end

	define('set.subset(a,b)member')			:(set.subset.end)

*	Tests if _b_ is a subset of _a_.

set.subset

	gt(#b,#a)					:s(return)
	loop(b)

set.subset.next

	member = set.next(b)				:f(set.subset.done)
	set.in(member,a)				:s(set.subset.next)f(return)

set.subset.done

	set.subset = true				:(return)

set.subset.end

        define('set.union(a,b)elem')                   	:(set.union.end)

*       Returns union of sets _a_ and _b_.

set.union

*	Arrange so set a is the larger set.

	ge(#a,#b)					:s(set.union.a)
	set.union = a 
	a = b
	b = set.union

set.union.a

*	Make copy of a by making copy of a's table.

	set.union = set.new('set',,#a)
	set.table(set.union) = copy(set.table(a))

	loop(b)

set.union.b

	elem = set.next(b)				:f(return)
	set.add(set.union,elem)				:(set.union.b)
	
set.union.end

	define('show(v,lvl)i,ent,type,line,hdr')		:(show.end)

*	Show the value of expression _v_.
*	_lev_ is non-zero when called to list member or element of compound object.

*SHOW*
show
	typ = datatype(v)
*	output = 'enter show dt ' typ
							:($('show.' typ))

show.array

	proto = prototype(ara)
	proto break(',')				:s(show.array.2)

*	Here for one dimensional array.

show.array.1
	first = ara[add1(.i)]				:f(show.array.done)
	out(lpad(i,3) tab first)			:(show.array.1)

show.array.2
	first = ara[add1(.i),1]		       	  :f(show.array.done)
	out(lpad(i,3) tab show(first) tab show(ara[i,2])) :(show.array.2)

show.integer

	show = v					:(show.done)

show.map

	loop(v)
	show = (differ(map.name(v)) map.name(v), '') ' {'

show.map.next

	member = map.next(v)				:f(show.done)
	output = 'dt show.map.next ' datatype(member)
	show = ' ' show(member,1)					
	show = show ' ' show(member,1)				
	lt(#show,100)					:s(show.map.next)
	output = show ' '
	show =						:(show.map.next)

show.pair

	show = '{' lineid(num(pair)) ',' "'"
.			replace(line(pair),' ','.') "'" '}'	:(show.done)

show.seq

	loop(v)
	show = (differ(seq.name(v)) seq.name(v), '') ' ['

show.seq.next

	member = seq.next(seq)		:f(show.seq.done)

	show = (ident(show) '[ ', show ' ') show(member,1)					
	show = show ' ' show(member,1)				
	lt(#show,100)					:s(show.seq.next)
	output = show ' '
	show =						:(show.seq.next)

show.seq.done

	show = show ' ]'
							:(show.done)

show.set
	
	output = 'show.set datatype ' datatype(v)
	show = (differ(set.name(v)) set.name(v), '') ' {'
	loop(v)

show.set.next

	member = set.next(v)				:f(show.set.done)
	
*	show = (ident(show,'{') '{ ', show ' ') show(member,1)					
	show = show ' '  show(member,1)					
	lt(#show,100)					:s(show.set.next)
	output = show 
	show =						:(show.set.next)

show.set.done

	show = show ' }'
							:(show.done)
show.string

	v break('"')					:s(show.string.quote)

	show = "'" v "'"			:(show.done)

show.table
	
	t = convert(v,'array')

show.table.next

	key = t[i = i + 1,1]				:f(show.done)
	value = t[i,2]

	output = tab show(key)    ' -> ' show(value)
							:(show.table.next)

show.string.quote

	show = '"'  v '"'				:(show.done)

show.done

	output = eq(lvl) show
						:(return)

show.end

	define('show.line(line)')			:(show.line.end)

*	Show a line with spaces replaced by '.'

*SHOW.LINE*
show.line

	show.line = replace(line,' ','.')		:(return)

show.line.end

	define('show.lines(lines,title)i,line,titled')	:(show.lines.end)

*	Show the lines that are not empty in an array of lines

*SHOW.LINES*
show.lines

	title  = 'lines' (differ(title) ' ' title, '')
	out(itle)

show.lines.n

	line = lines[add1(.i)]			:f(return)
	empty(line)				:s(show.lines.n)
	differ(titled)				:s(show.lines.titled)

*	Don not list header unless at least one non-empty line

	out('    123456789012345')


	titled = 1

show.lines.titled

	out(lpad(lineid(i),2) ' ' replace(line,' ','.')) :(show.lines.n)

show.lines.end

	define('show.words(words)i,pos')		:(show.words.end)

*	Show results of words() call.

show.words

	pos = words[add1(.i),1]			:f(return)
	out('words ' lpad(pos,2) ' ' words[i,2])	:(show.words)

show.words.end


*	Strings
*	-------

*	SETL4 provides additional operations, based on set theory, on strings in the form of "str's".

        define('str.append(str,w,ch)')                      :(str.append.end)

*	_str.append_ str.appends _ch_, or ' ' if _ch_ is null, to _str_
*	and then str.appends _w_.

*STR.APPEND*
str.append

        str.append = (ident(str) w, str (ident(ch) ' ' , ch) w):(return)

str.append.end

        define('str.ascii(line)c,n,name,nul,num,pos')       :(str.ascii.end)

*       Return the text of line with every str.ascii character identified.

*ASCII*
str.ascii
        nul = substr(&alphabet,1,1)

str.ascii.next
        
*       Add space after previous character if result not null.

        str.ascii = differ(str.ascii) str.ascii ' '
        c = substr(line,1,1)                            :f(str.ascii.done)
        ident(c,nul)                                    :s(str.ascii.null)
*       output = 'str.ascii c[' c ']'
        line any('0123456789')                          :s(str.ascii.integer)
        line any(&lcase &ucase)                         :s(str.ascii.letter)
        line ' '                                        :s(str.ascii.space)

*       Check for control character (code <=26)

        &alphabet break(c) . pos                        :f(str.ascii.other)
        pos = size(pos) 
*       output = 'pos of [' c '] is [' pos ']'
        gt(pos,26)                                      :s(str.ascii.other)
        str.ascii = str.ascii g.str.ascii.name[c] '(^'  substr('ABCDEFGHIJKLMNOPQRSTUVWXYZ',pos,1) ')' 
        line len(1) =                                   :(str.ascii.next)

str.ascii.integer

        line span('0123456789') . text =
*       output = 'str.ascii num [' text ']'
        str.ascii = str.ascii  text                             :(str.ascii.next)

str.ascii.letter

        line span(&lcase &ucase) . text =
*       output = 'str.ascii letter [' text ']'
        str.ascii = str.ascii  text                             :(str.ascii.next)

str.ascii.null

        str.ascii = str.ascii 'NUL'                             :(str.ascii.next)

str.ascii.other
                
*       Here if none of the other cases apply, so just list the str.ascii name.

        str.ascii = str.ascii g.str.ascii.name[c]                   
        line = substr(line,2)                           :(str.ascii.next)

str.ascii.space

        line span(' ') . text =
*       output = 'str.ascii space [' text ']'
        
        str.ascii =  str.ascii 'SPC'
        str.ascii = gt(size(text),1) str.ascii 'SPC*' size(text)
        str.ascii = str.ascii 
                                                        :(str.ascii.next)
str.ascii.done

        str.ascii = trim(str.ascii)                             :(return)

str.ascii.end

        define('str.ascii.init(init)name,val')              :(str.ascii.init.end)

*       Initialize maps for use by _str.ascii_.
*       Since space (str.ascii 32) prints as space, use the name SPC for 32.

*ASCII.INIT*
str.ascii.init


        str.ascii.init = map.map(
.       '0:NUL 16:DLE 32:0 48:0 64:@ 80:P  96:` 112:p '
.       '1:SOH 17:DC1 33:! 49:1 65:A 81:Q  97:a 113:q '
.       '2:STX 18:DC2 34:" 50:2 66:B 82:R  98:b 114:r '
.       '3:ETX 19:DC3 35:# 51:3 67:C 83:S  99:c 115:s '
.       '4:EOT 20 DC4 36:$ 52:4 68:D 84:T 100:d 116:t '
.       '5:ENQ 21:NAK 37:% 53:5 69:E 85:U 101:e 117:u '
.       '6:ACK 22:SYN 38:& 54:6 70:F 86:V 102:f 118:v '
.       "7:BEL 23:ETB 39:' 55:7 71:G 87:W 103:g 119:w "
.       '8:BS  24:CAN 40:( 56:8 72:H 88:X 104:h 120:x '
.       '9:HT  25:EM  41:) 57:9 73:I 89:Y 105:i 121:y '
.       '10:LF 26:SUB 42:*:58 : 74:J 90:Z 106:j 122:z '
.       '11:VT 27:ESC 43:+:59 ; 75:K 91:[ 107:k 123:{ '
.       '12:FF 28:FS  44:,:60 < 76:L 92:\ 108:l 124:| '
.       '13:CR 29:GS  45:-:61 = 77:M 93:] 109:m 125:} '
.       '14:SO 30:RS  46:.:62 > 78:N 94:^ 110:n 126:~ '
.       '15:SI 31:US  47:/:63 ? 79:O 95:_ 111:o 127:DEL ') 

        g.str.ascii.name = map.map(128)
        g.str.ascii.val = map.map(128)
        

	loop(str.ascii.init)

str.ascii.init.next

	ent = map.next(str.ascii.init)			:(str.ascii.init.finis)
	g.str.ascii.name[substr(&alphabet,+v + 1,1)] = name
	g.str.ascii.val[name] = +val			:(str.ascii.init.next)


*       Correct entry for 32 to be SPC, the space character
*       Correct entry for 0 to be NUL, the NUL character

        g.str.ascii.name[] = 'NUL'
        g.str.ascii.val['NUL'] = 0  
        g.str.ascii.name[' '] = 'SPC'
        g.str.ascii.val['SPC'] = 32                         :(return)
        
str.ascii.init.end

        define('str.datename(date)s')                       :(str.datename.end)

*       Convert date to form with no spaces, just dashes, to be
*       suitable for use as part of a file name.

*STR.DATENAME*
str.datename

        str.datename = replace(date,' :/','---')
        str.datename = substr(str.datename,12,8) '-' substr(str.datename,1,10)
                                                        :(return)
str.datename.end

	define('str.frequency(str)')		:(str.frequency.end)

*	Return map from the characters in a str to the number of times
*	each occurs in the str.

STR.FREQUENCY*
str.frequency
	
	str.frequency = map(50)

str.frequency.next

	str len(1) . c = 				:f(str.frequency.end)
	map.put(str.frequency,c,map.get(str.frequency,c) + 1)	:(str.frequency.next)

str.frequency.end

        define('str.lower(s)')                              :(str.lower.end)

*       Convert argument to lower case.

*STR.LOWER*
str.lower

        str.lower = replace(s,&ucase,&lcase)                :(return)

str.lower.end

        define('str.spaces(line)c')                         :(str.spaces.end)

*       Returns str which has ' ' in position _i_ if the _i_-th
*	characer in _str_ is a space (' '), or '*' otherwise.


        define('str.less(str,sub)before,after')             :(str.less.end)

**      Less removes the first instance of each character in SUB from *str*,
**      where SUB is a substr of *str*.

*STR.LESS*
str.less
        ident(str)                                      :s(return)
        str.less = str

str.less.ch
        sub len(1) . ch =                               :f(return)
        str.less break(ch) . before  ch rem . after
        str.less = before after                             :(str.less.ch)

str.less.end

        define('str.prefix(str,pre)word')                   :(str.prefix.end)

*       Prefix takes a list of space-separated words str and str.prefixes each
*       with the str pre.

*STR.PREFIX*
str.prefix

        str = str ' ';* so each word followed by space

str.prefix.1

        str break(' ') . word span(' ')  =              :f(return)
        add1(.str.prefixcount)
        str.prefix = append(str.prefix, pre word,'A')           :(str.prefix.1)

str.prefix.end

	define('str.slice(str,first,last)')		:(str.slice.end)

*STR.SLICE*
str.slice

	str.slice = substr(str,first,last)		:(return)

str.slice.end

*STR.SPACES*
str.spaces

	line len(1) . c					:f(return)
	str.spaces = str.spaces (ident(c,' ') ' ', '*')		:(str.spaces)

str.spaces.end
        define('str.upper(s)')                              :(str.upper.end)

*       Convert argument to upper case.

*STR.UPPER*
str.upper

        str.upper = replace(s,&lcase,&ucase)                :(return)

str.upper.end

	define('str.rank(word)')	:(str.rank.end)

*	The str.rank of a word consists of all the characters
*	that occur in the word sorted into alphabetical order
*	with each character followed by an integer giving the number
*	of times the character occurs in the word.

str.rank

	str.rank = string.frequency(word)	:(return)

	outut = 'dave, complete code for str.rank()'

	g.puzzle = 'spot'
	g.str.rank = string.frequency(g.puzzle)
	:(return)
str.rank.end

        define('str.reader(filename,expr)line,makr')               :(str.reader.end)

*       Return a sequence of the lines in the file specified by _filename_.
*	If _expr_ is not null, then _eval_ is called just
*	after each line is read, with the variable _pair_ set to
*	the associated pair. If _eval_ fails the line is skipped. 
*	Otherwise returns a new pair to be entered in the input 
*	seq.


*READER*
str.reader

        differ(filename) input(.file,g.channel.temp,filename):s(str.reader.opened)
        out('unable to open str.reader file ' filename '.') :(freturn)

str.reader.opened

        str.reader = map(1024)

str.reader.next

        map.add(map, (ident(filename) input, file))     :f(str.reader.eof)s(str.reader.next)

str.reader.eof

*       Here at end of file; close temporary file if one was needed.

        differ(filename) endfile(g.channel.temp)        :(return)

str.reader.end

	define('str.reader.string(str,delim)line')		:(str.reader.string.end)

*	Returns a sequence of the lines in _str_,
*	where the delimiter character _delim_ is used to mark 
*	the end of a line. One intended use of _str.reader.string_ 
*	is to assist in the construction of test programs.

str.reader.string

	delim = ident(delim) '/'
	str.reader.string = map.seq()

str.reader.string.next

	str break(delim) . line delim =			:f(return)
	add(str.reader.string,line)				:(str.reader.string.next)

str.reader.string.end

*       Each token is represented as an instance of the datatype _token_ as follows:

        data('token(lineno,ndx,type,text)')

*       where:
*               _lineno_        is the line number within the file;
*               _ndx_           is the ndxition of the first character of the token in the line;
*               _type_          is the token's type, as described below; and
*               _text_          is the text of the token.

*       The type is represented by a single character, as follows:

*               'c'             comment, indicated by asterisk (*) in the first column.
*                               The text consists of the entire line.

*               'i'             integer, consisting of one or more digits ('0123456789')

*               'l'             left opener, one of '(<[{'

*               'p'             punctation, one of '.;,?!', or single quote ('), or double quote ("),

*               'o'             other printable character, one of '~@#$%^&*_-+=`'.

*                'q'            quoted string, starting witn '"', and continuing 
*				to the next instance of the opening quote character.

*               'r'             right closer, one of ')>]}'

*               's'             space, consistine of one or more spaces (spaces)

*               't'             tab character

*               'u'             unprintable character, for example control-k

*               'w'             word, consisting of one of more letters in 
*				upper or lower case or "'" or "_".

*       The longest possible string meeting the rules is used when building a token.
*       For example, 'abc' is just the word 'abc', not 'a' followed by 'bc', and so forth.

*       It is recommended that the tab character NOT be used as an 
*	abbreviation for one or more spaces in the input file. If tabs 
*	are used, then _pos_ is ill-defined. If tabs are not used, then 
*	_pos_ indicates the true position in the line of the first character 
*	of the token, and so error messages and references to the 
*	token will be exact.  For example, _pos_ could be used to indicate 
*	where to give emphasis to a token by underlining it, or enclosing 
*	it in '_' to generate markdown format, and so forth.


        define('str.tokens(line)type,pos,text,lineno')                     :(str.tokens.end)


*       Tokens scans _line_ and returns a table of the str.tokens in the line.
*       The table has keys from 1..n, where _n_ is the number of str.tokens found. The
*       key '#' gives the number of entries in the table, and is used for no other purpose.
*       For example, a scan of an empty line results in str.tokens['#'] having the value zero.

*       This function is an instance of what is called a str.tokensical scanner, or tokenizer,
*        which is the first stage in a programming language compiler, or for any program 
*       that processes text files with a specified structure.

*TOKENS*
str.tokens  

        str.tokens = map.seq()
        line '*'                                        :f(str.tokens.next)
        type = 'c'
        text = line                                                             
        line =                                          :(str.tokens.new)

str.tokens.next

        line ' '                                        :s(str.tokens.space)
        line any('0123456789')                          :s(str.tokens.integer)
        line any('(<[{')                                :s(str.tokens.left)
        line any('.;,?!')                               :s(str.tokens.punctuation)
        line '"'                                        :s(str.tokens.quote)
        line any('~@#$%^&*_-+=')                                        :s(str.tokens.other)
        line any(')>]}')                                :s(str.tokens.right)
        line char(9)                                    :s(str.tokens.tab)
        line any(&lcase &ucase)                         :s(str.tokens.word)

*       Here for unprintable
                                                        :(str.tokens.unprintable)

str.tokens.integer

        type = 'i'
        line span('0123456789') . text =                :(str.tokens.new)

str.tokens.punctuation 

        type = 'p'                                       :(str.tokens.character)

str.tokens.other

        type = 'o'                                      :(str.tokens.character)

*str.tokens.other

        type = 'o'                                      :(str.tokens.character)

str.tokens.quote

        type = 'q'
        line '"' break('"') . text '"' =        
        text = '"' text '"'                             :(str.tokens.new)

str.tokens.right

        type = 'r'                                      :(str.tokens.character)

str.tokens.space

        type = 's'
        line span(' ')  . text =                        :(str.tokens.new)

str.tokens.tab

        type = 't'                                      :(str.tokens.character)

str.tokens.word

*FIX*
        type = 'w'
        line span(&ucase &lcase "_" "'") . text =      :(str.tokens.new)

str.tokens.character

*       Here if token is single character.

        line len(1) . text                              :(str.tokens.new)

str.tokens.new

        map.add(str.tokens,token(lineno,pos,type,text))     :(str.tokens.next)

str.tokens.end

        define('str.words(line)word')                        :(str.words.end)

*       Return sequence of the str.words in line, fail if no str.words.

*WORDS*
str.words

        str.words = map()
        line =  line ' '

str.words.next

        line break(' ') . word ' ' =                     :f(return)
        map.add(str.words,word)                             :(str.words.next)

str.words.end

       define('str.writerr(lines)'       )                  :(str.writerr.end)

*       Writes a sequence of the lines in the sequence _lines_
*	to standard output.

str.writerr

	lines = copy(lines)
	loop(lines)

str.writerr.next
	
	output = map.next(lines)				:f(return)s(str.writerr.next)

str.writerr.end


        define('setl4.traceoff()')                            :(setl4.traceoff.end)

*       Initiate tracing.

*TRACEOFF*
setl4.traceoff
        &fsetl4.trace = &setl4.trace =

        g.scoring = g.tracing = 0
        out('stop TRACING ')

setl4.traceoff.end

        define('setl4.traceon()')                             :(setl4.traceon.end)

*       Initiate tracing.

*TRACEON*
setl4.traceon

        out('start TRACING')
*       &fsetl4.trace = &setl4.trace = 1500000
        g.scoring = g.tracing = 1
                                                        :(return)
setl4.traceon.end

        :(error.end)
error
        output = 'error lastno ' &lastno
        output = 'ERROR'
        output = 'Fatal error: stopping the madness.'
*       &dump = 3
                                                        :(end)
error.end

	define('loop(set)kind')			:(loop.end)

*	Returns iterator over compound object _obj_.

loop

        set.index(set) = 0
	kind = set.kind(set)
	ident(kind,'map')		:s(loop.map) 
	ident(kind,'seq')		:s(loop.map) 

	ident(kind,'set')		:s(loop.map) 
	ident(kind,'string')		:s(loop.map) 
	output = 'unsupported datatype ' kind ' for loop, quitting' :(end)

loop.map
loop.set
        set.array(set) = convert(set.table(set),'array'):(return)

loop.seq	
						:(return)

loop.string

	output = 'loop on sring not supported ' :(end)


loop.end
*        define('map.loop(map,kind)')                    :(map.loop.end)
*TODO*
*       Returns an iterator for _map_. Use _map.next_ to retrieve
*       the next entry in map. _map.next_ fails when no more entries remain.

*       _kind_ gives the kind of loop:

*               '+order'        iterate in order in which entries added. (default)
*               '-order'        iterate in reverse order in which entries added.
*               '+key'          iterate in incresing values of keys.
*               '-key'          iterate in decceasing values of keys.
*               '+val'          iterate in incresing values of values.
*               '-key'          iterate in decreasing values of keys.

*       Otherwise iterate over the keys in the order in which they were added to the map.

*map.loop
*
*        map.next(map) = 0
* :(map.loop.order)
*        ident(kind)                                     :s(map.loop.order)
*        ident(kind, '+order')                           :s(map.loop.key.order.inc)
*        ident(kind, '-order')                           :s(map.loop.key.order.dec)
*        ident(kind, '+key')                             :s(map.loop.key.inc)
*        ident(kind, '-key')                             :s(map.loop.key.dec)
*        ident(kind, '+val')                             :s(map.loop.value.inc)
*        ident(kind, '-val')                             :s(map.loop.value.dec)
*
*map.loop.order.inc
*
*        map.array(map) = convert(map.table(map),'array'):(map.done)
*
*map.loop.rorder.inc
*
*        output = 'loop rorder not implemented '         :(nosuchlabel)
*        map.array(map) = convert(map.table(map),'array'):(map.done)
*
*map.loop.key.inc
*
*        map.array(map) = rsort(map.table(map),1)        :(return)
*
*map.loop.key.dec
*
*        map.array(map) = sort(map.table(map),1)         :(return)
*
*map.loop.value.inc
*
*        map.array(map) = rsort(map.table(map),2)        :(return)
*
*map.loop.value.dec
*
*        map.array(map) = sort(map.table(map),-2)        :(return)
*
*map.loop.end
