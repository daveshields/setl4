*   Lexical comparisons
-   -------------------

*   str.leq(a,b)    tests if a is lexically equal to b
*   str.lge(a,b)    tests if a is lexically greater than or equal to b
*   str.lgt(a,b)    tests if a is lexically greater than b
*   str.lle(a,b)    tests if a is lexically less than or equal to b
*   str.llt(a,b)    tests if a is lexically less than b
*   stg.lne(a,b)    tests if a is lexically not equal to b


*   Integer comparisons
*   -------------------

*   int.eq(a,b)     tests if a is equal to b
*   int.ge(a,b)     tests if a is greater than or equal to b
*   int.gt(a,b)     tests if a is greater than b
*   int.le(a,b)     tests if a is less than or equal to b
*   int.lt(a,b)     tests if a is less than b
*   int.ne(a,b)     tests if a is not equal to b


    define('int.eq(a,b)')                           :(int.eq.end)

*   Tests if _a_ is equal to _b_.

int.eq

    int.eq = (integer(a) integer(b) eq(a,b) TRUE, FALSE) :s(return)

int.eq.end

    define('int.ge(a,b)')                           :(int.ge.end)

*   Tests if _a_ is greater than or equal to _b_.

int.ge

    int.ge = (integer(a) integer(b) ge(a,b) TRUE, FALSE) :s(return)

int.ge.end

    define('int.gt(a,b)')                           :(int.gt.end)

*   Tests if _a_ is greater than _b_.

int.gt

    int.gt = (integer(a) integer(b) gt(a,b) TRUE, FALSE) :s(return)

int.gt.end

    define('int.le(a,b)')                           :(int.le.end)

*   Tests if _a_ is less than or equal to _b_.

int.le

    int.le = (integer(a) integer(b) le(a,b) TRUE, FALSE) :s(return)

int.le.end

    define('int.lt(a,b)')                           :(int.lt.end)

*   Tests if _a_ is less than _b_.

int.lt

    int.lt = (integer(a) integer(b) lt(a,b) TRUE, FALSE) :s(return)

int.lt.end

    define('int.ne(a,b)')                           :(int.ne.end)

*   Tests if _a_ is not equal to _b_.

int.ne

    int.ne = (integer(a) integer(b) ne(a,b) TRUE, FALSE) :s(return)

int.ne.end


*   Lexical

    define('str.leq(a,b)')                           :(str.leq.end)

*   Tests if _a_ is lexically equal to _b_.

str.leq

    str.leq = leq(a,b) true                         
    str.leq = (leq(a,b) TRUE, FALSE) :s(return)
          
str.leq.end

    define('str.lge(a,b)')                           :(str.lge.end)

*   Tests if _a_ is lexically greater than or equal to _b_.

str.lge

    str.ge = (ge(a,b) TRUE, FALSE) :s(return)

str.lge.end

    define('str.lgt(a,b)')                           :(str.lgt.end)

*   Tests if _a_ is lexically greater than _b_.

str.lgt

    str.lgt = (gt(a,b) TRUE, FALSE) :s(return)

str.lgt.end

    define('str.lle(a,b)')                           :(str.lle.end)

*   Tests if _a_ is lexically less than or equal to _b_.

str.lle

    str.le = (le(a,b) TRUE, FALSE)                   :s(return)

str.lle.end

    define('str.llt(a,b)')                           :(str.llt.end)

*   Tests if _a_ is lexically less than _b_.

str.llt

    str.llt = (llt(a,b) TRUE, FALSE) :s(return)

str.llt.end

    define('str.lne(a,b)')                           :(str.lne.end)

*   Tests if _a_ is not lexically equal to _b_.

str.lne

    str.lne = (ne(a,b) TRUE, FALSE) :s(return)

str.lne.end

