* NUMBER.SBL

*       Copyright 2017, David Shields
*       Licensed under the MIT license.

*       This file extends SPITBOL by adding support for creating and operating
*       on maps.

        define('number.cardinal(n,word)')                      :(number.cardinal.end)

*       If N is one, returns 'one' followed by WORD.
*       Otherwise returns NUMBER(N) followed by WORD and 'S'.

number.cardinal

        number.cardinal = (eq(n,1) 'one ' word, number(n) ' '  word 's'):(return)

number.cardinal.end


        define('number.number(n)')                             :(number.end)

**      If N can be represented as a string of one or two words
**      then return that string. Otherwise return N.

number.number
        number.number = eq(n) 'zero'                           :s(return)
        number.number = g.numbers[n]
        differ(number.number)                                  :s(return)
        number.number = n                                      :(return)
number.number.end

        define('number.thousands(s)n')                         :(number.thousands.end)

*       Format s with comma's every three digits from right.

*THOUSANDS*
number.thousands

        n = size(s)
        number.thousands = le(n,3) s                           :s(return)
        number.thousands = number.thousands(substr(s,1,n - 3)) ',' substr(s, n - 2, 3):(return)

number.thousands.end 
