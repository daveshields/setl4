        define('tokens()line,type,pos,text,lineno')                     (tokens.end)


*       Tokens scans _line_ and returns a table of the tokens in the line.
*       The table has keys from 1..n, where _n_ is the number of tokens found. The
*       key '#' gives the number of entries in the table, and is used for no other purpose.
*       For example, a scan of an empty line results in tokens['#'] having the value zero.

*       This function is an instance of what is called a tokensical scanner, or tokenizer,
*        which is the first stage in a programming language compiler, or for any program 
*       that processes text files with a specified structure.

*       Each token is represented as an instance of the datatype _token_ as follows:

        data('token(lineno,pos,type,text)'

*       where:
*               _lineno_        is the line number within the file;
*               _pos_           is the position of the first character of the token in the line;
*               _type_          is the token's type, as described below; and
*               _text_          is the text of the token.

*       The type is represented by a single character, as follows:

*               'c'             comment, indicated by asterisk (*) in the first column.
*                               The text consists of the entire line.
*               'i'             integer, consisting of one or more digits ('0123456789')
*               'l'             left opener, one of '(<[{'
*               'p'             punctation, one of '.;,?!', or single quote ('), or double quote ("),
*               'o'             other printable character, one of '~@#$%^&*_-+=`'.
                'q'             quoted string, starting witn '"', and continuing to the next instance of the opening quote character.
*               'r'             right closer, one of ')>]}'
*               's'             space, consistine of one or more spaces (spaces)
*               't'             tab character
*               'u'             unprintable character, for example control-k
*               'w'             word, consisting of one of more letters in upper or lower case or
*                               "'" or "_".

*       The longest possible string meeting the rules is used when building a token.
*       For example, 'abc' is just the word 'abc', not 'a' followed by 'bc', and so forth.

*       It is recommended that the tab character NOT be used as an abbreviation for one or more spaces
*       in the input file. If tabs are used, then _pos_ is ill-defined. If tabs are not used, then _pos_
*       indicates the true position in the line of the first character of the token, and so error messages
*       and references to the token will be exact. For example, _pos_ could be used to indicate where to
*       give emphasis to a token by underlining it, or enclosing it in '_' to generate markdown format, and so forth.



tokens  

        tokens = map.sequence()
        line '*'                                        :f(tokens.next)
        type = 'c'
        text = line                                                             
        line =                                          :(tokens.new)

tokens.next

        line ' '                                        :s(tokens.space)
        line any('0123456789')                          :s(tokens.integer)
        line any('(<[{')                                :s(tokens.left)
        line any('.;,?!')                               :s(tokens.punctuation)
        line '"'                                        :s(tokens.quote)
        line any('~@#$%^&*_-+=')                                        :s(tokens.other
        line any(')>]}')                                :s(tokens.right)
        line char(9)                                    :s(tokens.tab)
        line any(&lcase &ucase)                         :s(tokens.word)

*       Here for unprintable
                                                        :(tokens.unprintable)

tokens.integer

        type = 'i'
        line span('0123456789') . text =                :(tokens.new)

tokens.punctuation 

        type = 'p'                                       :(tokens.character)

tokens.other

        type = 'o'                                      :(tokens.character)

*tokens.other

        type = 'o'                                      :(tokens.character)

tokens.quote

        type = 'q'
        line '"' break('"') . text '"' =        
        text = '"' text '"'                             :(tokens.new)

tokens.right

        type = 'r'                                      :(tokens.character)

tokens.space

        type = 's'
        line span(' ')  . text =                        :(tokens.new)

tokens.tab

        type = 't'                                      :(tokens.character)

tokens.word

*FIX*
        type = 'w'
        line span(&ucase &lcase "_" "'"))) . text =      :(tokens.new)

map.sbl:1okens.tab

        type = 't'                                      :(tokens.character)

tokens.character

*       Here if token is single character.

        line len(1) . text                              :(tokens.new)

tokens.new

        map.add(tokens,token(lineno,pos,type,text))     :(tokens.next)

tokens.end

