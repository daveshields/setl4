*   Copyright 2017, David Shields
*   Licensed under the MIT license.

-include "setl4.stl"


    define('quicksort(seq)q1,q2,q3,pivot,this')    :(quicksort.end)

*   Sort sequence _s_ using Hoare's quicksort algorithm.

quicksort

    out('quicksort input')
    show(seq)
    quicksort = le(set.size(seq),1) seq   :s(return)
    out('enter quicksort>1')
    out('seq dt',datatype(seq))
    out('seq kind',set.kind(seq))
    pivot = arbitrary(seq)
    out('pivot',pivot)
*   quicksort = join(
    q1 = quicksort(filter(seq,  'lt(value(this),pivot)'))
    out('q1'); show(q1)
    q2 = filter(seq,            'eq(value(this),pivot)')
    out('q2'); show(q2)
    q3 = quicksort(filter(seq,  'gt(value(this),pivot)'))
    out('q3'); show(q3)
    quicksort = join(q1,q2,q3)
 :(return)
*   quicksort = join(quicksort(filter(seq,'lt(value(this),pivot)')),
*               filter(seq,'eq(value(this),pivot)'),
*               quicksort(filter(seq,'gt(value(this),pivot)')))
    :(return)

quicksort.end

*   Build set of 20 random integers in range 1 .. 100.

    seq = new('seq 8 2')
    show(seq)
    sorted = quicksort(seq)
    out('sort result')
    show(sorted)
end
seq.add
    seq = new('seq')

    gt(i = i + 1,10)                    :s(seq.built)
    r = random(100)
    push(seq,r)                         :(seq.add)

seq.built

    out('sort input')
    show(seq)
*end
    sorted = quicksort(seq)
    out('sort result')
    out('result dt',datatype(sorted))
*   out('result size',set.size(sorted))
    show(sorted)
end
